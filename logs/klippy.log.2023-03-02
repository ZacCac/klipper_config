=============== Log rollover at Thu Mar  2 05:22:49 2023 ===============
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-121-ga5fb2076'
CPU: 4 core ARMv7 Processor rev 3 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Thu Mar  2 05:22:50 2023 (1677734570.9 10.6)
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 134, in _read_config
    config = pconfig.read_main_config()
  File "/home/pi/klipper/klippy/configfile.py", line 281, in read_main_config
    regular_config = self._build_config_wrapper(regular_data, filename)
  File "/home/pi/klipper/klippy/configfile.py", line 268, in _build_config_wrapper
    self._parse_config(data, filename, fileconfig, set())
  File "/home/pi/klipper/klippy/configfile.py", line 256, in _parse_config
    self._resolve_include(filename, include_spec, fileconfig,
  File "/home/pi/klipper/klippy/configfile.py", line 229, in _resolve_include
    raise error("Include file '%s' does not exist" % (include_glob,))
configparser.Error: Include file '/home/pi/printer_data/config/macros.cfg' does not exist
webhooks client 3044326152: New connection
webhooks client 3044326152: Client info {'program': 'Moonraker', 'version': 'v0.8.0-23-g18f5ff4'}
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-121-ga5fb2076'
CPU: 4 core ARMv7 Processor rev 3 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Thu Mar  2 22:12:26 2023 (1677795146.8 10.5)
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 134, in _read_config
    config = pconfig.read_main_config()
  File "/home/pi/klipper/klippy/configfile.py", line 281, in read_main_config
    regular_config = self._build_config_wrapper(regular_data, filename)
  File "/home/pi/klipper/klippy/configfile.py", line 268, in _build_config_wrapper
    self._parse_config(data, filename, fileconfig, set())
  File "/home/pi/klipper/klippy/configfile.py", line 256, in _parse_config
    self._resolve_include(filename, include_spec, fileconfig,
  File "/home/pi/klipper/klippy/configfile.py", line 229, in _resolve_include
    raise error("Include file '%s' does not exist" % (include_glob,))
configparser.Error: Include file '/home/pi/printer_data/config/macros.cfg' does not exist
webhooks client 3056351408: New connection
webhooks client 3056351408: Client info {'program': 'Moonraker', 'version': 'v0.8.0-23-g18f5ff4'}
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-121-ga5fb2076'
CPU: 4 core ARMv7 Processor rev 3 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Thu Mar  2 22:25:27 2023 (1677795927.0 10.6)
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 134, in _read_config
    config = pconfig.read_main_config()
  File "/home/pi/klipper/klippy/configfile.py", line 281, in read_main_config
    regular_config = self._build_config_wrapper(regular_data, filename)
  File "/home/pi/klipper/klippy/configfile.py", line 268, in _build_config_wrapper
    self._parse_config(data, filename, fileconfig, set())
  File "/home/pi/klipper/klippy/configfile.py", line 256, in _parse_config
    self._resolve_include(filename, include_spec, fileconfig,
  File "/home/pi/klipper/klippy/configfile.py", line 229, in _resolve_include
    raise error("Include file '%s' does not exist" % (include_glob,))
configparser.Error: Include file '/home/pi/printer_data/config/macros.cfg' does not exist
webhooks client 3056277680: New connection
webhooks client 3056277680: Client info {'program': 'Moonraker', 'version': 'v0.8.0-23-g18f5ff4'}
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-121-ga5fb2076'
CPU: 4 core ARMv7 Processor rev 3 (v7l)
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Thu Mar  2 22:28:10 2023 (1677796090.6 162.8)
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 134, in _read_config
    config = pconfig.read_main_config()
  File "/home/pi/klipper/klippy/configfile.py", line 281, in read_main_config
    regular_config = self._build_config_wrapper(regular_data, filename)
  File "/home/pi/klipper/klippy/configfile.py", line 268, in _build_config_wrapper
    self._parse_config(data, filename, fileconfig, set())
  File "/home/pi/klipper/klippy/configfile.py", line 256, in _parse_config
    self._resolve_include(filename, include_spec, fileconfig,
  File "/home/pi/klipper/klippy/configfile.py", line 229, in _resolve_include
    raise error("Include file '%s' does not exist" % (include_glob,))
configparser.Error: Include file '/home/pi/printer_data/config/macros.cfg' does not exist
webhooks client 3044545272: New connection
webhooks client 3044545272: Client info {'program': 'Moonraker', 'version': 'v0.8.0-23-g18f5ff4'}
webhooks client 3044545272: Disconnected
Restarting printer
Start printer at Thu Mar  2 22:48:21 2023 (1677797302.0 1374.2)
===== Config file =====
[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_39003000105053424E363620-if00
restart_method = command

[mcu sht36v2]
canbus_uuid = 3388e21717f3

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.70
min_temp = 0
max_temp = 120
control = pid
pid_kp = 58.437
pid_ki = 2.347
pid_kd = 363.769
pwm_cycle_time = 0.0166

[extruder]
step_pin = sht36v2:PB4
dir_pin = sht36v2:PB3
enable_pin = !sht36v2:PA15
rotation_distance = 22.6789511
gear_ratio = 50:17
microsteps = 32
full_steps_per_rotation = 200
filament_diameter = 1.75
heater_pin = sht36v2:PA8
sensor_type = 104NT-4-RO25H42G
sensor_pin = sht36v2:PA3
min_temp = 10
max_temp = 270
max_power = 1.0
min_extrude_temp = 170
control = pid
pid_kp = 26.213
pid_ki = 1.304
pid_kd = 131.721
nozzle_diameter = 0.4
pressure_advance = 0.055
pressure_advance_smooth_time = 0.030

[tmc2209 extruder]
uart_pin = sht36v2:PB5
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan]
pin = rpi:gpio18
max_power = 1
cycle_time = 0.002
hardware_pwm = false
shutdown_speed = 0

[heater_fan hotend_fan]
pin = sht36v2:PB10
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = .7

[heater_fan exhaust_fan]
pin = PD15
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0
heater = heater_bed
heater_temp = 60
fan_speed = 1.0

[fan_generic fan]
pin = sht36v2:PB11

[multi_pin controller_fan_pins]
pins = PD14, PD13

[controller_fan controller_fan]
pin = controller_fan_pins
kick_start_time = 0.5
heater = heater_bed, extruder
stepper = X, Y, Z, Z1, Z2, Z3
fan_speed = 0.6

[temperature_sensor Octopus]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor RaspberryPi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor Enclosure]
sensor_type = ATC Semitec 104GT-2
sensor_pin = sht36v2:PA4
min_temp = -50
max_temp = 350

[temperature_sensor Fly-SHT]
sensor_type = temperature_mcu
sensor_mcu = sht36v2

[printer]
kinematics = corexy
max_velocity = 700
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 10.0

[virtual_sdcard]
path = ~/gcode_files

[display_status]

[pause_resume]

[respond]
default_type = echo

[idle_timeout]
timeout = 1800

[quad_gantry_level]
gantry_corners = 
	
	
	
	
	
	
	-80,-22
	390,408
points = 
	
	
	
	
	
	
	
	
	
	
	25,0
	25,280
	310,280
	310,0
speed = 75
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 15

[bed_mesh]
speed = 50
horizontal_move_z = 10
mesh_min = 40, 40
mesh_max = 270, 290
probe_count = 7, 7
mesh_pps = 2, 2
algorithm = bicubic
relative_reference_index = 24

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = !PG6
position_min = 0
position_endstop = 310
position_max = 310
homing_speed = 60
second_homing_speed = 10
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = false
run_current = 0.4
sense_resistor = 0.105
stealthchop_threshold = 0

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = !PG9
position_min = 0
position_endstop = 330
position_max = 330
homing_speed = 60
second_homing_speed = 10
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = false
run_current = 0.4
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PF11
dir_pin = PG3
enable_pin = !PG5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32
endstop_pin = probe:z_virtual_endstop
position_max = 250
position_min = -5
homing_speed = 4
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = PF10
enable_pin = !PG2
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[gcode_macro _ADAPTIVE_MESH_VARIABLES]
variable_ready = False
variable_do_mesh = False
variable_do_nominal = False
variable_mesh_min = 0,0
variable_mesh_max = 0,0
variable_mesh_center = 0,0
variable_mesh_xcenter = 0
variable_mesh_ycenter = 0
variable_obj_min_y = 0
variable_obj_min_x = 0
variable_probe_count = 0,0
variable_rri = 0
variable_algo = "bicubic"
gcode = 

[gcode_macro _COMPUTE_MESH_PARAMETERS]
description = Compute the mesh parameters and store them for later use
gcode = 
	
	{% set xMinConf, yMinConf = printer["configfile"].config["bed_mesh"]["mesh_min"].split(',')|map('trim')|map('int') %}
	{% set xMaxConf, yMaxConf = printer["configfile"].config["bed_mesh"]["mesh_max"].split(',')|map('trim')|map('int') %}
	{% set xProbeCntConf, yProbeCntConf = printer["configfile"].config["bed_mesh"]["probe_count"].split(',')|map('trim')|map('int') %}
	{% set algo = printer["configfile"].config["bed_mesh"]["algorithm"]|lower %}
	{% set xMeshPPS, yMeshPPS = (printer["configfile"].config["bed_mesh"]["mesh_pps"] | default('2,2')).split(',')|map('trim')|map('int') %}
	
	
	
	{% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
	
	
	{% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
	{% set margin = params.MARGIN|default(5)|int %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=obj_min_y VALUE={yMinSpec}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=obj_min_x VALUE={xMinSpec}
	
	
	
	
	{% set xMin = [xMinConf, (xMinSpec - margin)]|max %}
	{% set xMax = [xMaxConf, (xMaxSpec + margin)]|min %}
	{% set yMin = [yMinConf, (yMinSpec - margin)]|max %}
	{% set yMax = [yMaxConf, (yMaxSpec + margin)]|min %}
	
	
	
	
	{% set xProbeCnt = ((xMax - xMin) * xProbeCntConf / (xMaxConf - xMinConf))|round(0, 'ceil')|int %}
	{% set yProbeCnt = ((yMax - yMin) * yProbeCntConf / (yMaxConf - yMinConf))|round(0, 'ceil')|int %}
	
	
	
	
	
	
	
	
	{% if xProbeCnt < 3 and yProbeCnt < 3 %}
	RESPOND MSG="Computed mesh parameters: none, bed mesh not needed"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={False}
	
	{% set xCenter = xMin + ((xMax - xMin) / 2) %}
	{% set yCenter = yMin + ((yMax - yMin) / 2) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_xcenter VALUE={xCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_ycenter VALUE={yCenter}
	M118 ADAPTIVE: X_Center: {xCenter}, Y_Center: {yCenter}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	{% else %}
	{% set xProbeCnt = [3, xProbeCnt]|max %}
	{% set yProbeCnt = [3, yProbeCnt]|max %}
	
	
	
	{% if xProbeCnt % 2 == 0 %}
	{% set xProbeCnt = xProbeCnt + 1 %}
	{% endif %}
	{% if yProbeCnt % 2 == 0 %}
	{% set yProbeCnt = yProbeCnt + 1 %}
	{% endif %}
	
	
	{% if xMeshPPS != 0 or yMeshPPS != 0 %}
	{% set probeCntMin = [xProbeCnt, yProbeCnt]|min %}
	{% set probeCntMax = [xProbeCnt, yProbeCnt]|max %}
	{% if algo == "lagrange" and probeCntMax > 6 %}
	
	{% set algo = "bicubic" %}
	{% endif %}
	{% if algo == "bicubic" and probeCntMin < 4 %}
	{% if probeCntMax > 6 %}
	
	{% if xProbeCnt > yProbeCnt %}
	{% set yProbeCnt = 5 %}
	{% else %}
	{% set xProbeCnt = 5 %}
	{% endif %}
	{% else %}
	
	{% set algo = "lagrange" %}
	{% endif %}
	{% endif %}
	{% endif %}
	
	
	{% set rRefIndex = (((xProbeCnt * yProbeCnt) - 1) / 2)|int %}
	{% set xCenter = xMin + ((xMax - xMin) / 2) %}
	{% set yCenter = yMin + ((yMax - yMin) / 2) %}
	
	
	{% set mesh_min = "%d,%d"|format(xMin, yMin) %}
	{% set mesh_max = "%d,%d"|format(xMax, yMax) %}
	{% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} MESH_CENTER={mesh_center} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_xcenter VALUE={xCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_ycenter VALUE={yCenter}
	M118 ADAPTIVE: X_Center: {xCenter}, Y_Center: {yCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=rri VALUE={rRefIndex}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
	{% endif %}
	{% else %}
	RESPOND MSG="Computed mesh parameters: none, going for a nominal bed mesh"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={True}
	
	{% set xCenter = xMinConf + ((xMaxConf - xMinConf) / 2) %}
	{% set yCenter = yMinConf + ((yMaxConf - yMinConf) / 2) %}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={True}

[gcode_macro _ADAPTIVE_BED_MESH]
description = Perform a bed mesh, but only where and when it's needed
gcode = 
	{% set ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home printer first!") }
	{% endif %}
	
	
	{% if ready %}
	_DO_ADAPTIVE_MESH
	
	
	
	{% else %}
	RESPOND MSG="Adaptive bed mesh: parameters not computed, automatically calling the COMPUTE_MESH_PARAMETERS macro prior to the mesh"
	_COMPUTE_MESH_PARAMETERS {rawparams}
	M400
	_DO_ADAPTIVE_MESH
	{% endif %}

[gcode_macro _DO_ADAPTIVE_MESH]
gcode = 
	
	{% set do_mesh = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_mesh %}
	{% set do_nominal = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_nominal %}
	{% set mesh_min = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_min %}
	{% set mesh_max = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_max %}
	{% set probe_count = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].probe_count %}
	{% set rRefIndex = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].rri %}
	{% set algo = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].algo %}
	
	
	
	
	{% if do_mesh %}
	
	{% if do_nominal %}
	RESPOND MSG="Adaptive bed mesh: nominal bed mesh"
	BED_MESH_CALIBRATE_ORIGINAL
	{% else %}
	RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
	BED_MESH_CALIBRATE_ORIGINAL MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}
	{% endif %}
	{% else %}
	RESPOND MSG="Adaptive bed mesh: no mesh to be done"
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={False}

[gcode_macro CURRENT_HIGH]
description = Raises stepper current for printing routine
gcode = 
	M117 Increased motor currents.
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro globalvariables"].printcurrentxy|float}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro globalvariables"].printcurrentxy|float}
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}

[gcode_macro CURRENT_NORMAL]
description = Lowers stepper current for NON-printing routines
gcode = 
	M117 Decreased motor currents.
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={ printer.configfile.config["tmc2209 stepper_x"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={ printer.configfile.config["tmc2209 stepper_y"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={ printer.configfile.config["tmc2209 stepper_z"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={ printer.configfile.config["tmc2209 stepper_z1"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={ printer.configfile.config["tmc2209 stepper_z2"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={ printer.configfile.config["tmc2209 stepper_z3"]["run_current"] }

[force_move]
enable_force_move = true

[probe]
pin = PG11sht36v2:PA1
x_offset = -21.2
y_offset = 37.5
speed = 3.0
lift_speed = 10.0
samples = 5
samples_result = median
sample_retract_dist = 2.0
samples_tolerance = 0.010
samples_tolerance_retries = 5
z_offset = 8.60

[homing_override]
axes = z
gcode = 
	{% set KEEP_PROBE = params.KEEP_PROBE|default(FALSE) %}
	{% set GOT_PROBE = params.GOT_PROBE|default(FALSE) %}
	{% set ONLY_Z = params.ONLY_Z|default(FALSE) %}
	{% set Z_POS = printer.toolhead.position.z %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set X_PROBEOFFSET = printer.configfile.config["probe"]["x_offset"]|float %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set Y_PROBEOFFSET = printer.configfile.config["probe"]["y_offset"]|float %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	SET_KINEMATIC_POSITION Z=0
	G0 Z15 F3600
	{% else %}
	{% if Z_POS < 15 %}
	G90
	G0 Z15
	{% else %}
	G91
	G0 Z1 F3600
	G90
	{% endif %}
	{% endif %}
	G90
	M118 Currently homed: { printer.toolhead.homed_axes }
	{% if printer.toolhead.homed_axes == "xyz" and ONLY_Z %}
	M118 Re-Homing skipped on X & Y.
	{% else %}
	G28 X Y
	{% endif %}
	{% if GOT_PROBE == FALSE %}
	M401
	{% endif %}
	G0 X{(X_MID - X_PROBEOFFSET)} Y{(Y_MID - Y_PROBEOFFSET)} F4000
	G28 Z
	G0 Z15 F3600
	{% if KEEP_PROBE == FALSE %}
	M402
	{% endif %}

[gcode_macro M401]
description = Deploys the Euclid probe
gcode = 
	QUERY_PROBE
	{% set Z_POS = printer.toolhead.position.z %}
	{% if printer.probe.last_query %}
	M118 Fetching Euclid Probe.
	{% if printer.toolhead.homed_axes != "xyz" %}
	SET_KINEMATIC_POSITION Z=0
	G0 Z15 F3600
	G28X
	G28Y
	{% endif %}
	G90
	{% if Z_POS < 15 %} G0 Z15 {% endif %}
	_PROBE_DEPLOY
	{% else %}
	M118 ?!Attempted to Deploy probe but it is already attached.
	{% endif %}

[gcode_macro M402]
description = Stows the Euclid probe
gcode = 
	QUERY_PROBE
	{% set Z_POS = printer.toolhead.position.z %}
	{% if not printer.probe.last_query %}
	M118 Stowing Euclid Probe.
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	{% if Z_POS < 15 %} G0 Z15 {% endif %}
	_PROBE_STOW
	{% else %}
	M118 ?!Attempted to Stow probe but it is not attached.
	{% endif %}

[gcode_macro _PROBE_DEPLOY]
gcode = 
	G90
	G0 Y{printer["gcode_macro globalvariables"].euclidcleary|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidx|float} F4000
	G0 Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} F4000
	_error_if_probe_not_deployed

[gcode_macro _PROBE_STOW]
gcode = 
	G90
	G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} F4000
	G0 Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidx|float} F2000
	G0 Y{printer["gcode_macro globalvariables"].euclidcleary|float} F4000
	_error_if_probe_deployed

[gcode_macro _do_error_if_probe_deployed]
gcode = 
	{% if not printer.probe.last_query %}
	{action_raise_error("ERROR: Probe is still deployed, please remove and return to dock.")}
	{% else %}
	M118 Euclid probe has been stowed.
	{% endif %}

[gcode_macro _error_if_probe_deployed]
gcode = 
	G4 P300
	QUERY_PROBE
	_do_error_if_probe_deployed

[gcode_macro _do_error_if_probe_not_deployed]
gcode = 
	{% if printer.probe.last_query %}
	{action_raise_error("ERROR: Probe unsuccessfully deployed, please check printer.")}
	{% else %}
	M118 Euclid probe has been attached.
	{% endif %}

[gcode_macro _error_if_probe_not_deployed]
gcode = 
	G4 P300
	QUERY_PROBE
	_do_error_if_probe_not_deployed

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_ORIGINAL
description = Levels the four Z-axis gantry corners
gcode = 
	{% if printer.toolhead.homed_axes != "xyz" %}
	G28 KEEP_PROBE:TRUE
	{% endif %}
	M401
	QUAD_GANTRY_LEVEL_ORIGINAL
	M402

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIGINAL
description = Performs bed mesh
gcode = 
	QUERY_PROBE
	M401
	BED_MESH_CALIBRATE_ORIGINAL
	M402

[gcode_macro G32]
description = Clears bed-mesh and performs G28, QGL, G28
gcode = 
	BED_MESH_CLEAR
	G28 KEEP_PROBE:TRUE
	QUAD_GANTRY_LEVEL_ORIGINAL
	G28 GOT_PROBE:TRUE
	QUERY_PROBE

[gcode_macro G3201]
description = Clears bed-mesh and performs G28, QGL, G28-Z, Probes Center, and applies bed-mesh
gcode = 
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set X_MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_xcenter|float %}
	{% set Y_MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_ycenter|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set X_PROBEOFFSET = printer.configfile.config["probe"]["x_offset"]|float %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set Y_PROBEOFFSET = printer.configfile.config["probe"]["y_offset"]|float %}
	{% set ZSpeed = printer["gcode_macro globalvariables"].zprobespeed|float %}
	{% set ZSamples = printer["gcode_macro globalvariables"].zprobesamples|int %}
	{% set ZTolerance = printer["gcode_macro globalvariables"].zprobetolerance|float %}
	{% set ZRetract = printer["gcode_macro globalvariables"].zproberetract|float %}
	{% set S_Retries = printer.configfile.config["probe"]["samples_tolerance_retries"]|int %}
	BED_MESH_CLEAR
	G28 KEEP_PROBE:TRUE
	QUAD_GANTRY_LEVEL_ORIGINAL
	G0 Z15 F3600
	{% if MeshToApply == "ADAPTIVE" %}
	G0 X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} F4000
	M118 ADAPTIVE: Moving to X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} to probe Z0.
	{% else %}
	G0 X{(X_MID - X_PROBEOFFSET)} Y{(Y_MID - Y_PROBEOFFSET)} F4000
	M118 Moving to X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} to probe Z0.
	{% endif %}
	PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries={S_Retries} sample_retract_dist={ZRetract}
	_CHECK_PROBE3201

[gcode_macro _CHECK_PROBE3201]
gcode = 
	{% set PASS = printer.probe.last_z_result %}
	{% set ZP_CAL = printer.configfile.config["probe"]["z_offset"]|float %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set Z_POS = printer.toolhead.position.z|float %}
	{% set Z_DIFFERENCE = PASS - ZP_CAL|float %}
	{% set NEW_CURRENT_Z = (Z_POS - Z_DIFFERENCE) %}
	M118 Current Probing is: {PASS}
	M118 Z-Probe Offset is: {ZP_CAL}
	M118 Difference: {Z_DIFFERENCE}
	M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
	SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
	G4 P100
	M118 Moving nozzle to newly adjusted Z15.
	G0 Z15 F500
	G4 P1000
	{% if MeshToApply != "NONE" %}
	{% if MeshToApply == "INSITU" %}
	M118 Performing INSITU Mesh.
	BED_MESH_CALIBRATE_ORIGINAL
	BED_MESH_PROFILE SAVE=INSITU
	{% elif MeshToApply == "ADAPTIVE" %}
	M118 Performing ADAPTIVE Mesh.
	_ADAPTIVE_BED_MESH
	{% else %}
	M118 Applied {MeshToApply} Mesh.
	BED_MESH_PROFILE LOAD={MeshToApply}
	{% endif %}
	{% endif %}
	QUERY_PROBE
	{% if not printer.probe.last_query %}
	M118 Stowing Euclid Probe.
	_PROBE_STOW
	{% else %}
	M118 ?!Probe is not attached.
	{% endif %}

[gcode_macro FILAMENT_LOAD]
description = Loads filament
gcode = 
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{% if printer.idle_timeout.state == "Printing" and printer.pause_resume.is_paused %}
	SAVE_GCODE_STATE NAME=HLF_state
	M83
	G0 X{X_MID} Y20 F4000
	G0 E50 F400
	G0 E50 F400
	G0 E50 F200
	G1 E-0.5 F1800
	G92 E0
	M400
	RESTORE_GCODE_STATE NAME=HLF_state
	{% else %}
	{action_respond_info("Pause print first.")}
	{% endif %}
	{% else %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	M117 Performing required homing.
	G28
	{% endif %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set TEMP = params.TEMP|default(defaultTN)|float %}
	M117 Heating nozzle to LOAD filamnet.
	G90
	G0 X{X_MID} Y20 Z90 F4000
	M109 S{TEMP}
	M83
	G0 E50 F400
	G0 E50 F400
	G0 E50 F200
	G1 E-0.5 F1800
	G92 E0
	M400
	PARK_UpperRight
	
	TURN_OFF_HEATERS
	M117 Finished filament load.
	{% endif %}

[gcode_macro FILAMENT_UNLOAD]
description = UNloads filament
gcode = 
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{% if printer.idle_timeout.state == "Printing" and printer.pause_resume.is_paused %}
	SAVE_GCODE_STATE NAME=HUF_state
	M83
	G0 X{X_MID} Y20 F4000
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G92 E0
	M400
	RESTORE_GCODE_STATE NAME=HUF_state
	{% else %}
	{action_respond_info("Pause print first.")}
	{% endif %}
	{% else %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	M117 Performing required homing.
	G28
	{% endif %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set TEMP = params.TEMP|default(defaultTN)|float %}
	M117 Heating nozzle to UNLOAD filamnet.
	G90
	G0 X{X_MID} Y20 Z90 F4000
	M109 S{TEMP}
	M83
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G92 E0
	M400
	PARK_UpperRight
	
	TURN_OFF_HEATERS
	M117 Finished filament unload.
	{% endif %}

[gcode_macro PARK_UpperRight]
description = Parks the toolhead in the upper-right position
gcode = 
	{% set Z_MAX = printer.configfile.config["stepper_z"]["position_max"]|float -1 %}
	{% set X_MAX = printer.configfile.config["stepper_x"]["position_max"]|float -1 %}
	{% set Z_POS = printer.toolhead.position.z + 10 %}
	{% set defaultParkHeight = printer["gcode_macro globalvariables"].parkheightpercentage|float %}
	{% set ParkHeight = params.PARK_HEIGHT_PERCENT|default(defaultParkHeight)|float %}
	{% if ParkHeight < 0.2  %}
	{% set ParkHeight = 0.2 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCORNER_state
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	G0 X{X_MAX} Y20 Z{ [(Z_MAX*ParkHeight), [Z_POS, Z_MAX]|min]|max } F4000
	RESTORE_GCODE_STATE NAME=PARKCORNER_state

[gcode_macro PARK_Center]
description = Parks the toolhead in the center position
gcode = 
	{% set Z = params.Z|default(40)|float %}
	SAVE_GCODE_STATE NAME=PARK_Center_state
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	G0 X{X_MID} Y{Y_MID} Z{Z} F4000
	RESTORE_GCODE_STATE NAME=PARK_Center_state

[delayed_gcode prerun]
initial_duration = 1
gcode = 
	{% set z_offset = printer.configfile.config["probe"]["z_offset"]|float %}
	{% set nozzle_diameter = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
	{% set pressure_advance = printer.configfile.config["extruder"]["pressure_advance"]|float %}
	{% set pressure_advance_smooth_time = printer.configfile.config["extruder"]["pressure_advance_smooth_time"]|float %}
	{% set mesh = printer["gcode_macro globalvariables"].meshtoapply %}
	
	QUERY_PROBE
	M117 Printer online.
	{% for s in range(0, 30) %}
	SET_LED LED=nozzle INDEX=1 RED=1 GREEN=0 BLUE=1
	SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=.5 BLUE=.5
	G4 P100
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=1
	G4 P50
	{% endfor %}
	M118 NOTE --> probe: TRIGGERED = Euclid probe NOT attached.
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].nplimitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].nplimitdecel|float}
	M118 Z-Offset is set at {z_offset}mm.
	M118 Nozzle diameter is set at {nozzle_diameter}mm.
	M118 Pressure Advance is set at {pressure_advance}.
	M118 Pressure advance Smooth Time is set at {pressure_advance_smooth_time}.
	M118 Mesh profile is {mesh}
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2

[gcode_macro PRINT_START]
description = Performs all needed moves prior to printing
gcode = 
	CLEAR_PAUSE
	BED_MESH_CLEAR
	M220 S100
	M221 S100
	SET_LED LED=nozzle RED=.2 GREEN=.2 BLUE=1
	{% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
	_COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set defaultWN = printer["gcode_macro globalvariables"].defaultwarmnozzle|float %}
	{% set defaultRN = printer["gcode_macro globalvariables"].defaultreadynozzle|float %}
	{% set defaultSOAK = printer["gcode_macro globalvariables"].preprintsoakminutes|float %}
	{% set defaultENCLOSURE = printer["gcode_macro globalvariables"].defaultenclosure|float %}
	{% set purgeRetract = printer["gcode_macro globalvariables"].purgeretract|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=ready VALUE={params.EXTRUDER_READY|default(defaultRN)|float}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=temp VALUE={params.EXTRUDER_TEMP|default(defaultTN)|float}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=filazcomp VALUE={params.FILAMENT_ZCOMP|default(0.00)|float}
	M118 gCode file passed filament offset of {params.FILAMENT_ZCOMP|default(0.00)|float}mm.
	
	{% set ENCLOSURE_TEMP = params.ENCLOSURE_TEMP|default(defaultENCLOSURE)|float %}
	{% set SOAK = params.SOAK|default(defaultSOAK) %}
	M118 gCode file passed the following to PRINT_START:
	M118 { rawparams }
	
	
	M140 S{BED_TEMP}
	M104 S{defaultWN}
	M141 S{ENCLOSURE_TEMP}
	G90
	G21
	M83
	G92 E0.0
	
	SET_GCODE_OFFSET Z=0.0
	M117 Performing initial homing.
	{% if printer["gcode_macro globalvariables"].qglbeforesoakprint|default() == true %}
	G32
	
	PARK_Center
	{% else %}
	G28
	
	{% endif %}
	M117 Bringing bed to temperature.
	SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
	M190 S{BED_TEMP}
	_WAIT_Start MINUTES={SOAK}

[gcode_macro _PRINT_START2]
description = Part 2 - Performs all needed moves prior to printing
gcode = 
	RESUME_BASE
	{% set EXTRUDER_READY = printer["gcode_macro _WAIT_Variable"].ready|int %}
	{% set EXTRUDER_TEMP = printer["gcode_macro _WAIT_Variable"].temp|int %}
	SET_LED LED=nozzle RED=.5 GREEN=0 BLUE=.5
	M117 Performing hot level.
	CURRENT_HIGH
	M400
	M104 S{EXTRUDER_READY}
	G3201
	M104 S{EXTRUDER_TEMP}
	G1 X0 Y20 F4000
	G1 Z1.5
	M117 Bringing nozzle to temperature.
	SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
	M109 S{EXTRUDER_TEMP}
	SET_LED LED=nozzle RED=1 GREEN=0 BLUE=0
	_FILAMENT_READY
	M117 Commencing print.
	M118 Commencing print.
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=.5

[gcode_macro _FILAMENT_READY]
description = Performs filament specific purgeline and readies for print
gcode = 
	{% set Z_POS = printer.toolhead.position.z|float %}
	{% set FILAMENT_ZCOMP = printer["gcode_macro _WAIT_Variable"].filazcomp|float %}
	{% set NEW_CURRENT_Z = (Z_POS - FILAMENT_ZCOMP|float) %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set Object_min_x = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].obj_min_x|float %}
	{% set Object_min_y = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].obj_min_y|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set NZLD = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
	{% set purgeRetract = printer["gcode_macro globalvariables"].purgeretract|float %}
	
	{% if FILAMENT_ZCOMP > 0.2 %}
	M118 FILAMENT_ZCOMP Offset > 0.2 - Ignoring FILAMENT_ZCOMP.
	{% elif FILAMENT_ZCOMP == 0 %}
	M118 FILAMENT_ZCOMP not set - Ignoring FILAMENT_ZCOMP.
	{% else %}
	M118 FILAMENT_ZCOMP Offset is: {FILAMENT_ZCOMP}
	M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
	SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
	G4 P1000
	M400
	{% endif %}
	
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].limitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].limitdecel|float}
	
	
	G1 X0 Y19.8 Z0.3 F1500.0
	G1 E{(12.5 * NZLD)} F3600
	M400
	G1 X0 Y0 Z0.3 F1500.0
	G1 X130 Y0.0 Z0.3 F1500.0 E{(37.5 * NZLD)}
	G1 X130 Y0.3 Z0.3 F5000.0
	G1 X010 Y0.3 Z0.3 F1500.0 E{(75.0 * NZLD)}
	M400
	G92 E0
	
	G1 E-{purgeRetract} F3000
	G1 Z1.0 F3000
	{% if MeshToApply == "ADAPTIVE" %}
	G0 X{Object_min_x} Y{Object_min_y} F8000
	{% else %}
	G0 X{X_MID} Y{Y_MID} F8000
	{% endif %}

[gcode_macro PRINT_END]
description = Performs all needed actions upon completion of printing
gcode = 
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].nplimitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].nplimitdecel|float}
	{% set EndRetract = printer["gcode_macro globalvariables"].endretract|float %}
	G91
	G0 Z5 F1000
	G90
	G92 E0
	G1 E-{EndRetract} F3600
	M400
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	M400
	TURN_OFF_HEATERS
	CURRENT_NORMAL
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintcool|float}
	PARK_UpperRight
	M18 X Y E
	M107
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintparkcool|float}
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	M117 Finished printing, check nozzle clear.
	M118 Finished printing, check nozzle clear.

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	{% set x = params.X|default(0) %}
	{% set y = params.Y|default(20) %}
	{% set z = params.Z|default(10)|float %}
	{% set e = params.E|default(1) %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% set lift_z = z|abs %}
	{% if act_z < (max_z - lift_z) %}
	{% set z_safe = lift_z %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	PAUSE_BASE
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E-{e} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe}
	G90
	G1 X{x} Y{y} F4000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	{% set e = params.E|default(1) %}
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E{e} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].nplimitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].nplimitdecel|float}
	{% set EndRetract = printer["gcode_macro globalvariables"].endretract|float %}
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	M400
	G92 E0
	G1 E-{EndRetract} F3600
	CLEAR_PAUSE
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE
	CURRENT_NORMAL
	M106 S250
	G90
	PARK_UpperRight
	M18 X Y E
	M107
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintparkcool|float}
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	M117 Cancelled print, check nozzle clear.
	M118 Cancelled print, check nozzle clear.

[gcode_macro TUNE_HOTMESH]
description = Performs a heat-soaked bed-mesh
gcode = 
	CLEAR_PAUSE
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set MeshName = params.NAME|default(MeshToApply) %}
	M118 Will be saving as {MeshName}
	{% if MeshName == "INSITU" or MeshToApply == "NONE" or MeshToApply == "ADAPTIVE" %}
	{action_respond_info("Mesh requires a proper name, specify via cli or change printer.cfg MeshToApply definition.")}
	{% else %}
	{% set defaultWN = printer["gcode_macro globalvariables"].defaultwarmnozzle|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set defaultSOAK = printer["gcode_macro globalvariables"].hotmeshsoakminutes|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	{% set SOAK = params.SOAK|default(defaultSOAK)|float %}
	SET_LED LED=nozzle RED=.2 GREEN=.2 BLUE=1
	
	M140 S{BED_TEMP}
	M104 S{defaultWN}
	G90
	
	SET_GCODE_OFFSET Z=0.0
	M117 Performing initial homing.
	{% if printer["gcode_macro globalvariables"].qglbeforesoakmesh|default() == true %}
	G32
	
	PARK_Center
	{% else %}
	G28
	
	{% endif %}
	M117 Bringing bed to temperature.
	M190 S{BED_TEMP}
	_HEAT_WAIT MINUTES={SOAK} MSG="Pre BED_MESH_CALIBRATE Soaking..."
	SET_LED LED=nozzle RED=.5 GREEN=0 BLUE=.5
	M117 Performing hot level.
	CURRENT_HIGH
	M400
	M401
	QUAD_GANTRY_LEVEL_ORIGINAL
	G28 GOT_PROBE:TRUE KEEP_PROBE:TRUE
	M117 Performing heated bed mesh calibration.
	BED_MESH_PROFILE REMOVE={MeshName}
	BED_MESH_CALIBRATE_ORIGINAL
	BED_MESH_PROFILE SAVE={MeshName}
	BED_MESH_OUTPUT PGP=1
	M118 Bed mesh calibration completed.
	TURN_OFF_HEATERS
	CURRENT_NORMAL
	M402
	PARK_UpperRight
	M18 X Y E
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	M117 Finished mesh, saved as {MeshName}.
	SAVE_CONFIG
	{% endif %}
	{% endif %}

[gcode_macro TUNE_PA_CAL]
description = Prints a Pressure Advance panel to help determine correct PA
gcode = 
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set BED = params.BED|default(defaultTB)|float %}
	{% set EXTRUDER = params.EXTRUDER|default(defaultTN)|float %}
	{% set PA_START = params.PA_START|default(0.0)|float %}
	{% set PA_STEP = params.PA_STEP|default(0.005)|float %}
	{% set NZL_CFG = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
	{% set NZL = params.NZL|default(NZL_CFG)|float %}
	{% set E20 = (0.1147475 * NZL) * 20|float %}
	{% set E40 = (0.1147475 * NZL) * 40|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	PRINT_START BED_TEMP={BED} EXTRUDER_TEMP={EXTRUDER}
	
	M220 S100
	M221 S100
	G21
	G90
	M83
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].limitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].limitdecel|float}
	G92 E0
	M106 S0
	G1 X{(X_MID-40)} Y{(Y_MID-65)} F30000
	G1 Z0.25 F300
	G1 E0.75 F1800
	G1 X{(X_MID-20)} Y{(Y_MID-65)} E{E20} F300
	G1 X{(X_MID+20)} Y{(Y_MID-65)} E{E40} F9000
	G1 X{(X_MID+40)} Y{(Y_MID-65)} E{E20} F300
	G1 E-0.75 F1800
	G1 Z1 F300
	{% for i in range(0, 20) %}
	SET_PRESSURE_ADVANCE ADVANCE={PA_START + (i * PA_STEP)}
	M117 Testing Pressure Advance at: {PA_START + (i * PA_STEP)}
	G1 X{(X_MID-40)} Y{(Y_MID-35)+(5*i)} F30000
	G1 Z0.25 F300
	G1 E0.75 F1800
	G1 X{(X_MID-20)} Y{(Y_MID-35)+(5*i)} E{E20} F300
	G1 X{(X_MID+20)} Y{(Y_MID-35)+(5*i)} E{E40} F9000
	G1 X{(X_MID+40)} Y{(Y_MID-35)+(5*i)} E{E20} F300
	G1 E-0.75 F1800
	G1 Z1 F300
	{% endfor %}
	M117 Find best line and multiply it by ({PA_START} + (line * {PA_STEP}) ) to find your PA setting.
	M118 Find best line and multiply it by ({PA_START} + (line * {PA_STEP}) ) to find your PA setting.
	PRINT_END
	{% endif %}

[gcode_macro TUNE_PID_BED]
description = Performs bed PID tune
gcode = 
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	{% set FAN_SPEED = params.FAN_SPEED|default(64)|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=0
	G90
	M117 Performing initial homing.
	G32
	G1 Z5 Y{Y_MID} X{X_MID} F4000
	M106 S{FAN_SPEED}
	M117 Starting PID calibration.
	PID_CALIBRATE HEATER=heater_bed TARGET={BED_TEMP}
	M117 Finished PID calibration.
	TURN_OFF_HEATERS
	CURRENT_NORMAL
	PARK_UpperRight
	M18 X Y E
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	_COOL_WAIT MINUTES=1
	SAVE_CONFIG
	{% endif %}

[gcode_macro TUNE_PID_NZL]
description = Performs nozzle PID tune
gcode = 
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set FAN_SPEED = params.FAN_SPEED|default(64)|float %}
	{% set SOAK_MINUTES = params.SOAK_MINUTES|default(12)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	{% set NZL_TEMP = params.NZL_TEMP|default(defaultTN)|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=0
	G90
	M117 Performing initial homing.
	G32
	G1 Z5 Y{Y_MID} X{X_MID} F4000
	M117 Bringing bed to temperature.
	M190 S{BED_TEMP}
	_HEAT_WAIT MINUTES={SOAK_MINUTES} MSG="Pre NZL_PID Soaking..."
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=0
	M106 S{FAN_SPEED}
	M117 Starting PID calibration.
	PID_CALIBRATE HEATER=extruder TARGET={NZL_TEMP}
	M117 Finished PID calibration.
	TURN_OFF_HEATERS
	G90
	PARK_UpperRight
	M18 X Y E
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintparkcool|float}
	SAVE_CONFIG
	{% endif %}

[gcode_macro _HEAT_WAIT]
description = Heating cycle waiting routine
gcode = 
	{% set MINUTES = params.MINUTES|default(10)|int %}
	{% set MSG = params.MSG|default("Warming...")|string %}
	{% for i in range(0, MINUTES) %}
	M117 {MSG} {MINUTES-i} minute remaining.
	{% for s in range(0, 60) %}
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
	G4 P500
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=0 BLUE=0
	G4 P500
	{% endfor %}
	{% endfor %}

[gcode_macro _COOL_WAIT]
description = Cooling cycle waiting routine
gcode = 
	M106 S250
	{% set MINUTES = params.MINUTES|default(1)|int %}
	{% set MSG = params.MSG|default("Cooling...")|string %}
	{% for i in range(0, MINUTES) %}
	M117 {MSG} {MINUTES-i} minute remaining.
	{% for s in range(0, 60) %}
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
	G4 P500
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=0
	G4 P500
	{% endfor %}
	{% endfor %}
	M107

[gcode_macro _WAIT_Variable]
variable_count = 300
variable_duration = 2
variable_waiting = False
variable_ready = 200
variable_temp = 250
variable_filazcomp = 0
gcode = 

[delayed_gcode WAIT_Delayed]
gcode = 
	{% set count = printer["gcode_macro _WAIT_Variable"].count|int %}
	{% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
	M117 Pre-Print Heatsoaking... {((duration * count) / 60)|round(1)} minutes left.
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count-1}
	{% if count > 0 %} _WAIT_Loop  {% endif %}
	{% if count == 0 %}
	
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=False
	_PRINT_START2
	{% endif %}

[gcode_macro _WAIT_Loop]
gcode = 
	{% set count = printer["gcode_macro _WAIT_Variable"].count|int %}
	{% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
	UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration}
	{% if  count % 2 == 0 %}
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
	{% else %}
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=0 BLUE=0
	{% endif %}

[gcode_macro _WAIT_Start]
gcode = 
	{% set MINUTES = params.MINUTES|default(15)|int %}
	{% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
	{% set count = (MINUTES * 60) / duration %}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=True
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count}
	UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration}
	PAUSE_BASE

[gcode_macro WAIT_Quit]
gcode = 
	{% if printer["gcode_macro _WAIT_Variable"].waiting %}
	M118 STOPPING LOOP, SETTING COUNT TO 0
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE=0
	UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION=1
	{% else %}
	M118 Not in waiting state, nothing to do.
	{% endif %}

[firmware_retraction]
retract_length = 0.5
retract_speed = 30
unretract_extra_length = 0
unretract_speed = 30

[gcode_macro globalvariables]
variable_limitaccel = 3501
variable_limitdecel = 1751
variable_defaulttempnozzle = 235
variable_defaultreadynozzle = 210
variable_defaultwarmnozzle = 160
variable_defaulttempbed = 110
variable_defaultenclosure = 40
variable_meshtoapply = "ADAPTIVE"
variable_qglbeforesoakmesh = True
variable_qglbeforesoakprint = True
variable_hotmeshsoakminutes = 20
variable_preprintsoakminutes = 15
variable_insitumeshsoakminutes = 01
variable_postprintcool = 1
variable_postprintparkcool = 2
variable_purgeretract = 0.1
variable_endretract = 2.0
variable_nplimitaccel = 3500
variable_nplimitdecel = 1750
variable_printcurrentxy = 1.1
variable_printcurrentz = 0.8
variable_parkheightpercentage = 0.50
variable_euclidx = 0
variable_euclidy = 355
variable_euclidswipex = 50
variable_euclidcleary = 325
variable_zprobespeed = 5.0
variable_zprobesamples = 7
variable_zprobetolerance = 0.050
variable_zproberetract = 1.5
variable_adxlsoakminutes = 30
gcode = 
	M117 Happy Printing!

[input_shaper]
shaper_type_x = 3hump_ei
shaper_freq_x = 83.8
shaper_type_y = mzv
shaper_freq_y = 37.2

[bed_mesh default]
version = 1
points = 
	0.053750, 0.055000, 0.023750, 0.087500, 0.033750, 0.060000, 0.055000
	0.025000, 0.013750, 0.008750, 0.020000, 0.020000, 0.037500, 0.040000
	0.000000, 0.003750, -0.053750, -0.003750, -0.041250, 0.021250, 0.007500
	0.007500, -0.008750, -0.022500, 0.000000, -0.005000, 0.007500, 0.007500
	0.008750, 0.007500, -0.046250, -0.007500, -0.040000, 0.017500, 0.003750
	0.043750, 0.022500, 0.006250, 0.002500, 0.011250, 0.032500, 0.031250
	0.057500, 0.041250, 0.025000, 0.023750, 0.027500, 0.050000, 0.051250
tension = 0.2
min_x = 40.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 40.0
x_count = 7
max_y = 310.0
mesh_x_pps = 2
max_x = 310.0

[bed_mesh MESH110]
version = 1
points = 
	0.053750, 0.055000, 0.023750, 0.087500, 0.033750, 0.060000, 0.055000
	0.025000, 0.013750, 0.008750, 0.020000, 0.020000, 0.037500, 0.040000
	0.000000, 0.003750, -0.053750, -0.003750, -0.041250, 0.021250, 0.007500
	0.007500, -0.008750, -0.022500, 0.000000, -0.005000, 0.007500, 0.007500
	0.008750, 0.007500, -0.046250, -0.007500, -0.040000, 0.017500, 0.003750
	0.043750, 0.022500, 0.006250, 0.002500, 0.011250, 0.032500, 0.031250
	0.057500, 0.041250, 0.025000, 0.023750, 0.027500, 0.050000, 0.051250
tension = 0.2
min_x = 40.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 40.0
x_count = 7
max_y = 310.0
mesh_x_pps = 2
max_x = 310.0
=======================
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 141, in _read_config
    self.load_object(config, section_config.get_name(), None)
  File "/home/pi/klipper/klippy/klippy.py", line 130, in load_object
    self.objects[section] = init_func(config.getsection(section))
  File "/home/pi/klipper/klippy/extras/fan.py", line 121, in load_config
    return PrinterFan(config)
  File "/home/pi/klipper/klippy/extras/fan.py", line 105, in __init__
    self.fan = Fan(config)
  File "/home/pi/klipper/klippy/extras/fan.py", line 27, in __init__
    self.mcu_fan = ppins.setup_pin('pwm', config.get('pin'))
  File "/home/pi/klipper/klippy/pins.py", line 117, in setup_pin
    pin_params = self.lookup_pin(pin_desc, can_invert, can_pullup)
  File "/home/pi/klipper/klippy/pins.py", line 98, in lookup_pin
    pin_params = self.parse_pin(pin_desc, can_invert, can_pullup)
  File "/home/pi/klipper/klippy/pins.py", line 83, in parse_pin
    raise error("Unknown pin chip name '%s'" % (chip_name,))
pins.error: Unknown pin chip name 'rpi'
webhooks client 3044545128: New connection
webhooks client 3044545128: Client info {'program': 'Moonraker', 'version': 'v0.8.0-23-g18f5ff4'}
Unable to issue reset command on MCU 'mcu'
Unable to issue reset command on MCU 'sht36v2'
webhooks client 3044545128: Disconnected
Restarting printer
Start printer at Thu Mar  2 22:50:27 2023 (1677797427.6 1499.9)
===== Config file =====
[mcu rpi]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_39003000105053424E363620-if00
restart_method = command

[mcu sht36v2]
canbus_uuid = 3388e21717f3

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.70
min_temp = 0
max_temp = 120
control = pid
pid_kp = 58.437
pid_ki = 2.347
pid_kd = 363.769
pwm_cycle_time = 0.0166

[extruder]
step_pin = sht36v2:PB4
dir_pin = sht36v2:PB3
enable_pin = !sht36v2:PA15
rotation_distance = 22.6789511
gear_ratio = 50:17
microsteps = 32
full_steps_per_rotation = 200
filament_diameter = 1.75
heater_pin = sht36v2:PA8
sensor_type = 104NT-4-RO25H42G
sensor_pin = sht36v2:PA3
min_temp = 10
max_temp = 270
max_power = 1.0
min_extrude_temp = 170
control = pid
pid_kp = 26.213
pid_ki = 1.304
pid_kd = 131.721
nozzle_diameter = 0.4
pressure_advance = 0.055
pressure_advance_smooth_time = 0.030

[tmc2209 extruder]
uart_pin = sht36v2:PB5
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan]
pin = rpi:gpio18
max_power = 1
cycle_time = 0.002
hardware_pwm = false
shutdown_speed = 0

[heater_fan hotend_fan]
pin = sht36v2:PB10
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = .7

[heater_fan exhaust_fan]
pin = PD15
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0
heater = heater_bed
heater_temp = 60
fan_speed = 1.0

[fan_generic fan]
pin = sht36v2:PB11

[multi_pin controller_fan_pins]
pins = PD14, PD13

[controller_fan controller_fan]
pin = controller_fan_pins
kick_start_time = 0.5
heater = heater_bed, extruder
stepper = X, Y, Z, Z1, Z2, Z3
fan_speed = 0.6

[temperature_sensor Octopus]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor RaspberryPi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor Enclosure]
sensor_type = ATC Semitec 104GT-2
sensor_pin = sht36v2:PA4
min_temp = -50
max_temp = 350

[temperature_sensor Fly-SHT]
sensor_type = temperature_mcu
sensor_mcu = sht36v2

[printer]
kinematics = corexy
max_velocity = 700
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 10.0

[virtual_sdcard]
path = ~/gcode_files

[display_status]

[pause_resume]

[respond]
default_type = echo

[idle_timeout]
timeout = 1800

[quad_gantry_level]
gantry_corners = 
	
	
	
	
	
	
	-80,-22
	390,408
points = 
	
	
	
	
	
	
	
	
	
	
	25,0
	25,280
	310,280
	310,0
speed = 75
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 15

[bed_mesh]
speed = 50
horizontal_move_z = 10
mesh_min = 40, 40
mesh_max = 270, 290
probe_count = 7, 7
mesh_pps = 2, 2
algorithm = bicubic
relative_reference_index = 24

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = !PG6
position_min = 0
position_endstop = 310
position_max = 310
homing_speed = 60
second_homing_speed = 10
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = false
run_current = 0.4
sense_resistor = 0.105
stealthchop_threshold = 0

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = !PG9
position_min = 0
position_endstop = 330
position_max = 330
homing_speed = 60
second_homing_speed = 10
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = false
run_current = 0.4
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PF11
dir_pin = PG3
enable_pin = !PG5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32
endstop_pin = probe:z_virtual_endstop
position_max = 250
position_min = -5
homing_speed = 4
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = PF10
enable_pin = !PG2
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[gcode_macro _ADAPTIVE_MESH_VARIABLES]
variable_ready = False
variable_do_mesh = False
variable_do_nominal = False
variable_mesh_min = 0,0
variable_mesh_max = 0,0
variable_mesh_center = 0,0
variable_mesh_xcenter = 0
variable_mesh_ycenter = 0
variable_obj_min_y = 0
variable_obj_min_x = 0
variable_probe_count = 0,0
variable_rri = 0
variable_algo = "bicubic"
gcode = 

[gcode_macro _COMPUTE_MESH_PARAMETERS]
description = Compute the mesh parameters and store them for later use
gcode = 
	
	{% set xMinConf, yMinConf = printer["configfile"].config["bed_mesh"]["mesh_min"].split(',')|map('trim')|map('int') %}
	{% set xMaxConf, yMaxConf = printer["configfile"].config["bed_mesh"]["mesh_max"].split(',')|map('trim')|map('int') %}
	{% set xProbeCntConf, yProbeCntConf = printer["configfile"].config["bed_mesh"]["probe_count"].split(',')|map('trim')|map('int') %}
	{% set algo = printer["configfile"].config["bed_mesh"]["algorithm"]|lower %}
	{% set xMeshPPS, yMeshPPS = (printer["configfile"].config["bed_mesh"]["mesh_pps"] | default('2,2')).split(',')|map('trim')|map('int') %}
	
	
	
	{% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
	
	
	{% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
	{% set margin = params.MARGIN|default(5)|int %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=obj_min_y VALUE={yMinSpec}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=obj_min_x VALUE={xMinSpec}
	
	
	
	
	{% set xMin = [xMinConf, (xMinSpec - margin)]|max %}
	{% set xMax = [xMaxConf, (xMaxSpec + margin)]|min %}
	{% set yMin = [yMinConf, (yMinSpec - margin)]|max %}
	{% set yMax = [yMaxConf, (yMaxSpec + margin)]|min %}
	
	
	
	
	{% set xProbeCnt = ((xMax - xMin) * xProbeCntConf / (xMaxConf - xMinConf))|round(0, 'ceil')|int %}
	{% set yProbeCnt = ((yMax - yMin) * yProbeCntConf / (yMaxConf - yMinConf))|round(0, 'ceil')|int %}
	
	
	
	
	
	
	
	
	{% if xProbeCnt < 3 and yProbeCnt < 3 %}
	RESPOND MSG="Computed mesh parameters: none, bed mesh not needed"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={False}
	
	{% set xCenter = xMin + ((xMax - xMin) / 2) %}
	{% set yCenter = yMin + ((yMax - yMin) / 2) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_xcenter VALUE={xCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_ycenter VALUE={yCenter}
	M118 ADAPTIVE: X_Center: {xCenter}, Y_Center: {yCenter}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	{% else %}
	{% set xProbeCnt = [3, xProbeCnt]|max %}
	{% set yProbeCnt = [3, yProbeCnt]|max %}
	
	
	
	{% if xProbeCnt % 2 == 0 %}
	{% set xProbeCnt = xProbeCnt + 1 %}
	{% endif %}
	{% if yProbeCnt % 2 == 0 %}
	{% set yProbeCnt = yProbeCnt + 1 %}
	{% endif %}
	
	
	{% if xMeshPPS != 0 or yMeshPPS != 0 %}
	{% set probeCntMin = [xProbeCnt, yProbeCnt]|min %}
	{% set probeCntMax = [xProbeCnt, yProbeCnt]|max %}
	{% if algo == "lagrange" and probeCntMax > 6 %}
	
	{% set algo = "bicubic" %}
	{% endif %}
	{% if algo == "bicubic" and probeCntMin < 4 %}
	{% if probeCntMax > 6 %}
	
	{% if xProbeCnt > yProbeCnt %}
	{% set yProbeCnt = 5 %}
	{% else %}
	{% set xProbeCnt = 5 %}
	{% endif %}
	{% else %}
	
	{% set algo = "lagrange" %}
	{% endif %}
	{% endif %}
	{% endif %}
	
	
	{% set rRefIndex = (((xProbeCnt * yProbeCnt) - 1) / 2)|int %}
	{% set xCenter = xMin + ((xMax - xMin) / 2) %}
	{% set yCenter = yMin + ((yMax - yMin) / 2) %}
	
	
	{% set mesh_min = "%d,%d"|format(xMin, yMin) %}
	{% set mesh_max = "%d,%d"|format(xMax, yMax) %}
	{% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} MESH_CENTER={mesh_center} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_xcenter VALUE={xCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_ycenter VALUE={yCenter}
	M118 ADAPTIVE: X_Center: {xCenter}, Y_Center: {yCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=rri VALUE={rRefIndex}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
	{% endif %}
	{% else %}
	RESPOND MSG="Computed mesh parameters: none, going for a nominal bed mesh"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={True}
	
	{% set xCenter = xMinConf + ((xMaxConf - xMinConf) / 2) %}
	{% set yCenter = yMinConf + ((yMaxConf - yMinConf) / 2) %}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={True}

[gcode_macro _ADAPTIVE_BED_MESH]
description = Perform a bed mesh, but only where and when it's needed
gcode = 
	{% set ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home printer first!") }
	{% endif %}
	
	
	{% if ready %}
	_DO_ADAPTIVE_MESH
	
	
	
	{% else %}
	RESPOND MSG="Adaptive bed mesh: parameters not computed, automatically calling the COMPUTE_MESH_PARAMETERS macro prior to the mesh"
	_COMPUTE_MESH_PARAMETERS {rawparams}
	M400
	_DO_ADAPTIVE_MESH
	{% endif %}

[gcode_macro _DO_ADAPTIVE_MESH]
gcode = 
	
	{% set do_mesh = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_mesh %}
	{% set do_nominal = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_nominal %}
	{% set mesh_min = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_min %}
	{% set mesh_max = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_max %}
	{% set probe_count = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].probe_count %}
	{% set rRefIndex = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].rri %}
	{% set algo = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].algo %}
	
	
	
	
	{% if do_mesh %}
	
	{% if do_nominal %}
	RESPOND MSG="Adaptive bed mesh: nominal bed mesh"
	BED_MESH_CALIBRATE_ORIGINAL
	{% else %}
	RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
	BED_MESH_CALIBRATE_ORIGINAL MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}
	{% endif %}
	{% else %}
	RESPOND MSG="Adaptive bed mesh: no mesh to be done"
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={False}

[gcode_macro CURRENT_HIGH]
description = Raises stepper current for printing routine
gcode = 
	M117 Increased motor currents.
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro globalvariables"].printcurrentxy|float}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro globalvariables"].printcurrentxy|float}
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}

[gcode_macro CURRENT_NORMAL]
description = Lowers stepper current for NON-printing routines
gcode = 
	M117 Decreased motor currents.
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={ printer.configfile.config["tmc2209 stepper_x"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={ printer.configfile.config["tmc2209 stepper_y"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={ printer.configfile.config["tmc2209 stepper_z"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={ printer.configfile.config["tmc2209 stepper_z1"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={ printer.configfile.config["tmc2209 stepper_z2"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={ printer.configfile.config["tmc2209 stepper_z3"]["run_current"] }

[force_move]
enable_force_move = true

[probe]
pin = PG11sht36v2:PA1
x_offset = -21.2
y_offset = 37.5
speed = 3.0
lift_speed = 10.0
samples = 5
samples_result = median
sample_retract_dist = 2.0
samples_tolerance = 0.010
samples_tolerance_retries = 5
z_offset = 8.60

[homing_override]
axes = z
gcode = 
	{% set KEEP_PROBE = params.KEEP_PROBE|default(FALSE) %}
	{% set GOT_PROBE = params.GOT_PROBE|default(FALSE) %}
	{% set ONLY_Z = params.ONLY_Z|default(FALSE) %}
	{% set Z_POS = printer.toolhead.position.z %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set X_PROBEOFFSET = printer.configfile.config["probe"]["x_offset"]|float %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set Y_PROBEOFFSET = printer.configfile.config["probe"]["y_offset"]|float %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	SET_KINEMATIC_POSITION Z=0
	G0 Z15 F3600
	{% else %}
	{% if Z_POS < 15 %}
	G90
	G0 Z15
	{% else %}
	G91
	G0 Z1 F3600
	G90
	{% endif %}
	{% endif %}
	G90
	M118 Currently homed: { printer.toolhead.homed_axes }
	{% if printer.toolhead.homed_axes == "xyz" and ONLY_Z %}
	M118 Re-Homing skipped on X & Y.
	{% else %}
	G28 X Y
	{% endif %}
	{% if GOT_PROBE == FALSE %}
	M401
	{% endif %}
	G0 X{(X_MID - X_PROBEOFFSET)} Y{(Y_MID - Y_PROBEOFFSET)} F4000
	G28 Z
	G0 Z15 F3600
	{% if KEEP_PROBE == FALSE %}
	M402
	{% endif %}

[gcode_macro M401]
description = Deploys the Euclid probe
gcode = 
	QUERY_PROBE
	{% set Z_POS = printer.toolhead.position.z %}
	{% if printer.probe.last_query %}
	M118 Fetching Euclid Probe.
	{% if printer.toolhead.homed_axes != "xyz" %}
	SET_KINEMATIC_POSITION Z=0
	G0 Z15 F3600
	G28X
	G28Y
	{% endif %}
	G90
	{% if Z_POS < 15 %} G0 Z15 {% endif %}
	_PROBE_DEPLOY
	{% else %}
	M118 ?!Attempted to Deploy probe but it is already attached.
	{% endif %}

[gcode_macro M402]
description = Stows the Euclid probe
gcode = 
	QUERY_PROBE
	{% set Z_POS = printer.toolhead.position.z %}
	{% if not printer.probe.last_query %}
	M118 Stowing Euclid Probe.
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	{% if Z_POS < 15 %} G0 Z15 {% endif %}
	_PROBE_STOW
	{% else %}
	M118 ?!Attempted to Stow probe but it is not attached.
	{% endif %}

[gcode_macro _PROBE_DEPLOY]
gcode = 
	G90
	G0 Y{printer["gcode_macro globalvariables"].euclidcleary|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidx|float} F4000
	G0 Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} F4000
	_error_if_probe_not_deployed

[gcode_macro _PROBE_STOW]
gcode = 
	G90
	G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} F4000
	G0 Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidx|float} F2000
	G0 Y{printer["gcode_macro globalvariables"].euclidcleary|float} F4000
	_error_if_probe_deployed

[gcode_macro _do_error_if_probe_deployed]
gcode = 
	{% if not printer.probe.last_query %}
	{action_raise_error("ERROR: Probe is still deployed, please remove and return to dock.")}
	{% else %}
	M118 Euclid probe has been stowed.
	{% endif %}

[gcode_macro _error_if_probe_deployed]
gcode = 
	G4 P300
	QUERY_PROBE
	_do_error_if_probe_deployed

[gcode_macro _do_error_if_probe_not_deployed]
gcode = 
	{% if printer.probe.last_query %}
	{action_raise_error("ERROR: Probe unsuccessfully deployed, please check printer.")}
	{% else %}
	M118 Euclid probe has been attached.
	{% endif %}

[gcode_macro _error_if_probe_not_deployed]
gcode = 
	G4 P300
	QUERY_PROBE
	_do_error_if_probe_not_deployed

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_ORIGINAL
description = Levels the four Z-axis gantry corners
gcode = 
	{% if printer.toolhead.homed_axes != "xyz" %}
	G28 KEEP_PROBE:TRUE
	{% endif %}
	M401
	QUAD_GANTRY_LEVEL_ORIGINAL
	M402

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIGINAL
description = Performs bed mesh
gcode = 
	QUERY_PROBE
	M401
	BED_MESH_CALIBRATE_ORIGINAL
	M402

[gcode_macro G32]
description = Clears bed-mesh and performs G28, QGL, G28
gcode = 
	BED_MESH_CLEAR
	G28 KEEP_PROBE:TRUE
	QUAD_GANTRY_LEVEL_ORIGINAL
	G28 GOT_PROBE:TRUE
	QUERY_PROBE

[gcode_macro G3201]
description = Clears bed-mesh and performs G28, QGL, G28-Z, Probes Center, and applies bed-mesh
gcode = 
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set X_MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_xcenter|float %}
	{% set Y_MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_ycenter|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set X_PROBEOFFSET = printer.configfile.config["probe"]["x_offset"]|float %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set Y_PROBEOFFSET = printer.configfile.config["probe"]["y_offset"]|float %}
	{% set ZSpeed = printer["gcode_macro globalvariables"].zprobespeed|float %}
	{% set ZSamples = printer["gcode_macro globalvariables"].zprobesamples|int %}
	{% set ZTolerance = printer["gcode_macro globalvariables"].zprobetolerance|float %}
	{% set ZRetract = printer["gcode_macro globalvariables"].zproberetract|float %}
	{% set S_Retries = printer.configfile.config["probe"]["samples_tolerance_retries"]|int %}
	BED_MESH_CLEAR
	G28 KEEP_PROBE:TRUE
	QUAD_GANTRY_LEVEL_ORIGINAL
	G0 Z15 F3600
	{% if MeshToApply == "ADAPTIVE" %}
	G0 X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} F4000
	M118 ADAPTIVE: Moving to X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} to probe Z0.
	{% else %}
	G0 X{(X_MID - X_PROBEOFFSET)} Y{(Y_MID - Y_PROBEOFFSET)} F4000
	M118 Moving to X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} to probe Z0.
	{% endif %}
	PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries={S_Retries} sample_retract_dist={ZRetract}
	_CHECK_PROBE3201

[gcode_macro _CHECK_PROBE3201]
gcode = 
	{% set PASS = printer.probe.last_z_result %}
	{% set ZP_CAL = printer.configfile.config["probe"]["z_offset"]|float %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set Z_POS = printer.toolhead.position.z|float %}
	{% set Z_DIFFERENCE = PASS - ZP_CAL|float %}
	{% set NEW_CURRENT_Z = (Z_POS - Z_DIFFERENCE) %}
	M118 Current Probing is: {PASS}
	M118 Z-Probe Offset is: {ZP_CAL}
	M118 Difference: {Z_DIFFERENCE}
	M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
	SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
	G4 P100
	M118 Moving nozzle to newly adjusted Z15.
	G0 Z15 F500
	G4 P1000
	{% if MeshToApply != "NONE" %}
	{% if MeshToApply == "INSITU" %}
	M118 Performing INSITU Mesh.
	BED_MESH_CALIBRATE_ORIGINAL
	BED_MESH_PROFILE SAVE=INSITU
	{% elif MeshToApply == "ADAPTIVE" %}
	M118 Performing ADAPTIVE Mesh.
	_ADAPTIVE_BED_MESH
	{% else %}
	M118 Applied {MeshToApply} Mesh.
	BED_MESH_PROFILE LOAD={MeshToApply}
	{% endif %}
	{% endif %}
	QUERY_PROBE
	{% if not printer.probe.last_query %}
	M118 Stowing Euclid Probe.
	_PROBE_STOW
	{% else %}
	M118 ?!Probe is not attached.
	{% endif %}

[gcode_macro FILAMENT_LOAD]
description = Loads filament
gcode = 
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{% if printer.idle_timeout.state == "Printing" and printer.pause_resume.is_paused %}
	SAVE_GCODE_STATE NAME=HLF_state
	M83
	G0 X{X_MID} Y20 F4000
	G0 E50 F400
	G0 E50 F400
	G0 E50 F200
	G1 E-0.5 F1800
	G92 E0
	M400
	RESTORE_GCODE_STATE NAME=HLF_state
	{% else %}
	{action_respond_info("Pause print first.")}
	{% endif %}
	{% else %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	M117 Performing required homing.
	G28
	{% endif %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set TEMP = params.TEMP|default(defaultTN)|float %}
	M117 Heating nozzle to LOAD filamnet.
	G90
	G0 X{X_MID} Y20 Z90 F4000
	M109 S{TEMP}
	M83
	G0 E50 F400
	G0 E50 F400
	G0 E50 F200
	G1 E-0.5 F1800
	G92 E0
	M400
	PARK_UpperRight
	
	TURN_OFF_HEATERS
	M117 Finished filament load.
	{% endif %}

[gcode_macro FILAMENT_UNLOAD]
description = UNloads filament
gcode = 
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{% if printer.idle_timeout.state == "Printing" and printer.pause_resume.is_paused %}
	SAVE_GCODE_STATE NAME=HUF_state
	M83
	G0 X{X_MID} Y20 F4000
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G92 E0
	M400
	RESTORE_GCODE_STATE NAME=HUF_state
	{% else %}
	{action_respond_info("Pause print first.")}
	{% endif %}
	{% else %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	M117 Performing required homing.
	G28
	{% endif %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set TEMP = params.TEMP|default(defaultTN)|float %}
	M117 Heating nozzle to UNLOAD filamnet.
	G90
	G0 X{X_MID} Y20 Z90 F4000
	M109 S{TEMP}
	M83
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G92 E0
	M400
	PARK_UpperRight
	
	TURN_OFF_HEATERS
	M117 Finished filament unload.
	{% endif %}

[gcode_macro PARK_UpperRight]
description = Parks the toolhead in the upper-right position
gcode = 
	{% set Z_MAX = printer.configfile.config["stepper_z"]["position_max"]|float -1 %}
	{% set X_MAX = printer.configfile.config["stepper_x"]["position_max"]|float -1 %}
	{% set Z_POS = printer.toolhead.position.z + 10 %}
	{% set defaultParkHeight = printer["gcode_macro globalvariables"].parkheightpercentage|float %}
	{% set ParkHeight = params.PARK_HEIGHT_PERCENT|default(defaultParkHeight)|float %}
	{% if ParkHeight < 0.2  %}
	{% set ParkHeight = 0.2 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCORNER_state
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	G0 X{X_MAX} Y20 Z{ [(Z_MAX*ParkHeight), [Z_POS, Z_MAX]|min]|max } F4000
	RESTORE_GCODE_STATE NAME=PARKCORNER_state

[gcode_macro PARK_Center]
description = Parks the toolhead in the center position
gcode = 
	{% set Z = params.Z|default(40)|float %}
	SAVE_GCODE_STATE NAME=PARK_Center_state
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	G0 X{X_MID} Y{Y_MID} Z{Z} F4000
	RESTORE_GCODE_STATE NAME=PARK_Center_state

[delayed_gcode prerun]
initial_duration = 1
gcode = 
	{% set z_offset = printer.configfile.config["probe"]["z_offset"]|float %}
	{% set nozzle_diameter = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
	{% set pressure_advance = printer.configfile.config["extruder"]["pressure_advance"]|float %}
	{% set pressure_advance_smooth_time = printer.configfile.config["extruder"]["pressure_advance_smooth_time"]|float %}
	{% set mesh = printer["gcode_macro globalvariables"].meshtoapply %}
	
	QUERY_PROBE
	M117 Printer online.
	{% for s in range(0, 30) %}
	SET_LED LED=nozzle INDEX=1 RED=1 GREEN=0 BLUE=1
	SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=.5 BLUE=.5
	G4 P100
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=1
	G4 P50
	{% endfor %}
	M118 NOTE --> probe: TRIGGERED = Euclid probe NOT attached.
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].nplimitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].nplimitdecel|float}
	M118 Z-Offset is set at {z_offset}mm.
	M118 Nozzle diameter is set at {nozzle_diameter}mm.
	M118 Pressure Advance is set at {pressure_advance}.
	M118 Pressure advance Smooth Time is set at {pressure_advance_smooth_time}.
	M118 Mesh profile is {mesh}
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2

[gcode_macro PRINT_START]
description = Performs all needed moves prior to printing
gcode = 
	CLEAR_PAUSE
	BED_MESH_CLEAR
	M220 S100
	M221 S100
	SET_LED LED=nozzle RED=.2 GREEN=.2 BLUE=1
	{% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
	_COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set defaultWN = printer["gcode_macro globalvariables"].defaultwarmnozzle|float %}
	{% set defaultRN = printer["gcode_macro globalvariables"].defaultreadynozzle|float %}
	{% set defaultSOAK = printer["gcode_macro globalvariables"].preprintsoakminutes|float %}
	{% set defaultENCLOSURE = printer["gcode_macro globalvariables"].defaultenclosure|float %}
	{% set purgeRetract = printer["gcode_macro globalvariables"].purgeretract|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=ready VALUE={params.EXTRUDER_READY|default(defaultRN)|float}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=temp VALUE={params.EXTRUDER_TEMP|default(defaultTN)|float}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=filazcomp VALUE={params.FILAMENT_ZCOMP|default(0.00)|float}
	M118 gCode file passed filament offset of {params.FILAMENT_ZCOMP|default(0.00)|float}mm.
	
	{% set ENCLOSURE_TEMP = params.ENCLOSURE_TEMP|default(defaultENCLOSURE)|float %}
	{% set SOAK = params.SOAK|default(defaultSOAK) %}
	M118 gCode file passed the following to PRINT_START:
	M118 { rawparams }
	
	
	M140 S{BED_TEMP}
	M104 S{defaultWN}
	M141 S{ENCLOSURE_TEMP}
	G90
	G21
	M83
	G92 E0.0
	
	SET_GCODE_OFFSET Z=0.0
	M117 Performing initial homing.
	{% if printer["gcode_macro globalvariables"].qglbeforesoakprint|default() == true %}
	G32
	
	PARK_Center
	{% else %}
	G28
	
	{% endif %}
	M117 Bringing bed to temperature.
	SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
	M190 S{BED_TEMP}
	_WAIT_Start MINUTES={SOAK}

[gcode_macro _PRINT_START2]
description = Part 2 - Performs all needed moves prior to printing
gcode = 
	RESUME_BASE
	{% set EXTRUDER_READY = printer["gcode_macro _WAIT_Variable"].ready|int %}
	{% set EXTRUDER_TEMP = printer["gcode_macro _WAIT_Variable"].temp|int %}
	SET_LED LED=nozzle RED=.5 GREEN=0 BLUE=.5
	M117 Performing hot level.
	CURRENT_HIGH
	M400
	M104 S{EXTRUDER_READY}
	G3201
	M104 S{EXTRUDER_TEMP}
	G1 X0 Y20 F4000
	G1 Z1.5
	M117 Bringing nozzle to temperature.
	SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
	M109 S{EXTRUDER_TEMP}
	SET_LED LED=nozzle RED=1 GREEN=0 BLUE=0
	_FILAMENT_READY
	M117 Commencing print.
	M118 Commencing print.
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=.5

[gcode_macro _FILAMENT_READY]
description = Performs filament specific purgeline and readies for print
gcode = 
	{% set Z_POS = printer.toolhead.position.z|float %}
	{% set FILAMENT_ZCOMP = printer["gcode_macro _WAIT_Variable"].filazcomp|float %}
	{% set NEW_CURRENT_Z = (Z_POS - FILAMENT_ZCOMP|float) %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set Object_min_x = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].obj_min_x|float %}
	{% set Object_min_y = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].obj_min_y|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set NZLD = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
	{% set purgeRetract = printer["gcode_macro globalvariables"].purgeretract|float %}
	
	{% if FILAMENT_ZCOMP > 0.2 %}
	M118 FILAMENT_ZCOMP Offset > 0.2 - Ignoring FILAMENT_ZCOMP.
	{% elif FILAMENT_ZCOMP == 0 %}
	M118 FILAMENT_ZCOMP not set - Ignoring FILAMENT_ZCOMP.
	{% else %}
	M118 FILAMENT_ZCOMP Offset is: {FILAMENT_ZCOMP}
	M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
	SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
	G4 P1000
	M400
	{% endif %}
	
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].limitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].limitdecel|float}
	
	
	G1 X0 Y19.8 Z0.3 F1500.0
	G1 E{(12.5 * NZLD)} F3600
	M400
	G1 X0 Y0 Z0.3 F1500.0
	G1 X130 Y0.0 Z0.3 F1500.0 E{(37.5 * NZLD)}
	G1 X130 Y0.3 Z0.3 F5000.0
	G1 X010 Y0.3 Z0.3 F1500.0 E{(75.0 * NZLD)}
	M400
	G92 E0
	
	G1 E-{purgeRetract} F3000
	G1 Z1.0 F3000
	{% if MeshToApply == "ADAPTIVE" %}
	G0 X{Object_min_x} Y{Object_min_y} F8000
	{% else %}
	G0 X{X_MID} Y{Y_MID} F8000
	{% endif %}

[gcode_macro PRINT_END]
description = Performs all needed actions upon completion of printing
gcode = 
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].nplimitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].nplimitdecel|float}
	{% set EndRetract = printer["gcode_macro globalvariables"].endretract|float %}
	G91
	G0 Z5 F1000
	G90
	G92 E0
	G1 E-{EndRetract} F3600
	M400
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	M400
	TURN_OFF_HEATERS
	CURRENT_NORMAL
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintcool|float}
	PARK_UpperRight
	M18 X Y E
	M107
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintparkcool|float}
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	M117 Finished printing, check nozzle clear.
	M118 Finished printing, check nozzle clear.

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	{% set x = params.X|default(0) %}
	{% set y = params.Y|default(20) %}
	{% set z = params.Z|default(10)|float %}
	{% set e = params.E|default(1) %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% set lift_z = z|abs %}
	{% if act_z < (max_z - lift_z) %}
	{% set z_safe = lift_z %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	PAUSE_BASE
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E-{e} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe}
	G90
	G1 X{x} Y{y} F4000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	{% set e = params.E|default(1) %}
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E{e} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].nplimitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].nplimitdecel|float}
	{% set EndRetract = printer["gcode_macro globalvariables"].endretract|float %}
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	M400
	G92 E0
	G1 E-{EndRetract} F3600
	CLEAR_PAUSE
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE
	CURRENT_NORMAL
	M106 S250
	G90
	PARK_UpperRight
	M18 X Y E
	M107
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintparkcool|float}
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	M117 Cancelled print, check nozzle clear.
	M118 Cancelled print, check nozzle clear.

[gcode_macro TUNE_HOTMESH]
description = Performs a heat-soaked bed-mesh
gcode = 
	CLEAR_PAUSE
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set MeshName = params.NAME|default(MeshToApply) %}
	M118 Will be saving as {MeshName}
	{% if MeshName == "INSITU" or MeshToApply == "NONE" or MeshToApply == "ADAPTIVE" %}
	{action_respond_info("Mesh requires a proper name, specify via cli or change printer.cfg MeshToApply definition.")}
	{% else %}
	{% set defaultWN = printer["gcode_macro globalvariables"].defaultwarmnozzle|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set defaultSOAK = printer["gcode_macro globalvariables"].hotmeshsoakminutes|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	{% set SOAK = params.SOAK|default(defaultSOAK)|float %}
	SET_LED LED=nozzle RED=.2 GREEN=.2 BLUE=1
	
	M140 S{BED_TEMP}
	M104 S{defaultWN}
	G90
	
	SET_GCODE_OFFSET Z=0.0
	M117 Performing initial homing.
	{% if printer["gcode_macro globalvariables"].qglbeforesoakmesh|default() == true %}
	G32
	
	PARK_Center
	{% else %}
	G28
	
	{% endif %}
	M117 Bringing bed to temperature.
	M190 S{BED_TEMP}
	_HEAT_WAIT MINUTES={SOAK} MSG="Pre BED_MESH_CALIBRATE Soaking..."
	SET_LED LED=nozzle RED=.5 GREEN=0 BLUE=.5
	M117 Performing hot level.
	CURRENT_HIGH
	M400
	M401
	QUAD_GANTRY_LEVEL_ORIGINAL
	G28 GOT_PROBE:TRUE KEEP_PROBE:TRUE
	M117 Performing heated bed mesh calibration.
	BED_MESH_PROFILE REMOVE={MeshName}
	BED_MESH_CALIBRATE_ORIGINAL
	BED_MESH_PROFILE SAVE={MeshName}
	BED_MESH_OUTPUT PGP=1
	M118 Bed mesh calibration completed.
	TURN_OFF_HEATERS
	CURRENT_NORMAL
	M402
	PARK_UpperRight
	M18 X Y E
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	M117 Finished mesh, saved as {MeshName}.
	SAVE_CONFIG
	{% endif %}
	{% endif %}

[gcode_macro TUNE_PA_CAL]
description = Prints a Pressure Advance panel to help determine correct PA
gcode = 
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set BED = params.BED|default(defaultTB)|float %}
	{% set EXTRUDER = params.EXTRUDER|default(defaultTN)|float %}
	{% set PA_START = params.PA_START|default(0.0)|float %}
	{% set PA_STEP = params.PA_STEP|default(0.005)|float %}
	{% set NZL_CFG = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
	{% set NZL = params.NZL|default(NZL_CFG)|float %}
	{% set E20 = (0.1147475 * NZL) * 20|float %}
	{% set E40 = (0.1147475 * NZL) * 40|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	PRINT_START BED_TEMP={BED} EXTRUDER_TEMP={EXTRUDER}
	
	M220 S100
	M221 S100
	G21
	G90
	M83
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].limitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].limitdecel|float}
	G92 E0
	M106 S0
	G1 X{(X_MID-40)} Y{(Y_MID-65)} F30000
	G1 Z0.25 F300
	G1 E0.75 F1800
	G1 X{(X_MID-20)} Y{(Y_MID-65)} E{E20} F300
	G1 X{(X_MID+20)} Y{(Y_MID-65)} E{E40} F9000
	G1 X{(X_MID+40)} Y{(Y_MID-65)} E{E20} F300
	G1 E-0.75 F1800
	G1 Z1 F300
	{% for i in range(0, 20) %}
	SET_PRESSURE_ADVANCE ADVANCE={PA_START + (i * PA_STEP)}
	M117 Testing Pressure Advance at: {PA_START + (i * PA_STEP)}
	G1 X{(X_MID-40)} Y{(Y_MID-35)+(5*i)} F30000
	G1 Z0.25 F300
	G1 E0.75 F1800
	G1 X{(X_MID-20)} Y{(Y_MID-35)+(5*i)} E{E20} F300
	G1 X{(X_MID+20)} Y{(Y_MID-35)+(5*i)} E{E40} F9000
	G1 X{(X_MID+40)} Y{(Y_MID-35)+(5*i)} E{E20} F300
	G1 E-0.75 F1800
	G1 Z1 F300
	{% endfor %}
	M117 Find best line and multiply it by ({PA_START} + (line * {PA_STEP}) ) to find your PA setting.
	M118 Find best line and multiply it by ({PA_START} + (line * {PA_STEP}) ) to find your PA setting.
	PRINT_END
	{% endif %}

[gcode_macro TUNE_PID_BED]
description = Performs bed PID tune
gcode = 
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	{% set FAN_SPEED = params.FAN_SPEED|default(64)|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=0
	G90
	M117 Performing initial homing.
	G32
	G1 Z5 Y{Y_MID} X{X_MID} F4000
	M106 S{FAN_SPEED}
	M117 Starting PID calibration.
	PID_CALIBRATE HEATER=heater_bed TARGET={BED_TEMP}
	M117 Finished PID calibration.
	TURN_OFF_HEATERS
	CURRENT_NORMAL
	PARK_UpperRight
	M18 X Y E
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	_COOL_WAIT MINUTES=1
	SAVE_CONFIG
	{% endif %}

[gcode_macro TUNE_PID_NZL]
description = Performs nozzle PID tune
gcode = 
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set FAN_SPEED = params.FAN_SPEED|default(64)|float %}
	{% set SOAK_MINUTES = params.SOAK_MINUTES|default(12)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	{% set NZL_TEMP = params.NZL_TEMP|default(defaultTN)|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=0
	G90
	M117 Performing initial homing.
	G32
	G1 Z5 Y{Y_MID} X{X_MID} F4000
	M117 Bringing bed to temperature.
	M190 S{BED_TEMP}
	_HEAT_WAIT MINUTES={SOAK_MINUTES} MSG="Pre NZL_PID Soaking..."
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=0
	M106 S{FAN_SPEED}
	M117 Starting PID calibration.
	PID_CALIBRATE HEATER=extruder TARGET={NZL_TEMP}
	M117 Finished PID calibration.
	TURN_OFF_HEATERS
	G90
	PARK_UpperRight
	M18 X Y E
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintparkcool|float}
	SAVE_CONFIG
	{% endif %}

[gcode_macro _HEAT_WAIT]
description = Heating cycle waiting routine
gcode = 
	{% set MINUTES = params.MINUTES|default(10)|int %}
	{% set MSG = params.MSG|default("Warming...")|string %}
	{% for i in range(0, MINUTES) %}
	M117 {MSG} {MINUTES-i} minute remaining.
	{% for s in range(0, 60) %}
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
	G4 P500
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=0 BLUE=0
	G4 P500
	{% endfor %}
	{% endfor %}

[gcode_macro _COOL_WAIT]
description = Cooling cycle waiting routine
gcode = 
	M106 S250
	{% set MINUTES = params.MINUTES|default(1)|int %}
	{% set MSG = params.MSG|default("Cooling...")|string %}
	{% for i in range(0, MINUTES) %}
	M117 {MSG} {MINUTES-i} minute remaining.
	{% for s in range(0, 60) %}
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
	G4 P500
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=0
	G4 P500
	{% endfor %}
	{% endfor %}
	M107

[gcode_macro _WAIT_Variable]
variable_count = 300
variable_duration = 2
variable_waiting = False
variable_ready = 200
variable_temp = 250
variable_filazcomp = 0
gcode = 

[delayed_gcode WAIT_Delayed]
gcode = 
	{% set count = printer["gcode_macro _WAIT_Variable"].count|int %}
	{% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
	M117 Pre-Print Heatsoaking... {((duration * count) / 60)|round(1)} minutes left.
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count-1}
	{% if count > 0 %} _WAIT_Loop  {% endif %}
	{% if count == 0 %}
	
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=False
	_PRINT_START2
	{% endif %}

[gcode_macro _WAIT_Loop]
gcode = 
	{% set count = printer["gcode_macro _WAIT_Variable"].count|int %}
	{% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
	UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration}
	{% if  count % 2 == 0 %}
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
	{% else %}
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=0 BLUE=0
	{% endif %}

[gcode_macro _WAIT_Start]
gcode = 
	{% set MINUTES = params.MINUTES|default(15)|int %}
	{% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
	{% set count = (MINUTES * 60) / duration %}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=True
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count}
	UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration}
	PAUSE_BASE

[gcode_macro WAIT_Quit]
gcode = 
	{% if printer["gcode_macro _WAIT_Variable"].waiting %}
	M118 STOPPING LOOP, SETTING COUNT TO 0
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE=0
	UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION=1
	{% else %}
	M118 Not in waiting state, nothing to do.
	{% endif %}

[firmware_retraction]
retract_length = 0.5
retract_speed = 30
unretract_extra_length = 0
unretract_speed = 30

[gcode_macro globalvariables]
variable_limitaccel = 3501
variable_limitdecel = 1751
variable_defaulttempnozzle = 235
variable_defaultreadynozzle = 210
variable_defaultwarmnozzle = 160
variable_defaulttempbed = 110
variable_defaultenclosure = 40
variable_meshtoapply = "ADAPTIVE"
variable_qglbeforesoakmesh = True
variable_qglbeforesoakprint = True
variable_hotmeshsoakminutes = 20
variable_preprintsoakminutes = 15
variable_insitumeshsoakminutes = 01
variable_postprintcool = 1
variable_postprintparkcool = 2
variable_purgeretract = 0.1
variable_endretract = 2.0
variable_nplimitaccel = 3500
variable_nplimitdecel = 1750
variable_printcurrentxy = 1.1
variable_printcurrentz = 0.8
variable_parkheightpercentage = 0.50
variable_euclidx = 0
variable_euclidy = 355
variable_euclidswipex = 50
variable_euclidcleary = 325
variable_zprobespeed = 5.0
variable_zprobesamples = 7
variable_zprobetolerance = 0.050
variable_zproberetract = 1.5
variable_adxlsoakminutes = 30
gcode = 
	M117 Happy Printing!

[input_shaper]
shaper_type_x = 3hump_ei
shaper_freq_x = 83.8
shaper_type_y = mzv
shaper_freq_y = 37.2

[bed_mesh default]
version = 1
points = 
	0.053750, 0.055000, 0.023750, 0.087500, 0.033750, 0.060000, 0.055000
	0.025000, 0.013750, 0.008750, 0.020000, 0.020000, 0.037500, 0.040000
	0.000000, 0.003750, -0.053750, -0.003750, -0.041250, 0.021250, 0.007500
	0.007500, -0.008750, -0.022500, 0.000000, -0.005000, 0.007500, 0.007500
	0.008750, 0.007500, -0.046250, -0.007500, -0.040000, 0.017500, 0.003750
	0.043750, 0.022500, 0.006250, 0.002500, 0.011250, 0.032500, 0.031250
	0.057500, 0.041250, 0.025000, 0.023750, 0.027500, 0.050000, 0.051250
tension = 0.2
min_x = 40.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 40.0
x_count = 7
max_y = 310.0
mesh_x_pps = 2
max_x = 310.0

[bed_mesh MESH110]
version = 1
points = 
	0.053750, 0.055000, 0.023750, 0.087500, 0.033750, 0.060000, 0.055000
	0.025000, 0.013750, 0.008750, 0.020000, 0.020000, 0.037500, 0.040000
	0.000000, 0.003750, -0.053750, -0.003750, -0.041250, 0.021250, 0.007500
	0.007500, -0.008750, -0.022500, 0.000000, -0.005000, 0.007500, 0.007500
	0.008750, 0.007500, -0.046250, -0.007500, -0.040000, 0.017500, 0.003750
	0.043750, 0.022500, 0.006250, 0.002500, 0.011250, 0.032500, 0.031250
	0.057500, 0.041250, 0.025000, 0.023750, 0.027500, 0.050000, 0.051250
tension = 0.2
min_x = 40.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 40.0
x_count = 7
max_y = 310.0
mesh_x_pps = 2
max_x = 310.0
=======================
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 139, in _read_config
    m.add_printer_objects(config)
  File "/home/pi/klipper/klippy/mcu.py", line 1026, in add_printer_objects
    printer.add_object('mcu', MCU(config.getsection('mcu'), mainsync))
  File "/home/pi/klipper/klippy/mcu.py", line 575, in __init__
    self._serialport = config.get('serial')
  File "/home/pi/klipper/klippy/configfile.py", line 57, in get
    return self._get_wrapper(self.fileconfig.get, option, default,
  File "/home/pi/klipper/klippy/configfile.py", line 32, in _get_wrapper
    raise error("Option '%s' in section '%s' must be specified"
configparser.Error: Option 'serial' in section 'mcu' must be specified
webhooks client 3044384808: New connection
webhooks client 3044384808: Client info {'program': 'Moonraker', 'version': 'v0.8.0-23-g18f5ff4'}
webhooks client 3044384808: Disconnected
Restarting printer
Start printer at Thu Mar  2 22:51:14 2023 (1677797474.9 1547.2)
===== Config file =====
[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_39003000105053424E363620-if00
restart_method = command

[mcu sht36v2]
canbus_uuid = 3388e21717f3

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.70
min_temp = 0
max_temp = 120
control = pid
pid_kp = 58.437
pid_ki = 2.347
pid_kd = 363.769
pwm_cycle_time = 0.0166

[extruder]
step_pin = sht36v2:PB4
dir_pin = sht36v2:PB3
enable_pin = !sht36v2:PA15
rotation_distance = 22.6789511
gear_ratio = 50:17
microsteps = 32
full_steps_per_rotation = 200
filament_diameter = 1.75
heater_pin = sht36v2:PA8
sensor_type = 104NT-4-RO25H42G
sensor_pin = sht36v2:PA3
min_temp = 10
max_temp = 270
max_power = 1.0
min_extrude_temp = 170
control = pid
pid_kp = 26.213
pid_ki = 1.304
pid_kd = 131.721
nozzle_diameter = 0.4
pressure_advance = 0.055
pressure_advance_smooth_time = 0.030

[tmc2209 extruder]
uart_pin = sht36v2:PB5
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan]
pin = rpi:gpio18
max_power = 1
cycle_time = 0.002
hardware_pwm = false
shutdown_speed = 0

[heater_fan hotend_fan]
pin = sht36v2:PB10
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = .7

[heater_fan exhaust_fan]
pin = PD15
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0
heater = heater_bed
heater_temp = 60
fan_speed = 1.0

[fan_generic fan]
pin = sht36v2:PB11

[multi_pin controller_fan_pins]
pins = PD14, PD13

[controller_fan controller_fan]
pin = controller_fan_pins
kick_start_time = 0.5
heater = heater_bed, extruder
stepper = X, Y, Z, Z1, Z2, Z3
fan_speed = 0.6

[temperature_sensor Octopus]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor RaspberryPi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor Enclosure]
sensor_type = ATC Semitec 104GT-2
sensor_pin = sht36v2:PA4
min_temp = -50
max_temp = 350

[temperature_sensor Fly-SHT]
sensor_type = temperature_mcu
sensor_mcu = sht36v2

[printer]
kinematics = corexy
max_velocity = 700
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 10.0

[virtual_sdcard]
path = ~/gcode_files

[display_status]

[pause_resume]

[respond]
default_type = echo

[idle_timeout]
timeout = 1800

[quad_gantry_level]
gantry_corners = 
	
	
	
	
	
	
	-80,-22
	390,408
points = 
	
	
	
	
	
	
	
	
	
	
	25,0
	25,280
	310,280
	310,0
speed = 75
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 15

[bed_mesh]
speed = 50
horizontal_move_z = 10
mesh_min = 40, 40
mesh_max = 270, 290
probe_count = 7, 7
mesh_pps = 2, 2
algorithm = bicubic
relative_reference_index = 24

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = !PG6
position_min = 0
position_endstop = 310
position_max = 310
homing_speed = 60
second_homing_speed = 10
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = false
run_current = 0.4
sense_resistor = 0.105
stealthchop_threshold = 0

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = !PG9
position_min = 0
position_endstop = 330
position_max = 330
homing_speed = 60
second_homing_speed = 10
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = false
run_current = 0.4
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PF11
dir_pin = PG3
enable_pin = !PG5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32
endstop_pin = probe:z_virtual_endstop
position_max = 250
position_min = -5
homing_speed = 4
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = PF10
enable_pin = !PG2
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[gcode_macro _ADAPTIVE_MESH_VARIABLES]
variable_ready = False
variable_do_mesh = False
variable_do_nominal = False
variable_mesh_min = 0,0
variable_mesh_max = 0,0
variable_mesh_center = 0,0
variable_mesh_xcenter = 0
variable_mesh_ycenter = 0
variable_obj_min_y = 0
variable_obj_min_x = 0
variable_probe_count = 0,0
variable_rri = 0
variable_algo = "bicubic"
gcode = 

[gcode_macro _COMPUTE_MESH_PARAMETERS]
description = Compute the mesh parameters and store them for later use
gcode = 
	
	{% set xMinConf, yMinConf = printer["configfile"].config["bed_mesh"]["mesh_min"].split(',')|map('trim')|map('int') %}
	{% set xMaxConf, yMaxConf = printer["configfile"].config["bed_mesh"]["mesh_max"].split(',')|map('trim')|map('int') %}
	{% set xProbeCntConf, yProbeCntConf = printer["configfile"].config["bed_mesh"]["probe_count"].split(',')|map('trim')|map('int') %}
	{% set algo = printer["configfile"].config["bed_mesh"]["algorithm"]|lower %}
	{% set xMeshPPS, yMeshPPS = (printer["configfile"].config["bed_mesh"]["mesh_pps"] | default('2,2')).split(',')|map('trim')|map('int') %}
	
	
	
	{% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
	
	
	{% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
	{% set margin = params.MARGIN|default(5)|int %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=obj_min_y VALUE={yMinSpec}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=obj_min_x VALUE={xMinSpec}
	
	
	
	
	{% set xMin = [xMinConf, (xMinSpec - margin)]|max %}
	{% set xMax = [xMaxConf, (xMaxSpec + margin)]|min %}
	{% set yMin = [yMinConf, (yMinSpec - margin)]|max %}
	{% set yMax = [yMaxConf, (yMaxSpec + margin)]|min %}
	
	
	
	
	{% set xProbeCnt = ((xMax - xMin) * xProbeCntConf / (xMaxConf - xMinConf))|round(0, 'ceil')|int %}
	{% set yProbeCnt = ((yMax - yMin) * yProbeCntConf / (yMaxConf - yMinConf))|round(0, 'ceil')|int %}
	
	
	
	
	
	
	
	
	{% if xProbeCnt < 3 and yProbeCnt < 3 %}
	RESPOND MSG="Computed mesh parameters: none, bed mesh not needed"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={False}
	
	{% set xCenter = xMin + ((xMax - xMin) / 2) %}
	{% set yCenter = yMin + ((yMax - yMin) / 2) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_xcenter VALUE={xCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_ycenter VALUE={yCenter}
	M118 ADAPTIVE: X_Center: {xCenter}, Y_Center: {yCenter}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	{% else %}
	{% set xProbeCnt = [3, xProbeCnt]|max %}
	{% set yProbeCnt = [3, yProbeCnt]|max %}
	
	
	
	{% if xProbeCnt % 2 == 0 %}
	{% set xProbeCnt = xProbeCnt + 1 %}
	{% endif %}
	{% if yProbeCnt % 2 == 0 %}
	{% set yProbeCnt = yProbeCnt + 1 %}
	{% endif %}
	
	
	{% if xMeshPPS != 0 or yMeshPPS != 0 %}
	{% set probeCntMin = [xProbeCnt, yProbeCnt]|min %}
	{% set probeCntMax = [xProbeCnt, yProbeCnt]|max %}
	{% if algo == "lagrange" and probeCntMax > 6 %}
	
	{% set algo = "bicubic" %}
	{% endif %}
	{% if algo == "bicubic" and probeCntMin < 4 %}
	{% if probeCntMax > 6 %}
	
	{% if xProbeCnt > yProbeCnt %}
	{% set yProbeCnt = 5 %}
	{% else %}
	{% set xProbeCnt = 5 %}
	{% endif %}
	{% else %}
	
	{% set algo = "lagrange" %}
	{% endif %}
	{% endif %}
	{% endif %}
	
	
	{% set rRefIndex = (((xProbeCnt * yProbeCnt) - 1) / 2)|int %}
	{% set xCenter = xMin + ((xMax - xMin) / 2) %}
	{% set yCenter = yMin + ((yMax - yMin) / 2) %}
	
	
	{% set mesh_min = "%d,%d"|format(xMin, yMin) %}
	{% set mesh_max = "%d,%d"|format(xMax, yMax) %}
	{% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} MESH_CENTER={mesh_center} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_xcenter VALUE={xCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_ycenter VALUE={yCenter}
	M118 ADAPTIVE: X_Center: {xCenter}, Y_Center: {yCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=rri VALUE={rRefIndex}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
	{% endif %}
	{% else %}
	RESPOND MSG="Computed mesh parameters: none, going for a nominal bed mesh"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={True}
	
	{% set xCenter = xMinConf + ((xMaxConf - xMinConf) / 2) %}
	{% set yCenter = yMinConf + ((yMaxConf - yMinConf) / 2) %}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={True}

[gcode_macro _ADAPTIVE_BED_MESH]
description = Perform a bed mesh, but only where and when it's needed
gcode = 
	{% set ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home printer first!") }
	{% endif %}
	
	
	{% if ready %}
	_DO_ADAPTIVE_MESH
	
	
	
	{% else %}
	RESPOND MSG="Adaptive bed mesh: parameters not computed, automatically calling the COMPUTE_MESH_PARAMETERS macro prior to the mesh"
	_COMPUTE_MESH_PARAMETERS {rawparams}
	M400
	_DO_ADAPTIVE_MESH
	{% endif %}

[gcode_macro _DO_ADAPTIVE_MESH]
gcode = 
	
	{% set do_mesh = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_mesh %}
	{% set do_nominal = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_nominal %}
	{% set mesh_min = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_min %}
	{% set mesh_max = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_max %}
	{% set probe_count = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].probe_count %}
	{% set rRefIndex = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].rri %}
	{% set algo = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].algo %}
	
	
	
	
	{% if do_mesh %}
	
	{% if do_nominal %}
	RESPOND MSG="Adaptive bed mesh: nominal bed mesh"
	BED_MESH_CALIBRATE_ORIGINAL
	{% else %}
	RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
	BED_MESH_CALIBRATE_ORIGINAL MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}
	{% endif %}
	{% else %}
	RESPOND MSG="Adaptive bed mesh: no mesh to be done"
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={False}

[gcode_macro CURRENT_HIGH]
description = Raises stepper current for printing routine
gcode = 
	M117 Increased motor currents.
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro globalvariables"].printcurrentxy|float}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro globalvariables"].printcurrentxy|float}
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}

[gcode_macro CURRENT_NORMAL]
description = Lowers stepper current for NON-printing routines
gcode = 
	M117 Decreased motor currents.
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={ printer.configfile.config["tmc2209 stepper_x"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={ printer.configfile.config["tmc2209 stepper_y"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={ printer.configfile.config["tmc2209 stepper_z"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={ printer.configfile.config["tmc2209 stepper_z1"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={ printer.configfile.config["tmc2209 stepper_z2"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={ printer.configfile.config["tmc2209 stepper_z3"]["run_current"] }

[force_move]
enable_force_move = true

[probe]
pin = PG11sht36v2:PA1
x_offset = -21.2
y_offset = 37.5
speed = 3.0
lift_speed = 10.0
samples = 5
samples_result = median
sample_retract_dist = 2.0
samples_tolerance = 0.010
samples_tolerance_retries = 5
z_offset = 8.60

[homing_override]
axes = z
gcode = 
	{% set KEEP_PROBE = params.KEEP_PROBE|default(FALSE) %}
	{% set GOT_PROBE = params.GOT_PROBE|default(FALSE) %}
	{% set ONLY_Z = params.ONLY_Z|default(FALSE) %}
	{% set Z_POS = printer.toolhead.position.z %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set X_PROBEOFFSET = printer.configfile.config["probe"]["x_offset"]|float %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set Y_PROBEOFFSET = printer.configfile.config["probe"]["y_offset"]|float %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	SET_KINEMATIC_POSITION Z=0
	G0 Z15 F3600
	{% else %}
	{% if Z_POS < 15 %}
	G90
	G0 Z15
	{% else %}
	G91
	G0 Z1 F3600
	G90
	{% endif %}
	{% endif %}
	G90
	M118 Currently homed: { printer.toolhead.homed_axes }
	{% if printer.toolhead.homed_axes == "xyz" and ONLY_Z %}
	M118 Re-Homing skipped on X & Y.
	{% else %}
	G28 X Y
	{% endif %}
	{% if GOT_PROBE == FALSE %}
	M401
	{% endif %}
	G0 X{(X_MID - X_PROBEOFFSET)} Y{(Y_MID - Y_PROBEOFFSET)} F4000
	G28 Z
	G0 Z15 F3600
	{% if KEEP_PROBE == FALSE %}
	M402
	{% endif %}

[gcode_macro M401]
description = Deploys the Euclid probe
gcode = 
	QUERY_PROBE
	{% set Z_POS = printer.toolhead.position.z %}
	{% if printer.probe.last_query %}
	M118 Fetching Euclid Probe.
	{% if printer.toolhead.homed_axes != "xyz" %}
	SET_KINEMATIC_POSITION Z=0
	G0 Z15 F3600
	G28X
	G28Y
	{% endif %}
	G90
	{% if Z_POS < 15 %} G0 Z15 {% endif %}
	_PROBE_DEPLOY
	{% else %}
	M118 ?!Attempted to Deploy probe but it is already attached.
	{% endif %}

[gcode_macro M402]
description = Stows the Euclid probe
gcode = 
	QUERY_PROBE
	{% set Z_POS = printer.toolhead.position.z %}
	{% if not printer.probe.last_query %}
	M118 Stowing Euclid Probe.
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	{% if Z_POS < 15 %} G0 Z15 {% endif %}
	_PROBE_STOW
	{% else %}
	M118 ?!Attempted to Stow probe but it is not attached.
	{% endif %}

[gcode_macro _PROBE_DEPLOY]
gcode = 
	G90
	G0 Y{printer["gcode_macro globalvariables"].euclidcleary|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidx|float} F4000
	G0 Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} F4000
	_error_if_probe_not_deployed

[gcode_macro _PROBE_STOW]
gcode = 
	G90
	G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} F4000
	G0 Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidx|float} F2000
	G0 Y{printer["gcode_macro globalvariables"].euclidcleary|float} F4000
	_error_if_probe_deployed

[gcode_macro _do_error_if_probe_deployed]
gcode = 
	{% if not printer.probe.last_query %}
	{action_raise_error("ERROR: Probe is still deployed, please remove and return to dock.")}
	{% else %}
	M118 Euclid probe has been stowed.
	{% endif %}

[gcode_macro _error_if_probe_deployed]
gcode = 
	G4 P300
	QUERY_PROBE
	_do_error_if_probe_deployed

[gcode_macro _do_error_if_probe_not_deployed]
gcode = 
	{% if printer.probe.last_query %}
	{action_raise_error("ERROR: Probe unsuccessfully deployed, please check printer.")}
	{% else %}
	M118 Euclid probe has been attached.
	{% endif %}

[gcode_macro _error_if_probe_not_deployed]
gcode = 
	G4 P300
	QUERY_PROBE
	_do_error_if_probe_not_deployed

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_ORIGINAL
description = Levels the four Z-axis gantry corners
gcode = 
	{% if printer.toolhead.homed_axes != "xyz" %}
	G28 KEEP_PROBE:TRUE
	{% endif %}
	M401
	QUAD_GANTRY_LEVEL_ORIGINAL
	M402

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIGINAL
description = Performs bed mesh
gcode = 
	QUERY_PROBE
	M401
	BED_MESH_CALIBRATE_ORIGINAL
	M402

[gcode_macro G32]
description = Clears bed-mesh and performs G28, QGL, G28
gcode = 
	BED_MESH_CLEAR
	G28 KEEP_PROBE:TRUE
	QUAD_GANTRY_LEVEL_ORIGINAL
	G28 GOT_PROBE:TRUE
	QUERY_PROBE

[gcode_macro G3201]
description = Clears bed-mesh and performs G28, QGL, G28-Z, Probes Center, and applies bed-mesh
gcode = 
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set X_MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_xcenter|float %}
	{% set Y_MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_ycenter|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set X_PROBEOFFSET = printer.configfile.config["probe"]["x_offset"]|float %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set Y_PROBEOFFSET = printer.configfile.config["probe"]["y_offset"]|float %}
	{% set ZSpeed = printer["gcode_macro globalvariables"].zprobespeed|float %}
	{% set ZSamples = printer["gcode_macro globalvariables"].zprobesamples|int %}
	{% set ZTolerance = printer["gcode_macro globalvariables"].zprobetolerance|float %}
	{% set ZRetract = printer["gcode_macro globalvariables"].zproberetract|float %}
	{% set S_Retries = printer.configfile.config["probe"]["samples_tolerance_retries"]|int %}
	BED_MESH_CLEAR
	G28 KEEP_PROBE:TRUE
	QUAD_GANTRY_LEVEL_ORIGINAL
	G0 Z15 F3600
	{% if MeshToApply == "ADAPTIVE" %}
	G0 X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} F4000
	M118 ADAPTIVE: Moving to X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} to probe Z0.
	{% else %}
	G0 X{(X_MID - X_PROBEOFFSET)} Y{(Y_MID - Y_PROBEOFFSET)} F4000
	M118 Moving to X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} to probe Z0.
	{% endif %}
	PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries={S_Retries} sample_retract_dist={ZRetract}
	_CHECK_PROBE3201

[gcode_macro _CHECK_PROBE3201]
gcode = 
	{% set PASS = printer.probe.last_z_result %}
	{% set ZP_CAL = printer.configfile.config["probe"]["z_offset"]|float %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set Z_POS = printer.toolhead.position.z|float %}
	{% set Z_DIFFERENCE = PASS - ZP_CAL|float %}
	{% set NEW_CURRENT_Z = (Z_POS - Z_DIFFERENCE) %}
	M118 Current Probing is: {PASS}
	M118 Z-Probe Offset is: {ZP_CAL}
	M118 Difference: {Z_DIFFERENCE}
	M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
	SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
	G4 P100
	M118 Moving nozzle to newly adjusted Z15.
	G0 Z15 F500
	G4 P1000
	{% if MeshToApply != "NONE" %}
	{% if MeshToApply == "INSITU" %}
	M118 Performing INSITU Mesh.
	BED_MESH_CALIBRATE_ORIGINAL
	BED_MESH_PROFILE SAVE=INSITU
	{% elif MeshToApply == "ADAPTIVE" %}
	M118 Performing ADAPTIVE Mesh.
	_ADAPTIVE_BED_MESH
	{% else %}
	M118 Applied {MeshToApply} Mesh.
	BED_MESH_PROFILE LOAD={MeshToApply}
	{% endif %}
	{% endif %}
	QUERY_PROBE
	{% if not printer.probe.last_query %}
	M118 Stowing Euclid Probe.
	_PROBE_STOW
	{% else %}
	M118 ?!Probe is not attached.
	{% endif %}

[gcode_macro FILAMENT_LOAD]
description = Loads filament
gcode = 
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{% if printer.idle_timeout.state == "Printing" and printer.pause_resume.is_paused %}
	SAVE_GCODE_STATE NAME=HLF_state
	M83
	G0 X{X_MID} Y20 F4000
	G0 E50 F400
	G0 E50 F400
	G0 E50 F200
	G1 E-0.5 F1800
	G92 E0
	M400
	RESTORE_GCODE_STATE NAME=HLF_state
	{% else %}
	{action_respond_info("Pause print first.")}
	{% endif %}
	{% else %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	M117 Performing required homing.
	G28
	{% endif %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set TEMP = params.TEMP|default(defaultTN)|float %}
	M117 Heating nozzle to LOAD filamnet.
	G90
	G0 X{X_MID} Y20 Z90 F4000
	M109 S{TEMP}
	M83
	G0 E50 F400
	G0 E50 F400
	G0 E50 F200
	G1 E-0.5 F1800
	G92 E0
	M400
	PARK_UpperRight
	
	TURN_OFF_HEATERS
	M117 Finished filament load.
	{% endif %}

[gcode_macro FILAMENT_UNLOAD]
description = UNloads filament
gcode = 
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{% if printer.idle_timeout.state == "Printing" and printer.pause_resume.is_paused %}
	SAVE_GCODE_STATE NAME=HUF_state
	M83
	G0 X{X_MID} Y20 F4000
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G92 E0
	M400
	RESTORE_GCODE_STATE NAME=HUF_state
	{% else %}
	{action_respond_info("Pause print first.")}
	{% endif %}
	{% else %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	M117 Performing required homing.
	G28
	{% endif %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set TEMP = params.TEMP|default(defaultTN)|float %}
	M117 Heating nozzle to UNLOAD filamnet.
	G90
	G0 X{X_MID} Y20 Z90 F4000
	M109 S{TEMP}
	M83
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G92 E0
	M400
	PARK_UpperRight
	
	TURN_OFF_HEATERS
	M117 Finished filament unload.
	{% endif %}

[gcode_macro PARK_UpperRight]
description = Parks the toolhead in the upper-right position
gcode = 
	{% set Z_MAX = printer.configfile.config["stepper_z"]["position_max"]|float -1 %}
	{% set X_MAX = printer.configfile.config["stepper_x"]["position_max"]|float -1 %}
	{% set Z_POS = printer.toolhead.position.z + 10 %}
	{% set defaultParkHeight = printer["gcode_macro globalvariables"].parkheightpercentage|float %}
	{% set ParkHeight = params.PARK_HEIGHT_PERCENT|default(defaultParkHeight)|float %}
	{% if ParkHeight < 0.2  %}
	{% set ParkHeight = 0.2 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCORNER_state
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	G0 X{X_MAX} Y20 Z{ [(Z_MAX*ParkHeight), [Z_POS, Z_MAX]|min]|max } F4000
	RESTORE_GCODE_STATE NAME=PARKCORNER_state

[gcode_macro PARK_Center]
description = Parks the toolhead in the center position
gcode = 
	{% set Z = params.Z|default(40)|float %}
	SAVE_GCODE_STATE NAME=PARK_Center_state
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	G0 X{X_MID} Y{Y_MID} Z{Z} F4000
	RESTORE_GCODE_STATE NAME=PARK_Center_state

[delayed_gcode prerun]
initial_duration = 1
gcode = 
	{% set z_offset = printer.configfile.config["probe"]["z_offset"]|float %}
	{% set nozzle_diameter = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
	{% set pressure_advance = printer.configfile.config["extruder"]["pressure_advance"]|float %}
	{% set pressure_advance_smooth_time = printer.configfile.config["extruder"]["pressure_advance_smooth_time"]|float %}
	{% set mesh = printer["gcode_macro globalvariables"].meshtoapply %}
	
	QUERY_PROBE
	M117 Printer online.
	{% for s in range(0, 30) %}
	SET_LED LED=nozzle INDEX=1 RED=1 GREEN=0 BLUE=1
	SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=.5 BLUE=.5
	G4 P100
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=1
	G4 P50
	{% endfor %}
	M118 NOTE --> probe: TRIGGERED = Euclid probe NOT attached.
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].nplimitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].nplimitdecel|float}
	M118 Z-Offset is set at {z_offset}mm.
	M118 Nozzle diameter is set at {nozzle_diameter}mm.
	M118 Pressure Advance is set at {pressure_advance}.
	M118 Pressure advance Smooth Time is set at {pressure_advance_smooth_time}.
	M118 Mesh profile is {mesh}
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2

[gcode_macro PRINT_START]
description = Performs all needed moves prior to printing
gcode = 
	CLEAR_PAUSE
	BED_MESH_CLEAR
	M220 S100
	M221 S100
	SET_LED LED=nozzle RED=.2 GREEN=.2 BLUE=1
	{% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
	_COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set defaultWN = printer["gcode_macro globalvariables"].defaultwarmnozzle|float %}
	{% set defaultRN = printer["gcode_macro globalvariables"].defaultreadynozzle|float %}
	{% set defaultSOAK = printer["gcode_macro globalvariables"].preprintsoakminutes|float %}
	{% set defaultENCLOSURE = printer["gcode_macro globalvariables"].defaultenclosure|float %}
	{% set purgeRetract = printer["gcode_macro globalvariables"].purgeretract|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=ready VALUE={params.EXTRUDER_READY|default(defaultRN)|float}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=temp VALUE={params.EXTRUDER_TEMP|default(defaultTN)|float}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=filazcomp VALUE={params.FILAMENT_ZCOMP|default(0.00)|float}
	M118 gCode file passed filament offset of {params.FILAMENT_ZCOMP|default(0.00)|float}mm.
	
	{% set ENCLOSURE_TEMP = params.ENCLOSURE_TEMP|default(defaultENCLOSURE)|float %}
	{% set SOAK = params.SOAK|default(defaultSOAK) %}
	M118 gCode file passed the following to PRINT_START:
	M118 { rawparams }
	
	
	M140 S{BED_TEMP}
	M104 S{defaultWN}
	M141 S{ENCLOSURE_TEMP}
	G90
	G21
	M83
	G92 E0.0
	
	SET_GCODE_OFFSET Z=0.0
	M117 Performing initial homing.
	{% if printer["gcode_macro globalvariables"].qglbeforesoakprint|default() == true %}
	G32
	
	PARK_Center
	{% else %}
	G28
	
	{% endif %}
	M117 Bringing bed to temperature.
	SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
	M190 S{BED_TEMP}
	_WAIT_Start MINUTES={SOAK}

[gcode_macro _PRINT_START2]
description = Part 2 - Performs all needed moves prior to printing
gcode = 
	RESUME_BASE
	{% set EXTRUDER_READY = printer["gcode_macro _WAIT_Variable"].ready|int %}
	{% set EXTRUDER_TEMP = printer["gcode_macro _WAIT_Variable"].temp|int %}
	SET_LED LED=nozzle RED=.5 GREEN=0 BLUE=.5
	M117 Performing hot level.
	CURRENT_HIGH
	M400
	M104 S{EXTRUDER_READY}
	G3201
	M104 S{EXTRUDER_TEMP}
	G1 X0 Y20 F4000
	G1 Z1.5
	M117 Bringing nozzle to temperature.
	SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
	M109 S{EXTRUDER_TEMP}
	SET_LED LED=nozzle RED=1 GREEN=0 BLUE=0
	_FILAMENT_READY
	M117 Commencing print.
	M118 Commencing print.
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=.5

[gcode_macro _FILAMENT_READY]
description = Performs filament specific purgeline and readies for print
gcode = 
	{% set Z_POS = printer.toolhead.position.z|float %}
	{% set FILAMENT_ZCOMP = printer["gcode_macro _WAIT_Variable"].filazcomp|float %}
	{% set NEW_CURRENT_Z = (Z_POS - FILAMENT_ZCOMP|float) %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set Object_min_x = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].obj_min_x|float %}
	{% set Object_min_y = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].obj_min_y|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set NZLD = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
	{% set purgeRetract = printer["gcode_macro globalvariables"].purgeretract|float %}
	
	{% if FILAMENT_ZCOMP > 0.2 %}
	M118 FILAMENT_ZCOMP Offset > 0.2 - Ignoring FILAMENT_ZCOMP.
	{% elif FILAMENT_ZCOMP == 0 %}
	M118 FILAMENT_ZCOMP not set - Ignoring FILAMENT_ZCOMP.
	{% else %}
	M118 FILAMENT_ZCOMP Offset is: {FILAMENT_ZCOMP}
	M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
	SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
	G4 P1000
	M400
	{% endif %}
	
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].limitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].limitdecel|float}
	
	
	G1 X0 Y19.8 Z0.3 F1500.0
	G1 E{(12.5 * NZLD)} F3600
	M400
	G1 X0 Y0 Z0.3 F1500.0
	G1 X130 Y0.0 Z0.3 F1500.0 E{(37.5 * NZLD)}
	G1 X130 Y0.3 Z0.3 F5000.0
	G1 X010 Y0.3 Z0.3 F1500.0 E{(75.0 * NZLD)}
	M400
	G92 E0
	
	G1 E-{purgeRetract} F3000
	G1 Z1.0 F3000
	{% if MeshToApply == "ADAPTIVE" %}
	G0 X{Object_min_x} Y{Object_min_y} F8000
	{% else %}
	G0 X{X_MID} Y{Y_MID} F8000
	{% endif %}

[gcode_macro PRINT_END]
description = Performs all needed actions upon completion of printing
gcode = 
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].nplimitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].nplimitdecel|float}
	{% set EndRetract = printer["gcode_macro globalvariables"].endretract|float %}
	G91
	G0 Z5 F1000
	G90
	G92 E0
	G1 E-{EndRetract} F3600
	M400
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	M400
	TURN_OFF_HEATERS
	CURRENT_NORMAL
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintcool|float}
	PARK_UpperRight
	M18 X Y E
	M107
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintparkcool|float}
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	M117 Finished printing, check nozzle clear.
	M118 Finished printing, check nozzle clear.

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	{% set x = params.X|default(0) %}
	{% set y = params.Y|default(20) %}
	{% set z = params.Z|default(10)|float %}
	{% set e = params.E|default(1) %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% set lift_z = z|abs %}
	{% if act_z < (max_z - lift_z) %}
	{% set z_safe = lift_z %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	PAUSE_BASE
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E-{e} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe}
	G90
	G1 X{x} Y{y} F4000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	{% set e = params.E|default(1) %}
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E{e} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].nplimitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].nplimitdecel|float}
	{% set EndRetract = printer["gcode_macro globalvariables"].endretract|float %}
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	M400
	G92 E0
	G1 E-{EndRetract} F3600
	CLEAR_PAUSE
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE
	CURRENT_NORMAL
	M106 S250
	G90
	PARK_UpperRight
	M18 X Y E
	M107
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintparkcool|float}
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	M117 Cancelled print, check nozzle clear.
	M118 Cancelled print, check nozzle clear.

[gcode_macro TUNE_HOTMESH]
description = Performs a heat-soaked bed-mesh
gcode = 
	CLEAR_PAUSE
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set MeshName = params.NAME|default(MeshToApply) %}
	M118 Will be saving as {MeshName}
	{% if MeshName == "INSITU" or MeshToApply == "NONE" or MeshToApply == "ADAPTIVE" %}
	{action_respond_info("Mesh requires a proper name, specify via cli or change printer.cfg MeshToApply definition.")}
	{% else %}
	{% set defaultWN = printer["gcode_macro globalvariables"].defaultwarmnozzle|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set defaultSOAK = printer["gcode_macro globalvariables"].hotmeshsoakminutes|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	{% set SOAK = params.SOAK|default(defaultSOAK)|float %}
	SET_LED LED=nozzle RED=.2 GREEN=.2 BLUE=1
	
	M140 S{BED_TEMP}
	M104 S{defaultWN}
	G90
	
	SET_GCODE_OFFSET Z=0.0
	M117 Performing initial homing.
	{% if printer["gcode_macro globalvariables"].qglbeforesoakmesh|default() == true %}
	G32
	
	PARK_Center
	{% else %}
	G28
	
	{% endif %}
	M117 Bringing bed to temperature.
	M190 S{BED_TEMP}
	_HEAT_WAIT MINUTES={SOAK} MSG="Pre BED_MESH_CALIBRATE Soaking..."
	SET_LED LED=nozzle RED=.5 GREEN=0 BLUE=.5
	M117 Performing hot level.
	CURRENT_HIGH
	M400
	M401
	QUAD_GANTRY_LEVEL_ORIGINAL
	G28 GOT_PROBE:TRUE KEEP_PROBE:TRUE
	M117 Performing heated bed mesh calibration.
	BED_MESH_PROFILE REMOVE={MeshName}
	BED_MESH_CALIBRATE_ORIGINAL
	BED_MESH_PROFILE SAVE={MeshName}
	BED_MESH_OUTPUT PGP=1
	M118 Bed mesh calibration completed.
	TURN_OFF_HEATERS
	CURRENT_NORMAL
	M402
	PARK_UpperRight
	M18 X Y E
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	M117 Finished mesh, saved as {MeshName}.
	SAVE_CONFIG
	{% endif %}
	{% endif %}

[gcode_macro TUNE_PA_CAL]
description = Prints a Pressure Advance panel to help determine correct PA
gcode = 
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set BED = params.BED|default(defaultTB)|float %}
	{% set EXTRUDER = params.EXTRUDER|default(defaultTN)|float %}
	{% set PA_START = params.PA_START|default(0.0)|float %}
	{% set PA_STEP = params.PA_STEP|default(0.005)|float %}
	{% set NZL_CFG = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
	{% set NZL = params.NZL|default(NZL_CFG)|float %}
	{% set E20 = (0.1147475 * NZL) * 20|float %}
	{% set E40 = (0.1147475 * NZL) * 40|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	PRINT_START BED_TEMP={BED} EXTRUDER_TEMP={EXTRUDER}
	
	M220 S100
	M221 S100
	G21
	G90
	M83
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].limitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].limitdecel|float}
	G92 E0
	M106 S0
	G1 X{(X_MID-40)} Y{(Y_MID-65)} F30000
	G1 Z0.25 F300
	G1 E0.75 F1800
	G1 X{(X_MID-20)} Y{(Y_MID-65)} E{E20} F300
	G1 X{(X_MID+20)} Y{(Y_MID-65)} E{E40} F9000
	G1 X{(X_MID+40)} Y{(Y_MID-65)} E{E20} F300
	G1 E-0.75 F1800
	G1 Z1 F300
	{% for i in range(0, 20) %}
	SET_PRESSURE_ADVANCE ADVANCE={PA_START + (i * PA_STEP)}
	M117 Testing Pressure Advance at: {PA_START + (i * PA_STEP)}
	G1 X{(X_MID-40)} Y{(Y_MID-35)+(5*i)} F30000
	G1 Z0.25 F300
	G1 E0.75 F1800
	G1 X{(X_MID-20)} Y{(Y_MID-35)+(5*i)} E{E20} F300
	G1 X{(X_MID+20)} Y{(Y_MID-35)+(5*i)} E{E40} F9000
	G1 X{(X_MID+40)} Y{(Y_MID-35)+(5*i)} E{E20} F300
	G1 E-0.75 F1800
	G1 Z1 F300
	{% endfor %}
	M117 Find best line and multiply it by ({PA_START} + (line * {PA_STEP}) ) to find your PA setting.
	M118 Find best line and multiply it by ({PA_START} + (line * {PA_STEP}) ) to find your PA setting.
	PRINT_END
	{% endif %}

[gcode_macro TUNE_PID_BED]
description = Performs bed PID tune
gcode = 
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	{% set FAN_SPEED = params.FAN_SPEED|default(64)|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=0
	G90
	M117 Performing initial homing.
	G32
	G1 Z5 Y{Y_MID} X{X_MID} F4000
	M106 S{FAN_SPEED}
	M117 Starting PID calibration.
	PID_CALIBRATE HEATER=heater_bed TARGET={BED_TEMP}
	M117 Finished PID calibration.
	TURN_OFF_HEATERS
	CURRENT_NORMAL
	PARK_UpperRight
	M18 X Y E
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	_COOL_WAIT MINUTES=1
	SAVE_CONFIG
	{% endif %}

[gcode_macro TUNE_PID_NZL]
description = Performs nozzle PID tune
gcode = 
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set FAN_SPEED = params.FAN_SPEED|default(64)|float %}
	{% set SOAK_MINUTES = params.SOAK_MINUTES|default(12)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	{% set NZL_TEMP = params.NZL_TEMP|default(defaultTN)|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=0
	G90
	M117 Performing initial homing.
	G32
	G1 Z5 Y{Y_MID} X{X_MID} F4000
	M117 Bringing bed to temperature.
	M190 S{BED_TEMP}
	_HEAT_WAIT MINUTES={SOAK_MINUTES} MSG="Pre NZL_PID Soaking..."
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=0
	M106 S{FAN_SPEED}
	M117 Starting PID calibration.
	PID_CALIBRATE HEATER=extruder TARGET={NZL_TEMP}
	M117 Finished PID calibration.
	TURN_OFF_HEATERS
	G90
	PARK_UpperRight
	M18 X Y E
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintparkcool|float}
	SAVE_CONFIG
	{% endif %}

[gcode_macro _HEAT_WAIT]
description = Heating cycle waiting routine
gcode = 
	{% set MINUTES = params.MINUTES|default(10)|int %}
	{% set MSG = params.MSG|default("Warming...")|string %}
	{% for i in range(0, MINUTES) %}
	M117 {MSG} {MINUTES-i} minute remaining.
	{% for s in range(0, 60) %}
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
	G4 P500
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=0 BLUE=0
	G4 P500
	{% endfor %}
	{% endfor %}

[gcode_macro _COOL_WAIT]
description = Cooling cycle waiting routine
gcode = 
	M106 S250
	{% set MINUTES = params.MINUTES|default(1)|int %}
	{% set MSG = params.MSG|default("Cooling...")|string %}
	{% for i in range(0, MINUTES) %}
	M117 {MSG} {MINUTES-i} minute remaining.
	{% for s in range(0, 60) %}
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
	G4 P500
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=0
	G4 P500
	{% endfor %}
	{% endfor %}
	M107

[gcode_macro _WAIT_Variable]
variable_count = 300
variable_duration = 2
variable_waiting = False
variable_ready = 200
variable_temp = 250
variable_filazcomp = 0
gcode = 

[delayed_gcode WAIT_Delayed]
gcode = 
	{% set count = printer["gcode_macro _WAIT_Variable"].count|int %}
	{% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
	M117 Pre-Print Heatsoaking... {((duration * count) / 60)|round(1)} minutes left.
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count-1}
	{% if count > 0 %} _WAIT_Loop  {% endif %}
	{% if count == 0 %}
	
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=False
	_PRINT_START2
	{% endif %}

[gcode_macro _WAIT_Loop]
gcode = 
	{% set count = printer["gcode_macro _WAIT_Variable"].count|int %}
	{% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
	UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration}
	{% if  count % 2 == 0 %}
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
	{% else %}
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=0 BLUE=0
	{% endif %}

[gcode_macro _WAIT_Start]
gcode = 
	{% set MINUTES = params.MINUTES|default(15)|int %}
	{% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
	{% set count = (MINUTES * 60) / duration %}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=True
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count}
	UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration}
	PAUSE_BASE

[gcode_macro WAIT_Quit]
gcode = 
	{% if printer["gcode_macro _WAIT_Variable"].waiting %}
	M118 STOPPING LOOP, SETTING COUNT TO 0
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE=0
	UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION=1
	{% else %}
	M118 Not in waiting state, nothing to do.
	{% endif %}

[firmware_retraction]
retract_length = 0.5
retract_speed = 30
unretract_extra_length = 0
unretract_speed = 30

[gcode_macro globalvariables]
variable_limitaccel = 3501
variable_limitdecel = 1751
variable_defaulttempnozzle = 235
variable_defaultreadynozzle = 210
variable_defaultwarmnozzle = 160
variable_defaulttempbed = 110
variable_defaultenclosure = 40
variable_meshtoapply = "ADAPTIVE"
variable_qglbeforesoakmesh = True
variable_qglbeforesoakprint = True
variable_hotmeshsoakminutes = 20
variable_preprintsoakminutes = 15
variable_insitumeshsoakminutes = 01
variable_postprintcool = 1
variable_postprintparkcool = 2
variable_purgeretract = 0.1
variable_endretract = 2.0
variable_nplimitaccel = 3500
variable_nplimitdecel = 1750
variable_printcurrentxy = 1.1
variable_printcurrentz = 0.8
variable_parkheightpercentage = 0.50
variable_euclidx = 0
variable_euclidy = 355
variable_euclidswipex = 50
variable_euclidcleary = 325
variable_zprobespeed = 5.0
variable_zprobesamples = 7
variable_zprobetolerance = 0.050
variable_zproberetract = 1.5
variable_adxlsoakminutes = 30
gcode = 
	M117 Happy Printing!

[input_shaper]
shaper_type_x = 3hump_ei
shaper_freq_x = 83.8
shaper_type_y = mzv
shaper_freq_y = 37.2

[bed_mesh default]
version = 1
points = 
	0.053750, 0.055000, 0.023750, 0.087500, 0.033750, 0.060000, 0.055000
	0.025000, 0.013750, 0.008750, 0.020000, 0.020000, 0.037500, 0.040000
	0.000000, 0.003750, -0.053750, -0.003750, -0.041250, 0.021250, 0.007500
	0.007500, -0.008750, -0.022500, 0.000000, -0.005000, 0.007500, 0.007500
	0.008750, 0.007500, -0.046250, -0.007500, -0.040000, 0.017500, 0.003750
	0.043750, 0.022500, 0.006250, 0.002500, 0.011250, 0.032500, 0.031250
	0.057500, 0.041250, 0.025000, 0.023750, 0.027500, 0.050000, 0.051250
tension = 0.2
min_x = 40.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 40.0
x_count = 7
max_y = 310.0
mesh_x_pps = 2
max_x = 310.0

[bed_mesh MESH110]
version = 1
points = 
	0.053750, 0.055000, 0.023750, 0.087500, 0.033750, 0.060000, 0.055000
	0.025000, 0.013750, 0.008750, 0.020000, 0.020000, 0.037500, 0.040000
	0.000000, 0.003750, -0.053750, -0.003750, -0.041250, 0.021250, 0.007500
	0.007500, -0.008750, -0.022500, 0.000000, -0.005000, 0.007500, 0.007500
	0.008750, 0.007500, -0.046250, -0.007500, -0.040000, 0.017500, 0.003750
	0.043750, 0.022500, 0.006250, 0.002500, 0.011250, 0.032500, 0.031250
	0.057500, 0.041250, 0.025000, 0.023750, 0.027500, 0.050000, 0.051250
tension = 0.2
min_x = 40.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 40.0
x_count = 7
max_y = 310.0
mesh_x_pps = 2
max_x = 310.0
=======================
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 141, in _read_config
    self.load_object(config, section_config.get_name(), None)
  File "/home/pi/klipper/klippy/klippy.py", line 130, in load_object
    self.objects[section] = init_func(config.getsection(section))
  File "/home/pi/klipper/klippy/extras/fan.py", line 121, in load_config
    return PrinterFan(config)
  File "/home/pi/klipper/klippy/extras/fan.py", line 105, in __init__
    self.fan = Fan(config)
  File "/home/pi/klipper/klippy/extras/fan.py", line 27, in __init__
    self.mcu_fan = ppins.setup_pin('pwm', config.get('pin'))
  File "/home/pi/klipper/klippy/pins.py", line 117, in setup_pin
    pin_params = self.lookup_pin(pin_desc, can_invert, can_pullup)
  File "/home/pi/klipper/klippy/pins.py", line 98, in lookup_pin
    pin_params = self.parse_pin(pin_desc, can_invert, can_pullup)
  File "/home/pi/klipper/klippy/pins.py", line 83, in parse_pin
    raise error("Unknown pin chip name '%s'" % (chip_name,))
pins.error: Unknown pin chip name 'rpi'
webhooks client 3044312592: New connection
webhooks client 3044312592: Client info {'program': 'Moonraker', 'version': 'v0.8.0-23-g18f5ff4'}
Unable to issue reset command on MCU 'mcu'
Unable to issue reset command on MCU 'sht36v2'
webhooks client 3044312592: Disconnected
Restarting printer
Start printer at Thu Mar  2 22:53:34 2023 (1677797614.9 1687.2)
===== Config file =====
[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_39003000105053424E363620-if00
restart_method = command

[mcu sht36v2]
canbus_uuid = 3388e21717f3

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.70
min_temp = 0
max_temp = 120
control = pid
pid_kp = 58.437
pid_ki = 2.347
pid_kd = 363.769
pwm_cycle_time = 0.0166

[extruder]
step_pin = sht36v2:PB4
dir_pin = sht36v2:PB3
enable_pin = !sht36v2:PA15
rotation_distance = 22.6789511
gear_ratio = 50:17
microsteps = 32
full_steps_per_rotation = 200
filament_diameter = 1.75
heater_pin = sht36v2:PA8
sensor_type = 104NT-4-RO25H42G
sensor_pin = sht36v2:PA3
min_temp = 10
max_temp = 270
max_power = 1.0
min_extrude_temp = 170
control = pid
pid_kp = 26.213
pid_ki = 1.304
pid_kd = 131.721
nozzle_diameter = 0.4
pressure_advance = 0.055
pressure_advance_smooth_time = 0.030

[tmc2209 extruder]
uart_pin = sht36v2:PB5
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan]
pin = gpio18
max_power = 1
cycle_time = 0.002
hardware_pwm = false
shutdown_speed = 0

[heater_fan hotend_fan]
pin = sht36v2:PB10
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = .7

[heater_fan exhaust_fan]
pin = PD15
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0
heater = heater_bed
heater_temp = 60
fan_speed = 1.0

[fan_generic fan]
pin = sht36v2:PB11

[multi_pin controller_fan_pins]
pins = PD14, PD13

[controller_fan controller_fan]
pin = controller_fan_pins
kick_start_time = 0.5
heater = heater_bed, extruder
stepper = X, Y, Z, Z1, Z2, Z3
fan_speed = 0.6

[temperature_sensor Octopus]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor RaspberryPi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor Enclosure]
sensor_type = ATC Semitec 104GT-2
sensor_pin = sht36v2:PA4
min_temp = -50
max_temp = 350

[temperature_sensor Fly-SHT]
sensor_type = temperature_mcu
sensor_mcu = sht36v2

[printer]
kinematics = corexy
max_velocity = 700
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 10.0

[virtual_sdcard]
path = ~/gcode_files

[display_status]

[pause_resume]

[respond]
default_type = echo

[idle_timeout]
timeout = 1800

[quad_gantry_level]
gantry_corners = 
	
	
	
	
	
	
	-80,-22
	390,408
points = 
	
	
	
	
	
	
	
	
	
	
	25,0
	25,280
	310,280
	310,0
speed = 75
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 15

[bed_mesh]
speed = 50
horizontal_move_z = 10
mesh_min = 40, 40
mesh_max = 270, 290
probe_count = 7, 7
mesh_pps = 2, 2
algorithm = bicubic
relative_reference_index = 24

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = !PG6
position_min = 0
position_endstop = 310
position_max = 310
homing_speed = 60
second_homing_speed = 10
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = false
run_current = 0.4
sense_resistor = 0.105
stealthchop_threshold = 0

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = !PG9
position_min = 0
position_endstop = 330
position_max = 330
homing_speed = 60
second_homing_speed = 10
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = false
run_current = 0.4
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PF11
dir_pin = PG3
enable_pin = !PG5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32
endstop_pin = probe:z_virtual_endstop
position_max = 250
position_min = -5
homing_speed = 4
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = PF10
enable_pin = !PG2
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[gcode_macro _ADAPTIVE_MESH_VARIABLES]
variable_ready = False
variable_do_mesh = False
variable_do_nominal = False
variable_mesh_min = 0,0
variable_mesh_max = 0,0
variable_mesh_center = 0,0
variable_mesh_xcenter = 0
variable_mesh_ycenter = 0
variable_obj_min_y = 0
variable_obj_min_x = 0
variable_probe_count = 0,0
variable_rri = 0
variable_algo = "bicubic"
gcode = 

[gcode_macro _COMPUTE_MESH_PARAMETERS]
description = Compute the mesh parameters and store them for later use
gcode = 
	
	{% set xMinConf, yMinConf = printer["configfile"].config["bed_mesh"]["mesh_min"].split(',')|map('trim')|map('int') %}
	{% set xMaxConf, yMaxConf = printer["configfile"].config["bed_mesh"]["mesh_max"].split(',')|map('trim')|map('int') %}
	{% set xProbeCntConf, yProbeCntConf = printer["configfile"].config["bed_mesh"]["probe_count"].split(',')|map('trim')|map('int') %}
	{% set algo = printer["configfile"].config["bed_mesh"]["algorithm"]|lower %}
	{% set xMeshPPS, yMeshPPS = (printer["configfile"].config["bed_mesh"]["mesh_pps"] | default('2,2')).split(',')|map('trim')|map('int') %}
	
	
	
	{% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
	
	
	{% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
	{% set margin = params.MARGIN|default(5)|int %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=obj_min_y VALUE={yMinSpec}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=obj_min_x VALUE={xMinSpec}
	
	
	
	
	{% set xMin = [xMinConf, (xMinSpec - margin)]|max %}
	{% set xMax = [xMaxConf, (xMaxSpec + margin)]|min %}
	{% set yMin = [yMinConf, (yMinSpec - margin)]|max %}
	{% set yMax = [yMaxConf, (yMaxSpec + margin)]|min %}
	
	
	
	
	{% set xProbeCnt = ((xMax - xMin) * xProbeCntConf / (xMaxConf - xMinConf))|round(0, 'ceil')|int %}
	{% set yProbeCnt = ((yMax - yMin) * yProbeCntConf / (yMaxConf - yMinConf))|round(0, 'ceil')|int %}
	
	
	
	
	
	
	
	
	{% if xProbeCnt < 3 and yProbeCnt < 3 %}
	RESPOND MSG="Computed mesh parameters: none, bed mesh not needed"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={False}
	
	{% set xCenter = xMin + ((xMax - xMin) / 2) %}
	{% set yCenter = yMin + ((yMax - yMin) / 2) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_xcenter VALUE={xCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_ycenter VALUE={yCenter}
	M118 ADAPTIVE: X_Center: {xCenter}, Y_Center: {yCenter}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	{% else %}
	{% set xProbeCnt = [3, xProbeCnt]|max %}
	{% set yProbeCnt = [3, yProbeCnt]|max %}
	
	
	
	{% if xProbeCnt % 2 == 0 %}
	{% set xProbeCnt = xProbeCnt + 1 %}
	{% endif %}
	{% if yProbeCnt % 2 == 0 %}
	{% set yProbeCnt = yProbeCnt + 1 %}
	{% endif %}
	
	
	{% if xMeshPPS != 0 or yMeshPPS != 0 %}
	{% set probeCntMin = [xProbeCnt, yProbeCnt]|min %}
	{% set probeCntMax = [xProbeCnt, yProbeCnt]|max %}
	{% if algo == "lagrange" and probeCntMax > 6 %}
	
	{% set algo = "bicubic" %}
	{% endif %}
	{% if algo == "bicubic" and probeCntMin < 4 %}
	{% if probeCntMax > 6 %}
	
	{% if xProbeCnt > yProbeCnt %}
	{% set yProbeCnt = 5 %}
	{% else %}
	{% set xProbeCnt = 5 %}
	{% endif %}
	{% else %}
	
	{% set algo = "lagrange" %}
	{% endif %}
	{% endif %}
	{% endif %}
	
	
	{% set rRefIndex = (((xProbeCnt * yProbeCnt) - 1) / 2)|int %}
	{% set xCenter = xMin + ((xMax - xMin) / 2) %}
	{% set yCenter = yMin + ((yMax - yMin) / 2) %}
	
	
	{% set mesh_min = "%d,%d"|format(xMin, yMin) %}
	{% set mesh_max = "%d,%d"|format(xMax, yMax) %}
	{% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} MESH_CENTER={mesh_center} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_xcenter VALUE={xCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_ycenter VALUE={yCenter}
	M118 ADAPTIVE: X_Center: {xCenter}, Y_Center: {yCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=rri VALUE={rRefIndex}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
	{% endif %}
	{% else %}
	RESPOND MSG="Computed mesh parameters: none, going for a nominal bed mesh"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={True}
	
	{% set xCenter = xMinConf + ((xMaxConf - xMinConf) / 2) %}
	{% set yCenter = yMinConf + ((yMaxConf - yMinConf) / 2) %}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={True}

[gcode_macro _ADAPTIVE_BED_MESH]
description = Perform a bed mesh, but only where and when it's needed
gcode = 
	{% set ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home printer first!") }
	{% endif %}
	
	
	{% if ready %}
	_DO_ADAPTIVE_MESH
	
	
	
	{% else %}
	RESPOND MSG="Adaptive bed mesh: parameters not computed, automatically calling the COMPUTE_MESH_PARAMETERS macro prior to the mesh"
	_COMPUTE_MESH_PARAMETERS {rawparams}
	M400
	_DO_ADAPTIVE_MESH
	{% endif %}

[gcode_macro _DO_ADAPTIVE_MESH]
gcode = 
	
	{% set do_mesh = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_mesh %}
	{% set do_nominal = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_nominal %}
	{% set mesh_min = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_min %}
	{% set mesh_max = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_max %}
	{% set probe_count = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].probe_count %}
	{% set rRefIndex = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].rri %}
	{% set algo = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].algo %}
	
	
	
	
	{% if do_mesh %}
	
	{% if do_nominal %}
	RESPOND MSG="Adaptive bed mesh: nominal bed mesh"
	BED_MESH_CALIBRATE_ORIGINAL
	{% else %}
	RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
	BED_MESH_CALIBRATE_ORIGINAL MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}
	{% endif %}
	{% else %}
	RESPOND MSG="Adaptive bed mesh: no mesh to be done"
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={False}

[gcode_macro CURRENT_HIGH]
description = Raises stepper current for printing routine
gcode = 
	M117 Increased motor currents.
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro globalvariables"].printcurrentxy|float}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro globalvariables"].printcurrentxy|float}
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}

[gcode_macro CURRENT_NORMAL]
description = Lowers stepper current for NON-printing routines
gcode = 
	M117 Decreased motor currents.
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={ printer.configfile.config["tmc2209 stepper_x"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={ printer.configfile.config["tmc2209 stepper_y"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={ printer.configfile.config["tmc2209 stepper_z"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={ printer.configfile.config["tmc2209 stepper_z1"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={ printer.configfile.config["tmc2209 stepper_z2"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={ printer.configfile.config["tmc2209 stepper_z3"]["run_current"] }

[force_move]
enable_force_move = true

[probe]
pin = PG11sht36v2:PA1
x_offset = -21.2
y_offset = 37.5
speed = 3.0
lift_speed = 10.0
samples = 5
samples_result = median
sample_retract_dist = 2.0
samples_tolerance = 0.010
samples_tolerance_retries = 5
z_offset = 8.60

[homing_override]
axes = z
gcode = 
	{% set KEEP_PROBE = params.KEEP_PROBE|default(FALSE) %}
	{% set GOT_PROBE = params.GOT_PROBE|default(FALSE) %}
	{% set ONLY_Z = params.ONLY_Z|default(FALSE) %}
	{% set Z_POS = printer.toolhead.position.z %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set X_PROBEOFFSET = printer.configfile.config["probe"]["x_offset"]|float %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set Y_PROBEOFFSET = printer.configfile.config["probe"]["y_offset"]|float %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	SET_KINEMATIC_POSITION Z=0
	G0 Z15 F3600
	{% else %}
	{% if Z_POS < 15 %}
	G90
	G0 Z15
	{% else %}
	G91
	G0 Z1 F3600
	G90
	{% endif %}
	{% endif %}
	G90
	M118 Currently homed: { printer.toolhead.homed_axes }
	{% if printer.toolhead.homed_axes == "xyz" and ONLY_Z %}
	M118 Re-Homing skipped on X & Y.
	{% else %}
	G28 X Y
	{% endif %}
	{% if GOT_PROBE == FALSE %}
	M401
	{% endif %}
	G0 X{(X_MID - X_PROBEOFFSET)} Y{(Y_MID - Y_PROBEOFFSET)} F4000
	G28 Z
	G0 Z15 F3600
	{% if KEEP_PROBE == FALSE %}
	M402
	{% endif %}

[gcode_macro M401]
description = Deploys the Euclid probe
gcode = 
	QUERY_PROBE
	{% set Z_POS = printer.toolhead.position.z %}
	{% if printer.probe.last_query %}
	M118 Fetching Euclid Probe.
	{% if printer.toolhead.homed_axes != "xyz" %}
	SET_KINEMATIC_POSITION Z=0
	G0 Z15 F3600
	G28X
	G28Y
	{% endif %}
	G90
	{% if Z_POS < 15 %} G0 Z15 {% endif %}
	_PROBE_DEPLOY
	{% else %}
	M118 ?!Attempted to Deploy probe but it is already attached.
	{% endif %}

[gcode_macro M402]
description = Stows the Euclid probe
gcode = 
	QUERY_PROBE
	{% set Z_POS = printer.toolhead.position.z %}
	{% if not printer.probe.last_query %}
	M118 Stowing Euclid Probe.
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	{% if Z_POS < 15 %} G0 Z15 {% endif %}
	_PROBE_STOW
	{% else %}
	M118 ?!Attempted to Stow probe but it is not attached.
	{% endif %}

[gcode_macro _PROBE_DEPLOY]
gcode = 
	G90
	G0 Y{printer["gcode_macro globalvariables"].euclidcleary|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidx|float} F4000
	G0 Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} F4000
	_error_if_probe_not_deployed

[gcode_macro _PROBE_STOW]
gcode = 
	G90
	G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} F4000
	G0 Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidx|float} F2000
	G0 Y{printer["gcode_macro globalvariables"].euclidcleary|float} F4000
	_error_if_probe_deployed

[gcode_macro _do_error_if_probe_deployed]
gcode = 
	{% if not printer.probe.last_query %}
	{action_raise_error("ERROR: Probe is still deployed, please remove and return to dock.")}
	{% else %}
	M118 Euclid probe has been stowed.
	{% endif %}

[gcode_macro _error_if_probe_deployed]
gcode = 
	G4 P300
	QUERY_PROBE
	_do_error_if_probe_deployed

[gcode_macro _do_error_if_probe_not_deployed]
gcode = 
	{% if printer.probe.last_query %}
	{action_raise_error("ERROR: Probe unsuccessfully deployed, please check printer.")}
	{% else %}
	M118 Euclid probe has been attached.
	{% endif %}

[gcode_macro _error_if_probe_not_deployed]
gcode = 
	G4 P300
	QUERY_PROBE
	_do_error_if_probe_not_deployed

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_ORIGINAL
description = Levels the four Z-axis gantry corners
gcode = 
	{% if printer.toolhead.homed_axes != "xyz" %}
	G28 KEEP_PROBE:TRUE
	{% endif %}
	M401
	QUAD_GANTRY_LEVEL_ORIGINAL
	M402

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIGINAL
description = Performs bed mesh
gcode = 
	QUERY_PROBE
	M401
	BED_MESH_CALIBRATE_ORIGINAL
	M402

[gcode_macro G32]
description = Clears bed-mesh and performs G28, QGL, G28
gcode = 
	BED_MESH_CLEAR
	G28 KEEP_PROBE:TRUE
	QUAD_GANTRY_LEVEL_ORIGINAL
	G28 GOT_PROBE:TRUE
	QUERY_PROBE

[gcode_macro G3201]
description = Clears bed-mesh and performs G28, QGL, G28-Z, Probes Center, and applies bed-mesh
gcode = 
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set X_MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_xcenter|float %}
	{% set Y_MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_ycenter|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set X_PROBEOFFSET = printer.configfile.config["probe"]["x_offset"]|float %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set Y_PROBEOFFSET = printer.configfile.config["probe"]["y_offset"]|float %}
	{% set ZSpeed = printer["gcode_macro globalvariables"].zprobespeed|float %}
	{% set ZSamples = printer["gcode_macro globalvariables"].zprobesamples|int %}
	{% set ZTolerance = printer["gcode_macro globalvariables"].zprobetolerance|float %}
	{% set ZRetract = printer["gcode_macro globalvariables"].zproberetract|float %}
	{% set S_Retries = printer.configfile.config["probe"]["samples_tolerance_retries"]|int %}
	BED_MESH_CLEAR
	G28 KEEP_PROBE:TRUE
	QUAD_GANTRY_LEVEL_ORIGINAL
	G0 Z15 F3600
	{% if MeshToApply == "ADAPTIVE" %}
	G0 X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} F4000
	M118 ADAPTIVE: Moving to X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} to probe Z0.
	{% else %}
	G0 X{(X_MID - X_PROBEOFFSET)} Y{(Y_MID - Y_PROBEOFFSET)} F4000
	M118 Moving to X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} to probe Z0.
	{% endif %}
	PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries={S_Retries} sample_retract_dist={ZRetract}
	_CHECK_PROBE3201

[gcode_macro _CHECK_PROBE3201]
gcode = 
	{% set PASS = printer.probe.last_z_result %}
	{% set ZP_CAL = printer.configfile.config["probe"]["z_offset"]|float %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set Z_POS = printer.toolhead.position.z|float %}
	{% set Z_DIFFERENCE = PASS - ZP_CAL|float %}
	{% set NEW_CURRENT_Z = (Z_POS - Z_DIFFERENCE) %}
	M118 Current Probing is: {PASS}
	M118 Z-Probe Offset is: {ZP_CAL}
	M118 Difference: {Z_DIFFERENCE}
	M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
	SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
	G4 P100
	M118 Moving nozzle to newly adjusted Z15.
	G0 Z15 F500
	G4 P1000
	{% if MeshToApply != "NONE" %}
	{% if MeshToApply == "INSITU" %}
	M118 Performing INSITU Mesh.
	BED_MESH_CALIBRATE_ORIGINAL
	BED_MESH_PROFILE SAVE=INSITU
	{% elif MeshToApply == "ADAPTIVE" %}
	M118 Performing ADAPTIVE Mesh.
	_ADAPTIVE_BED_MESH
	{% else %}
	M118 Applied {MeshToApply} Mesh.
	BED_MESH_PROFILE LOAD={MeshToApply}
	{% endif %}
	{% endif %}
	QUERY_PROBE
	{% if not printer.probe.last_query %}
	M118 Stowing Euclid Probe.
	_PROBE_STOW
	{% else %}
	M118 ?!Probe is not attached.
	{% endif %}

[gcode_macro FILAMENT_LOAD]
description = Loads filament
gcode = 
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{% if printer.idle_timeout.state == "Printing" and printer.pause_resume.is_paused %}
	SAVE_GCODE_STATE NAME=HLF_state
	M83
	G0 X{X_MID} Y20 F4000
	G0 E50 F400
	G0 E50 F400
	G0 E50 F200
	G1 E-0.5 F1800
	G92 E0
	M400
	RESTORE_GCODE_STATE NAME=HLF_state
	{% else %}
	{action_respond_info("Pause print first.")}
	{% endif %}
	{% else %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	M117 Performing required homing.
	G28
	{% endif %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set TEMP = params.TEMP|default(defaultTN)|float %}
	M117 Heating nozzle to LOAD filamnet.
	G90
	G0 X{X_MID} Y20 Z90 F4000
	M109 S{TEMP}
	M83
	G0 E50 F400
	G0 E50 F400
	G0 E50 F200
	G1 E-0.5 F1800
	G92 E0
	M400
	PARK_UpperRight
	
	TURN_OFF_HEATERS
	M117 Finished filament load.
	{% endif %}

[gcode_macro FILAMENT_UNLOAD]
description = UNloads filament
gcode = 
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{% if printer.idle_timeout.state == "Printing" and printer.pause_resume.is_paused %}
	SAVE_GCODE_STATE NAME=HUF_state
	M83
	G0 X{X_MID} Y20 F4000
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G92 E0
	M400
	RESTORE_GCODE_STATE NAME=HUF_state
	{% else %}
	{action_respond_info("Pause print first.")}
	{% endif %}
	{% else %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	M117 Performing required homing.
	G28
	{% endif %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set TEMP = params.TEMP|default(defaultTN)|float %}
	M117 Heating nozzle to UNLOAD filamnet.
	G90
	G0 X{X_MID} Y20 Z90 F4000
	M109 S{TEMP}
	M83
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G92 E0
	M400
	PARK_UpperRight
	
	TURN_OFF_HEATERS
	M117 Finished filament unload.
	{% endif %}

[gcode_macro PARK_UpperRight]
description = Parks the toolhead in the upper-right position
gcode = 
	{% set Z_MAX = printer.configfile.config["stepper_z"]["position_max"]|float -1 %}
	{% set X_MAX = printer.configfile.config["stepper_x"]["position_max"]|float -1 %}
	{% set Z_POS = printer.toolhead.position.z + 10 %}
	{% set defaultParkHeight = printer["gcode_macro globalvariables"].parkheightpercentage|float %}
	{% set ParkHeight = params.PARK_HEIGHT_PERCENT|default(defaultParkHeight)|float %}
	{% if ParkHeight < 0.2  %}
	{% set ParkHeight = 0.2 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCORNER_state
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	G0 X{X_MAX} Y20 Z{ [(Z_MAX*ParkHeight), [Z_POS, Z_MAX]|min]|max } F4000
	RESTORE_GCODE_STATE NAME=PARKCORNER_state

[gcode_macro PARK_Center]
description = Parks the toolhead in the center position
gcode = 
	{% set Z = params.Z|default(40)|float %}
	SAVE_GCODE_STATE NAME=PARK_Center_state
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	G0 X{X_MID} Y{Y_MID} Z{Z} F4000
	RESTORE_GCODE_STATE NAME=PARK_Center_state

[delayed_gcode prerun]
initial_duration = 1
gcode = 
	{% set z_offset = printer.configfile.config["probe"]["z_offset"]|float %}
	{% set nozzle_diameter = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
	{% set pressure_advance = printer.configfile.config["extruder"]["pressure_advance"]|float %}
	{% set pressure_advance_smooth_time = printer.configfile.config["extruder"]["pressure_advance_smooth_time"]|float %}
	{% set mesh = printer["gcode_macro globalvariables"].meshtoapply %}
	
	QUERY_PROBE
	M117 Printer online.
	{% for s in range(0, 30) %}
	SET_LED LED=nozzle INDEX=1 RED=1 GREEN=0 BLUE=1
	SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=.5 BLUE=.5
	G4 P100
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=1
	G4 P50
	{% endfor %}
	M118 NOTE --> probe: TRIGGERED = Euclid probe NOT attached.
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].nplimitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].nplimitdecel|float}
	M118 Z-Offset is set at {z_offset}mm.
	M118 Nozzle diameter is set at {nozzle_diameter}mm.
	M118 Pressure Advance is set at {pressure_advance}.
	M118 Pressure advance Smooth Time is set at {pressure_advance_smooth_time}.
	M118 Mesh profile is {mesh}
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2

[gcode_macro PRINT_START]
description = Performs all needed moves prior to printing
gcode = 
	CLEAR_PAUSE
	BED_MESH_CLEAR
	M220 S100
	M221 S100
	SET_LED LED=nozzle RED=.2 GREEN=.2 BLUE=1
	{% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
	_COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set defaultWN = printer["gcode_macro globalvariables"].defaultwarmnozzle|float %}
	{% set defaultRN = printer["gcode_macro globalvariables"].defaultreadynozzle|float %}
	{% set defaultSOAK = printer["gcode_macro globalvariables"].preprintsoakminutes|float %}
	{% set defaultENCLOSURE = printer["gcode_macro globalvariables"].defaultenclosure|float %}
	{% set purgeRetract = printer["gcode_macro globalvariables"].purgeretract|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=ready VALUE={params.EXTRUDER_READY|default(defaultRN)|float}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=temp VALUE={params.EXTRUDER_TEMP|default(defaultTN)|float}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=filazcomp VALUE={params.FILAMENT_ZCOMP|default(0.00)|float}
	M118 gCode file passed filament offset of {params.FILAMENT_ZCOMP|default(0.00)|float}mm.
	
	{% set ENCLOSURE_TEMP = params.ENCLOSURE_TEMP|default(defaultENCLOSURE)|float %}
	{% set SOAK = params.SOAK|default(defaultSOAK) %}
	M118 gCode file passed the following to PRINT_START:
	M118 { rawparams }
	
	
	M140 S{BED_TEMP}
	M104 S{defaultWN}
	M141 S{ENCLOSURE_TEMP}
	G90
	G21
	M83
	G92 E0.0
	
	SET_GCODE_OFFSET Z=0.0
	M117 Performing initial homing.
	{% if printer["gcode_macro globalvariables"].qglbeforesoakprint|default() == true %}
	G32
	
	PARK_Center
	{% else %}
	G28
	
	{% endif %}
	M117 Bringing bed to temperature.
	SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
	M190 S{BED_TEMP}
	_WAIT_Start MINUTES={SOAK}

[gcode_macro _PRINT_START2]
description = Part 2 - Performs all needed moves prior to printing
gcode = 
	RESUME_BASE
	{% set EXTRUDER_READY = printer["gcode_macro _WAIT_Variable"].ready|int %}
	{% set EXTRUDER_TEMP = printer["gcode_macro _WAIT_Variable"].temp|int %}
	SET_LED LED=nozzle RED=.5 GREEN=0 BLUE=.5
	M117 Performing hot level.
	CURRENT_HIGH
	M400
	M104 S{EXTRUDER_READY}
	G3201
	M104 S{EXTRUDER_TEMP}
	G1 X0 Y20 F4000
	G1 Z1.5
	M117 Bringing nozzle to temperature.
	SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
	M109 S{EXTRUDER_TEMP}
	SET_LED LED=nozzle RED=1 GREEN=0 BLUE=0
	_FILAMENT_READY
	M117 Commencing print.
	M118 Commencing print.
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=.5

[gcode_macro _FILAMENT_READY]
description = Performs filament specific purgeline and readies for print
gcode = 
	{% set Z_POS = printer.toolhead.position.z|float %}
	{% set FILAMENT_ZCOMP = printer["gcode_macro _WAIT_Variable"].filazcomp|float %}
	{% set NEW_CURRENT_Z = (Z_POS - FILAMENT_ZCOMP|float) %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set Object_min_x = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].obj_min_x|float %}
	{% set Object_min_y = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].obj_min_y|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set NZLD = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
	{% set purgeRetract = printer["gcode_macro globalvariables"].purgeretract|float %}
	
	{% if FILAMENT_ZCOMP > 0.2 %}
	M118 FILAMENT_ZCOMP Offset > 0.2 - Ignoring FILAMENT_ZCOMP.
	{% elif FILAMENT_ZCOMP == 0 %}
	M118 FILAMENT_ZCOMP not set - Ignoring FILAMENT_ZCOMP.
	{% else %}
	M118 FILAMENT_ZCOMP Offset is: {FILAMENT_ZCOMP}
	M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
	SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
	G4 P1000
	M400
	{% endif %}
	
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].limitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].limitdecel|float}
	
	
	G1 X0 Y19.8 Z0.3 F1500.0
	G1 E{(12.5 * NZLD)} F3600
	M400
	G1 X0 Y0 Z0.3 F1500.0
	G1 X130 Y0.0 Z0.3 F1500.0 E{(37.5 * NZLD)}
	G1 X130 Y0.3 Z0.3 F5000.0
	G1 X010 Y0.3 Z0.3 F1500.0 E{(75.0 * NZLD)}
	M400
	G92 E0
	
	G1 E-{purgeRetract} F3000
	G1 Z1.0 F3000
	{% if MeshToApply == "ADAPTIVE" %}
	G0 X{Object_min_x} Y{Object_min_y} F8000
	{% else %}
	G0 X{X_MID} Y{Y_MID} F8000
	{% endif %}

[gcode_macro PRINT_END]
description = Performs all needed actions upon completion of printing
gcode = 
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].nplimitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].nplimitdecel|float}
	{% set EndRetract = printer["gcode_macro globalvariables"].endretract|float %}
	G91
	G0 Z5 F1000
	G90
	G92 E0
	G1 E-{EndRetract} F3600
	M400
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	M400
	TURN_OFF_HEATERS
	CURRENT_NORMAL
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintcool|float}
	PARK_UpperRight
	M18 X Y E
	M107
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintparkcool|float}
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	M117 Finished printing, check nozzle clear.
	M118 Finished printing, check nozzle clear.

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	{% set x = params.X|default(0) %}
	{% set y = params.Y|default(20) %}
	{% set z = params.Z|default(10)|float %}
	{% set e = params.E|default(1) %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% set lift_z = z|abs %}
	{% if act_z < (max_z - lift_z) %}
	{% set z_safe = lift_z %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	PAUSE_BASE
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E-{e} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe}
	G90
	G1 X{x} Y{y} F4000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	{% set e = params.E|default(1) %}
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E{e} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].nplimitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].nplimitdecel|float}
	{% set EndRetract = printer["gcode_macro globalvariables"].endretract|float %}
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	M400
	G92 E0
	G1 E-{EndRetract} F3600
	CLEAR_PAUSE
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE
	CURRENT_NORMAL
	M106 S250
	G90
	PARK_UpperRight
	M18 X Y E
	M107
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintparkcool|float}
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	M117 Cancelled print, check nozzle clear.
	M118 Cancelled print, check nozzle clear.

[gcode_macro TUNE_HOTMESH]
description = Performs a heat-soaked bed-mesh
gcode = 
	CLEAR_PAUSE
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set MeshName = params.NAME|default(MeshToApply) %}
	M118 Will be saving as {MeshName}
	{% if MeshName == "INSITU" or MeshToApply == "NONE" or MeshToApply == "ADAPTIVE" %}
	{action_respond_info("Mesh requires a proper name, specify via cli or change printer.cfg MeshToApply definition.")}
	{% else %}
	{% set defaultWN = printer["gcode_macro globalvariables"].defaultwarmnozzle|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set defaultSOAK = printer["gcode_macro globalvariables"].hotmeshsoakminutes|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	{% set SOAK = params.SOAK|default(defaultSOAK)|float %}
	SET_LED LED=nozzle RED=.2 GREEN=.2 BLUE=1
	
	M140 S{BED_TEMP}
	M104 S{defaultWN}
	G90
	
	SET_GCODE_OFFSET Z=0.0
	M117 Performing initial homing.
	{% if printer["gcode_macro globalvariables"].qglbeforesoakmesh|default() == true %}
	G32
	
	PARK_Center
	{% else %}
	G28
	
	{% endif %}
	M117 Bringing bed to temperature.
	M190 S{BED_TEMP}
	_HEAT_WAIT MINUTES={SOAK} MSG="Pre BED_MESH_CALIBRATE Soaking..."
	SET_LED LED=nozzle RED=.5 GREEN=0 BLUE=.5
	M117 Performing hot level.
	CURRENT_HIGH
	M400
	M401
	QUAD_GANTRY_LEVEL_ORIGINAL
	G28 GOT_PROBE:TRUE KEEP_PROBE:TRUE
	M117 Performing heated bed mesh calibration.
	BED_MESH_PROFILE REMOVE={MeshName}
	BED_MESH_CALIBRATE_ORIGINAL
	BED_MESH_PROFILE SAVE={MeshName}
	BED_MESH_OUTPUT PGP=1
	M118 Bed mesh calibration completed.
	TURN_OFF_HEATERS
	CURRENT_NORMAL
	M402
	PARK_UpperRight
	M18 X Y E
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	M117 Finished mesh, saved as {MeshName}.
	SAVE_CONFIG
	{% endif %}
	{% endif %}

[gcode_macro TUNE_PA_CAL]
description = Prints a Pressure Advance panel to help determine correct PA
gcode = 
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set BED = params.BED|default(defaultTB)|float %}
	{% set EXTRUDER = params.EXTRUDER|default(defaultTN)|float %}
	{% set PA_START = params.PA_START|default(0.0)|float %}
	{% set PA_STEP = params.PA_STEP|default(0.005)|float %}
	{% set NZL_CFG = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
	{% set NZL = params.NZL|default(NZL_CFG)|float %}
	{% set E20 = (0.1147475 * NZL) * 20|float %}
	{% set E40 = (0.1147475 * NZL) * 40|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	PRINT_START BED_TEMP={BED} EXTRUDER_TEMP={EXTRUDER}
	
	M220 S100
	M221 S100
	G21
	G90
	M83
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].limitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].limitdecel|float}
	G92 E0
	M106 S0
	G1 X{(X_MID-40)} Y{(Y_MID-65)} F30000
	G1 Z0.25 F300
	G1 E0.75 F1800
	G1 X{(X_MID-20)} Y{(Y_MID-65)} E{E20} F300
	G1 X{(X_MID+20)} Y{(Y_MID-65)} E{E40} F9000
	G1 X{(X_MID+40)} Y{(Y_MID-65)} E{E20} F300
	G1 E-0.75 F1800
	G1 Z1 F300
	{% for i in range(0, 20) %}
	SET_PRESSURE_ADVANCE ADVANCE={PA_START + (i * PA_STEP)}
	M117 Testing Pressure Advance at: {PA_START + (i * PA_STEP)}
	G1 X{(X_MID-40)} Y{(Y_MID-35)+(5*i)} F30000
	G1 Z0.25 F300
	G1 E0.75 F1800
	G1 X{(X_MID-20)} Y{(Y_MID-35)+(5*i)} E{E20} F300
	G1 X{(X_MID+20)} Y{(Y_MID-35)+(5*i)} E{E40} F9000
	G1 X{(X_MID+40)} Y{(Y_MID-35)+(5*i)} E{E20} F300
	G1 E-0.75 F1800
	G1 Z1 F300
	{% endfor %}
	M117 Find best line and multiply it by ({PA_START} + (line * {PA_STEP}) ) to find your PA setting.
	M118 Find best line and multiply it by ({PA_START} + (line * {PA_STEP}) ) to find your PA setting.
	PRINT_END
	{% endif %}

[gcode_macro TUNE_PID_BED]
description = Performs bed PID tune
gcode = 
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	{% set FAN_SPEED = params.FAN_SPEED|default(64)|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=0
	G90
	M117 Performing initial homing.
	G32
	G1 Z5 Y{Y_MID} X{X_MID} F4000
	M106 S{FAN_SPEED}
	M117 Starting PID calibration.
	PID_CALIBRATE HEATER=heater_bed TARGET={BED_TEMP}
	M117 Finished PID calibration.
	TURN_OFF_HEATERS
	CURRENT_NORMAL
	PARK_UpperRight
	M18 X Y E
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	_COOL_WAIT MINUTES=1
	SAVE_CONFIG
	{% endif %}

[gcode_macro TUNE_PID_NZL]
description = Performs nozzle PID tune
gcode = 
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set FAN_SPEED = params.FAN_SPEED|default(64)|float %}
	{% set SOAK_MINUTES = params.SOAK_MINUTES|default(12)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	{% set NZL_TEMP = params.NZL_TEMP|default(defaultTN)|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=0
	G90
	M117 Performing initial homing.
	G32
	G1 Z5 Y{Y_MID} X{X_MID} F4000
	M117 Bringing bed to temperature.
	M190 S{BED_TEMP}
	_HEAT_WAIT MINUTES={SOAK_MINUTES} MSG="Pre NZL_PID Soaking..."
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=0
	M106 S{FAN_SPEED}
	M117 Starting PID calibration.
	PID_CALIBRATE HEATER=extruder TARGET={NZL_TEMP}
	M117 Finished PID calibration.
	TURN_OFF_HEATERS
	G90
	PARK_UpperRight
	M18 X Y E
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintparkcool|float}
	SAVE_CONFIG
	{% endif %}

[gcode_macro _HEAT_WAIT]
description = Heating cycle waiting routine
gcode = 
	{% set MINUTES = params.MINUTES|default(10)|int %}
	{% set MSG = params.MSG|default("Warming...")|string %}
	{% for i in range(0, MINUTES) %}
	M117 {MSG} {MINUTES-i} minute remaining.
	{% for s in range(0, 60) %}
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
	G4 P500
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=0 BLUE=0
	G4 P500
	{% endfor %}
	{% endfor %}

[gcode_macro _COOL_WAIT]
description = Cooling cycle waiting routine
gcode = 
	M106 S250
	{% set MINUTES = params.MINUTES|default(1)|int %}
	{% set MSG = params.MSG|default("Cooling...")|string %}
	{% for i in range(0, MINUTES) %}
	M117 {MSG} {MINUTES-i} minute remaining.
	{% for s in range(0, 60) %}
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
	G4 P500
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=0
	G4 P500
	{% endfor %}
	{% endfor %}
	M107

[gcode_macro _WAIT_Variable]
variable_count = 300
variable_duration = 2
variable_waiting = False
variable_ready = 200
variable_temp = 250
variable_filazcomp = 0
gcode = 

[delayed_gcode WAIT_Delayed]
gcode = 
	{% set count = printer["gcode_macro _WAIT_Variable"].count|int %}
	{% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
	M117 Pre-Print Heatsoaking... {((duration * count) / 60)|round(1)} minutes left.
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count-1}
	{% if count > 0 %} _WAIT_Loop  {% endif %}
	{% if count == 0 %}
	
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=False
	_PRINT_START2
	{% endif %}

[gcode_macro _WAIT_Loop]
gcode = 
	{% set count = printer["gcode_macro _WAIT_Variable"].count|int %}
	{% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
	UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration}
	{% if  count % 2 == 0 %}
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
	{% else %}
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=0 BLUE=0
	{% endif %}

[gcode_macro _WAIT_Start]
gcode = 
	{% set MINUTES = params.MINUTES|default(15)|int %}
	{% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
	{% set count = (MINUTES * 60) / duration %}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=True
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count}
	UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration}
	PAUSE_BASE

[gcode_macro WAIT_Quit]
gcode = 
	{% if printer["gcode_macro _WAIT_Variable"].waiting %}
	M118 STOPPING LOOP, SETTING COUNT TO 0
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE=0
	UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION=1
	{% else %}
	M118 Not in waiting state, nothing to do.
	{% endif %}

[firmware_retraction]
retract_length = 0.5
retract_speed = 30
unretract_extra_length = 0
unretract_speed = 30

[gcode_macro globalvariables]
variable_limitaccel = 3501
variable_limitdecel = 1751
variable_defaulttempnozzle = 235
variable_defaultreadynozzle = 210
variable_defaultwarmnozzle = 160
variable_defaulttempbed = 110
variable_defaultenclosure = 40
variable_meshtoapply = "ADAPTIVE"
variable_qglbeforesoakmesh = True
variable_qglbeforesoakprint = True
variable_hotmeshsoakminutes = 20
variable_preprintsoakminutes = 15
variable_insitumeshsoakminutes = 01
variable_postprintcool = 1
variable_postprintparkcool = 2
variable_purgeretract = 0.1
variable_endretract = 2.0
variable_nplimitaccel = 3500
variable_nplimitdecel = 1750
variable_printcurrentxy = 1.1
variable_printcurrentz = 0.8
variable_parkheightpercentage = 0.50
variable_euclidx = 0
variable_euclidy = 355
variable_euclidswipex = 50
variable_euclidcleary = 325
variable_zprobespeed = 5.0
variable_zprobesamples = 7
variable_zprobetolerance = 0.050
variable_zproberetract = 1.5
variable_adxlsoakminutes = 30
gcode = 
	M117 Happy Printing!

[input_shaper]
shaper_type_x = 3hump_ei
shaper_freq_x = 83.8
shaper_type_y = mzv
shaper_freq_y = 37.2

[bed_mesh default]
version = 1
points = 
	0.053750, 0.055000, 0.023750, 0.087500, 0.033750, 0.060000, 0.055000
	0.025000, 0.013750, 0.008750, 0.020000, 0.020000, 0.037500, 0.040000
	0.000000, 0.003750, -0.053750, -0.003750, -0.041250, 0.021250, 0.007500
	0.007500, -0.008750, -0.022500, 0.000000, -0.005000, 0.007500, 0.007500
	0.008750, 0.007500, -0.046250, -0.007500, -0.040000, 0.017500, 0.003750
	0.043750, 0.022500, 0.006250, 0.002500, 0.011250, 0.032500, 0.031250
	0.057500, 0.041250, 0.025000, 0.023750, 0.027500, 0.050000, 0.051250
tension = 0.2
min_x = 40.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 40.0
x_count = 7
max_y = 310.0
mesh_x_pps = 2
max_x = 310.0

[bed_mesh MESH110]
version = 1
points = 
	0.053750, 0.055000, 0.023750, 0.087500, 0.033750, 0.060000, 0.055000
	0.025000, 0.013750, 0.008750, 0.020000, 0.020000, 0.037500, 0.040000
	0.000000, 0.003750, -0.053750, -0.003750, -0.041250, 0.021250, 0.007500
	0.007500, -0.008750, -0.022500, 0.000000, -0.005000, 0.007500, 0.007500
	0.008750, 0.007500, -0.046250, -0.007500, -0.040000, 0.017500, 0.003750
	0.043750, 0.022500, 0.006250, 0.002500, 0.011250, 0.032500, 0.031250
	0.057500, 0.041250, 0.025000, 0.023750, 0.027500, 0.050000, 0.051250
tension = 0.2
min_x = 40.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 40.0
x_count = 7
max_y = 310.0
mesh_x_pps = 2
max_x = 310.0
=======================
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 141, in _read_config
    self.load_object(config, section_config.get_name(), None)
  File "/home/pi/klipper/klippy/klippy.py", line 130, in load_object
    self.objects[section] = init_func(config.getsection(section))
  File "/home/pi/klipper/klippy/extras/probe.py", line 444, in load_config
    return PrinterProbe(config, ProbeEndstopWrapper(config))
  File "/home/pi/klipper/klippy/extras/probe.py", line 299, in __init__
    pin_params = ppins.lookup_pin(pin, can_invert=True, can_pullup=True)
  File "/home/pi/klipper/klippy/pins.py", line 98, in lookup_pin
    pin_params = self.parse_pin(pin_desc, can_invert, can_pullup)
  File "/home/pi/klipper/klippy/pins.py", line 83, in parse_pin
    raise error("Unknown pin chip name '%s'" % (chip_name,))
pins.error: Unknown pin chip name 'PG11sht36v2'
webhooks client 3044375904: New connection
webhooks client 3044375904: Client info {'program': 'Moonraker', 'version': 'v0.8.0-23-g18f5ff4'}
Unable to issue reset command on MCU 'mcu'
Unable to issue reset command on MCU 'sht36v2'
webhooks client 3044375904: Disconnected
Restarting printer
Start printer at Thu Mar  2 22:55:22 2023 (1677797722.2 1794.5)
===== Config file =====
[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_39003000105053424E363620-if00
restart_method = command

[mcu sht36v2]
canbus_uuid = 3388e21717f3

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.70
min_temp = 0
max_temp = 120
control = pid
pid_kp = 58.437
pid_ki = 2.347
pid_kd = 363.769
pwm_cycle_time = 0.0166

[extruder]
step_pin = sht36v2:PB4
dir_pin = sht36v2:PB3
enable_pin = !sht36v2:PA15
rotation_distance = 22.6789511
gear_ratio = 50:17
microsteps = 32
full_steps_per_rotation = 200
filament_diameter = 1.75
heater_pin = sht36v2:PA8
sensor_type = 104NT-4-RO25H42G
sensor_pin = sht36v2:PA3
min_temp = 10
max_temp = 270
max_power = 1.0
min_extrude_temp = 170
control = pid
pid_kp = 26.213
pid_ki = 1.304
pid_kd = 131.721
nozzle_diameter = 0.4
pressure_advance = 0.055
pressure_advance_smooth_time = 0.030

[tmc2209 extruder]
uart_pin = sht36v2:PB5
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan]
pin = gpio18
max_power = 1
cycle_time = 0.002
hardware_pwm = false
shutdown_speed = 0

[heater_fan hotend_fan]
pin = sht36v2:PB10
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = .7

[heater_fan exhaust_fan]
pin = PD15
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0
heater = heater_bed
heater_temp = 60
fan_speed = 1.0

[fan_generic fan]
pin = sht36v2:PB11

[multi_pin controller_fan_pins]
pins = PD14, PD13

[controller_fan controller_fan]
pin = controller_fan_pins
kick_start_time = 0.5
heater = heater_bed, extruder
stepper = X, Y, Z, Z1, Z2, Z3
fan_speed = 0.6

[temperature_sensor Octopus]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor RaspberryPi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor Enclosure]
sensor_type = ATC Semitec 104GT-2
sensor_pin = sht36v2:PA4
min_temp = -50
max_temp = 350

[temperature_sensor Fly-SHT]
sensor_type = temperature_mcu
sensor_mcu = sht36v2

[printer]
kinematics = corexy
max_velocity = 700
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 10.0

[virtual_sdcard]
path = ~/gcode_files

[display_status]

[pause_resume]

[respond]
default_type = echo

[idle_timeout]
timeout = 1800

[quad_gantry_level]
gantry_corners = 
	
	
	
	
	
	
	-80,-22
	390,408
points = 
	
	
	
	
	
	
	
	
	
	
	25,0
	25,280
	310,280
	310,0
speed = 75
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 15

[bed_mesh]
speed = 50
horizontal_move_z = 10
mesh_min = 40, 40
mesh_max = 270, 290
probe_count = 7, 7
mesh_pps = 2, 2
algorithm = bicubic
relative_reference_index = 24

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = !PG6
position_min = 0
position_endstop = 310
position_max = 310
homing_speed = 60
second_homing_speed = 10
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = false
run_current = 0.4
sense_resistor = 0.105
stealthchop_threshold = 0

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = !PG9
position_min = 0
position_endstop = 330
position_max = 330
homing_speed = 60
second_homing_speed = 10
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = false
run_current = 0.4
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PF11
dir_pin = PG3
enable_pin = !PG5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32
endstop_pin = probe:z_virtual_endstop
position_max = 250
position_min = -5
homing_speed = 4
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = PF10
enable_pin = !PG2
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[gcode_macro _ADAPTIVE_MESH_VARIABLES]
variable_ready = False
variable_do_mesh = False
variable_do_nominal = False
variable_mesh_min = 0,0
variable_mesh_max = 0,0
variable_mesh_center = 0,0
variable_mesh_xcenter = 0
variable_mesh_ycenter = 0
variable_obj_min_y = 0
variable_obj_min_x = 0
variable_probe_count = 0,0
variable_rri = 0
variable_algo = "bicubic"
gcode = 

[gcode_macro _COMPUTE_MESH_PARAMETERS]
description = Compute the mesh parameters and store them for later use
gcode = 
	
	{% set xMinConf, yMinConf = printer["configfile"].config["bed_mesh"]["mesh_min"].split(',')|map('trim')|map('int') %}
	{% set xMaxConf, yMaxConf = printer["configfile"].config["bed_mesh"]["mesh_max"].split(',')|map('trim')|map('int') %}
	{% set xProbeCntConf, yProbeCntConf = printer["configfile"].config["bed_mesh"]["probe_count"].split(',')|map('trim')|map('int') %}
	{% set algo = printer["configfile"].config["bed_mesh"]["algorithm"]|lower %}
	{% set xMeshPPS, yMeshPPS = (printer["configfile"].config["bed_mesh"]["mesh_pps"] | default('2,2')).split(',')|map('trim')|map('int') %}
	
	
	
	{% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
	
	
	{% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
	{% set margin = params.MARGIN|default(5)|int %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=obj_min_y VALUE={yMinSpec}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=obj_min_x VALUE={xMinSpec}
	
	
	
	
	{% set xMin = [xMinConf, (xMinSpec - margin)]|max %}
	{% set xMax = [xMaxConf, (xMaxSpec + margin)]|min %}
	{% set yMin = [yMinConf, (yMinSpec - margin)]|max %}
	{% set yMax = [yMaxConf, (yMaxSpec + margin)]|min %}
	
	
	
	
	{% set xProbeCnt = ((xMax - xMin) * xProbeCntConf / (xMaxConf - xMinConf))|round(0, 'ceil')|int %}
	{% set yProbeCnt = ((yMax - yMin) * yProbeCntConf / (yMaxConf - yMinConf))|round(0, 'ceil')|int %}
	
	
	
	
	
	
	
	
	{% if xProbeCnt < 3 and yProbeCnt < 3 %}
	RESPOND MSG="Computed mesh parameters: none, bed mesh not needed"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={False}
	
	{% set xCenter = xMin + ((xMax - xMin) / 2) %}
	{% set yCenter = yMin + ((yMax - yMin) / 2) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_xcenter VALUE={xCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_ycenter VALUE={yCenter}
	M118 ADAPTIVE: X_Center: {xCenter}, Y_Center: {yCenter}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	{% else %}
	{% set xProbeCnt = [3, xProbeCnt]|max %}
	{% set yProbeCnt = [3, yProbeCnt]|max %}
	
	
	
	{% if xProbeCnt % 2 == 0 %}
	{% set xProbeCnt = xProbeCnt + 1 %}
	{% endif %}
	{% if yProbeCnt % 2 == 0 %}
	{% set yProbeCnt = yProbeCnt + 1 %}
	{% endif %}
	
	
	{% if xMeshPPS != 0 or yMeshPPS != 0 %}
	{% set probeCntMin = [xProbeCnt, yProbeCnt]|min %}
	{% set probeCntMax = [xProbeCnt, yProbeCnt]|max %}
	{% if algo == "lagrange" and probeCntMax > 6 %}
	
	{% set algo = "bicubic" %}
	{% endif %}
	{% if algo == "bicubic" and probeCntMin < 4 %}
	{% if probeCntMax > 6 %}
	
	{% if xProbeCnt > yProbeCnt %}
	{% set yProbeCnt = 5 %}
	{% else %}
	{% set xProbeCnt = 5 %}
	{% endif %}
	{% else %}
	
	{% set algo = "lagrange" %}
	{% endif %}
	{% endif %}
	{% endif %}
	
	
	{% set rRefIndex = (((xProbeCnt * yProbeCnt) - 1) / 2)|int %}
	{% set xCenter = xMin + ((xMax - xMin) / 2) %}
	{% set yCenter = yMin + ((yMax - yMin) / 2) %}
	
	
	{% set mesh_min = "%d,%d"|format(xMin, yMin) %}
	{% set mesh_max = "%d,%d"|format(xMax, yMax) %}
	{% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} MESH_CENTER={mesh_center} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_xcenter VALUE={xCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_ycenter VALUE={yCenter}
	M118 ADAPTIVE: X_Center: {xCenter}, Y_Center: {yCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=rri VALUE={rRefIndex}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
	{% endif %}
	{% else %}
	RESPOND MSG="Computed mesh parameters: none, going for a nominal bed mesh"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={True}
	
	{% set xCenter = xMinConf + ((xMaxConf - xMinConf) / 2) %}
	{% set yCenter = yMinConf + ((yMaxConf - yMinConf) / 2) %}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={True}

[gcode_macro _ADAPTIVE_BED_MESH]
description = Perform a bed mesh, but only where and when it's needed
gcode = 
	{% set ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home printer first!") }
	{% endif %}
	
	
	{% if ready %}
	_DO_ADAPTIVE_MESH
	
	
	
	{% else %}
	RESPOND MSG="Adaptive bed mesh: parameters not computed, automatically calling the COMPUTE_MESH_PARAMETERS macro prior to the mesh"
	_COMPUTE_MESH_PARAMETERS {rawparams}
	M400
	_DO_ADAPTIVE_MESH
	{% endif %}

[gcode_macro _DO_ADAPTIVE_MESH]
gcode = 
	
	{% set do_mesh = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_mesh %}
	{% set do_nominal = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_nominal %}
	{% set mesh_min = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_min %}
	{% set mesh_max = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_max %}
	{% set probe_count = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].probe_count %}
	{% set rRefIndex = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].rri %}
	{% set algo = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].algo %}
	
	
	
	
	{% if do_mesh %}
	
	{% if do_nominal %}
	RESPOND MSG="Adaptive bed mesh: nominal bed mesh"
	BED_MESH_CALIBRATE_ORIGINAL
	{% else %}
	RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
	BED_MESH_CALIBRATE_ORIGINAL MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}
	{% endif %}
	{% else %}
	RESPOND MSG="Adaptive bed mesh: no mesh to be done"
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={False}

[gcode_macro CURRENT_HIGH]
description = Raises stepper current for printing routine
gcode = 
	M117 Increased motor currents.
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro globalvariables"].printcurrentxy|float}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro globalvariables"].printcurrentxy|float}
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}

[gcode_macro CURRENT_NORMAL]
description = Lowers stepper current for NON-printing routines
gcode = 
	M117 Decreased motor currents.
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={ printer.configfile.config["tmc2209 stepper_x"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={ printer.configfile.config["tmc2209 stepper_y"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={ printer.configfile.config["tmc2209 stepper_z"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={ printer.configfile.config["tmc2209 stepper_z1"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={ printer.configfile.config["tmc2209 stepper_z2"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={ printer.configfile.config["tmc2209 stepper_z3"]["run_current"] }

[force_move]
enable_force_move = true

[probe]
pin = sht36v2:PA1
x_offset = -21.2
y_offset = 37.5
speed = 3.0
lift_speed = 10.0
samples = 5
samples_result = median
sample_retract_dist = 2.0
samples_tolerance = 0.010
samples_tolerance_retries = 5
z_offset = 8.60

[homing_override]
axes = z
gcode = 
	{% set KEEP_PROBE = params.KEEP_PROBE|default(FALSE) %}
	{% set GOT_PROBE = params.GOT_PROBE|default(FALSE) %}
	{% set ONLY_Z = params.ONLY_Z|default(FALSE) %}
	{% set Z_POS = printer.toolhead.position.z %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set X_PROBEOFFSET = printer.configfile.config["probe"]["x_offset"]|float %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set Y_PROBEOFFSET = printer.configfile.config["probe"]["y_offset"]|float %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	SET_KINEMATIC_POSITION Z=0
	G0 Z15 F3600
	{% else %}
	{% if Z_POS < 15 %}
	G90
	G0 Z15
	{% else %}
	G91
	G0 Z1 F3600
	G90
	{% endif %}
	{% endif %}
	G90
	M118 Currently homed: { printer.toolhead.homed_axes }
	{% if printer.toolhead.homed_axes == "xyz" and ONLY_Z %}
	M118 Re-Homing skipped on X & Y.
	{% else %}
	G28 X Y
	{% endif %}
	{% if GOT_PROBE == FALSE %}
	M401
	{% endif %}
	G0 X{(X_MID - X_PROBEOFFSET)} Y{(Y_MID - Y_PROBEOFFSET)} F4000
	G28 Z
	G0 Z15 F3600
	{% if KEEP_PROBE == FALSE %}
	M402
	{% endif %}

[gcode_macro M401]
description = Deploys the Euclid probe
gcode = 
	QUERY_PROBE
	{% set Z_POS = printer.toolhead.position.z %}
	{% if printer.probe.last_query %}
	M118 Fetching Euclid Probe.
	{% if printer.toolhead.homed_axes != "xyz" %}
	SET_KINEMATIC_POSITION Z=0
	G0 Z15 F3600
	G28X
	G28Y
	{% endif %}
	G90
	{% if Z_POS < 15 %} G0 Z15 {% endif %}
	_PROBE_DEPLOY
	{% else %}
	M118 ?!Attempted to Deploy probe but it is already attached.
	{% endif %}

[gcode_macro M402]
description = Stows the Euclid probe
gcode = 
	QUERY_PROBE
	{% set Z_POS = printer.toolhead.position.z %}
	{% if not printer.probe.last_query %}
	M118 Stowing Euclid Probe.
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	{% if Z_POS < 15 %} G0 Z15 {% endif %}
	_PROBE_STOW
	{% else %}
	M118 ?!Attempted to Stow probe but it is not attached.
	{% endif %}

[gcode_macro _PROBE_DEPLOY]
gcode = 
	G90
	G0 Y{printer["gcode_macro globalvariables"].euclidcleary|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidx|float} F4000
	G0 Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} F4000
	_error_if_probe_not_deployed

[gcode_macro _PROBE_STOW]
gcode = 
	G90
	G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} F4000
	G0 Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidx|float} F2000
	G0 Y{printer["gcode_macro globalvariables"].euclidcleary|float} F4000
	_error_if_probe_deployed

[gcode_macro _do_error_if_probe_deployed]
gcode = 
	{% if not printer.probe.last_query %}
	{action_raise_error("ERROR: Probe is still deployed, please remove and return to dock.")}
	{% else %}
	M118 Euclid probe has been stowed.
	{% endif %}

[gcode_macro _error_if_probe_deployed]
gcode = 
	G4 P300
	QUERY_PROBE
	_do_error_if_probe_deployed

[gcode_macro _do_error_if_probe_not_deployed]
gcode = 
	{% if printer.probe.last_query %}
	{action_raise_error("ERROR: Probe unsuccessfully deployed, please check printer.")}
	{% else %}
	M118 Euclid probe has been attached.
	{% endif %}

[gcode_macro _error_if_probe_not_deployed]
gcode = 
	G4 P300
	QUERY_PROBE
	_do_error_if_probe_not_deployed

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_ORIGINAL
description = Levels the four Z-axis gantry corners
gcode = 
	{% if printer.toolhead.homed_axes != "xyz" %}
	G28 KEEP_PROBE:TRUE
	{% endif %}
	M401
	QUAD_GANTRY_LEVEL_ORIGINAL
	M402

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIGINAL
description = Performs bed mesh
gcode = 
	QUERY_PROBE
	M401
	BED_MESH_CALIBRATE_ORIGINAL
	M402

[gcode_macro G32]
description = Clears bed-mesh and performs G28, QGL, G28
gcode = 
	BED_MESH_CLEAR
	G28 KEEP_PROBE:TRUE
	QUAD_GANTRY_LEVEL_ORIGINAL
	G28 GOT_PROBE:TRUE
	QUERY_PROBE

[gcode_macro G3201]
description = Clears bed-mesh and performs G28, QGL, G28-Z, Probes Center, and applies bed-mesh
gcode = 
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set X_MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_xcenter|float %}
	{% set Y_MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_ycenter|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set X_PROBEOFFSET = printer.configfile.config["probe"]["x_offset"]|float %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set Y_PROBEOFFSET = printer.configfile.config["probe"]["y_offset"]|float %}
	{% set ZSpeed = printer["gcode_macro globalvariables"].zprobespeed|float %}
	{% set ZSamples = printer["gcode_macro globalvariables"].zprobesamples|int %}
	{% set ZTolerance = printer["gcode_macro globalvariables"].zprobetolerance|float %}
	{% set ZRetract = printer["gcode_macro globalvariables"].zproberetract|float %}
	{% set S_Retries = printer.configfile.config["probe"]["samples_tolerance_retries"]|int %}
	BED_MESH_CLEAR
	G28 KEEP_PROBE:TRUE
	QUAD_GANTRY_LEVEL_ORIGINAL
	G0 Z15 F3600
	{% if MeshToApply == "ADAPTIVE" %}
	G0 X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} F4000
	M118 ADAPTIVE: Moving to X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} to probe Z0.
	{% else %}
	G0 X{(X_MID - X_PROBEOFFSET)} Y{(Y_MID - Y_PROBEOFFSET)} F4000
	M118 Moving to X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} to probe Z0.
	{% endif %}
	PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries={S_Retries} sample_retract_dist={ZRetract}
	_CHECK_PROBE3201

[gcode_macro _CHECK_PROBE3201]
gcode = 
	{% set PASS = printer.probe.last_z_result %}
	{% set ZP_CAL = printer.configfile.config["probe"]["z_offset"]|float %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set Z_POS = printer.toolhead.position.z|float %}
	{% set Z_DIFFERENCE = PASS - ZP_CAL|float %}
	{% set NEW_CURRENT_Z = (Z_POS - Z_DIFFERENCE) %}
	M118 Current Probing is: {PASS}
	M118 Z-Probe Offset is: {ZP_CAL}
	M118 Difference: {Z_DIFFERENCE}
	M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
	SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
	G4 P100
	M118 Moving nozzle to newly adjusted Z15.
	G0 Z15 F500
	G4 P1000
	{% if MeshToApply != "NONE" %}
	{% if MeshToApply == "INSITU" %}
	M118 Performing INSITU Mesh.
	BED_MESH_CALIBRATE_ORIGINAL
	BED_MESH_PROFILE SAVE=INSITU
	{% elif MeshToApply == "ADAPTIVE" %}
	M118 Performing ADAPTIVE Mesh.
	_ADAPTIVE_BED_MESH
	{% else %}
	M118 Applied {MeshToApply} Mesh.
	BED_MESH_PROFILE LOAD={MeshToApply}
	{% endif %}
	{% endif %}
	QUERY_PROBE
	{% if not printer.probe.last_query %}
	M118 Stowing Euclid Probe.
	_PROBE_STOW
	{% else %}
	M118 ?!Probe is not attached.
	{% endif %}

[gcode_macro FILAMENT_LOAD]
description = Loads filament
gcode = 
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{% if printer.idle_timeout.state == "Printing" and printer.pause_resume.is_paused %}
	SAVE_GCODE_STATE NAME=HLF_state
	M83
	G0 X{X_MID} Y20 F4000
	G0 E50 F400
	G0 E50 F400
	G0 E50 F200
	G1 E-0.5 F1800
	G92 E0
	M400
	RESTORE_GCODE_STATE NAME=HLF_state
	{% else %}
	{action_respond_info("Pause print first.")}
	{% endif %}
	{% else %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	M117 Performing required homing.
	G28
	{% endif %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set TEMP = params.TEMP|default(defaultTN)|float %}
	M117 Heating nozzle to LOAD filamnet.
	G90
	G0 X{X_MID} Y20 Z90 F4000
	M109 S{TEMP}
	M83
	G0 E50 F400
	G0 E50 F400
	G0 E50 F200
	G1 E-0.5 F1800
	G92 E0
	M400
	PARK_UpperRight
	
	TURN_OFF_HEATERS
	M117 Finished filament load.
	{% endif %}

[gcode_macro FILAMENT_UNLOAD]
description = UNloads filament
gcode = 
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{% if printer.idle_timeout.state == "Printing" and printer.pause_resume.is_paused %}
	SAVE_GCODE_STATE NAME=HUF_state
	M83
	G0 X{X_MID} Y20 F4000
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G92 E0
	M400
	RESTORE_GCODE_STATE NAME=HUF_state
	{% else %}
	{action_respond_info("Pause print first.")}
	{% endif %}
	{% else %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	M117 Performing required homing.
	G28
	{% endif %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set TEMP = params.TEMP|default(defaultTN)|float %}
	M117 Heating nozzle to UNLOAD filamnet.
	G90
	G0 X{X_MID} Y20 Z90 F4000
	M109 S{TEMP}
	M83
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G0 E-50 F1000
	G92 E0
	M400
	PARK_UpperRight
	
	TURN_OFF_HEATERS
	M117 Finished filament unload.
	{% endif %}

[gcode_macro PARK_UpperRight]
description = Parks the toolhead in the upper-right position
gcode = 
	{% set Z_MAX = printer.configfile.config["stepper_z"]["position_max"]|float -1 %}
	{% set X_MAX = printer.configfile.config["stepper_x"]["position_max"]|float -1 %}
	{% set Z_POS = printer.toolhead.position.z + 10 %}
	{% set defaultParkHeight = printer["gcode_macro globalvariables"].parkheightpercentage|float %}
	{% set ParkHeight = params.PARK_HEIGHT_PERCENT|default(defaultParkHeight)|float %}
	{% if ParkHeight < 0.2  %}
	{% set ParkHeight = 0.2 %}
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCORNER_state
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	G0 X{X_MAX} Y20 Z{ [(Z_MAX*ParkHeight), [Z_POS, Z_MAX]|min]|max } F4000
	RESTORE_GCODE_STATE NAME=PARKCORNER_state

[gcode_macro PARK_Center]
description = Parks the toolhead in the center position
gcode = 
	{% set Z = params.Z|default(40)|float %}
	SAVE_GCODE_STATE NAME=PARK_Center_state
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	G0 X{X_MID} Y{Y_MID} Z{Z} F4000
	RESTORE_GCODE_STATE NAME=PARK_Center_state

[delayed_gcode prerun]
initial_duration = 1
gcode = 
	{% set z_offset = printer.configfile.config["probe"]["z_offset"]|float %}
	{% set nozzle_diameter = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
	{% set pressure_advance = printer.configfile.config["extruder"]["pressure_advance"]|float %}
	{% set pressure_advance_smooth_time = printer.configfile.config["extruder"]["pressure_advance_smooth_time"]|float %}
	{% set mesh = printer["gcode_macro globalvariables"].meshtoapply %}
	
	QUERY_PROBE
	M117 Printer online.
	{% for s in range(0, 30) %}
	SET_LED LED=nozzle INDEX=1 RED=1 GREEN=0 BLUE=1
	SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=.5 BLUE=.5
	G4 P100
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=1
	G4 P50
	{% endfor %}
	M118 NOTE --> probe: TRIGGERED = Euclid probe NOT attached.
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].nplimitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].nplimitdecel|float}
	M118 Z-Offset is set at {z_offset}mm.
	M118 Nozzle diameter is set at {nozzle_diameter}mm.
	M118 Pressure Advance is set at {pressure_advance}.
	M118 Pressure advance Smooth Time is set at {pressure_advance_smooth_time}.
	M118 Mesh profile is {mesh}
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2

[gcode_macro PRINT_START]
description = Performs all needed moves prior to printing
gcode = 
	CLEAR_PAUSE
	BED_MESH_CLEAR
	M220 S100
	M221 S100
	SET_LED LED=nozzle RED=.2 GREEN=.2 BLUE=1
	{% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
	_COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set defaultWN = printer["gcode_macro globalvariables"].defaultwarmnozzle|float %}
	{% set defaultRN = printer["gcode_macro globalvariables"].defaultreadynozzle|float %}
	{% set defaultSOAK = printer["gcode_macro globalvariables"].preprintsoakminutes|float %}
	{% set defaultENCLOSURE = printer["gcode_macro globalvariables"].defaultenclosure|float %}
	{% set purgeRetract = printer["gcode_macro globalvariables"].purgeretract|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=ready VALUE={params.EXTRUDER_READY|default(defaultRN)|float}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=temp VALUE={params.EXTRUDER_TEMP|default(defaultTN)|float}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=filazcomp VALUE={params.FILAMENT_ZCOMP|default(0.00)|float}
	M118 gCode file passed filament offset of {params.FILAMENT_ZCOMP|default(0.00)|float}mm.
	
	{% set ENCLOSURE_TEMP = params.ENCLOSURE_TEMP|default(defaultENCLOSURE)|float %}
	{% set SOAK = params.SOAK|default(defaultSOAK) %}
	M118 gCode file passed the following to PRINT_START:
	M118 { rawparams }
	
	
	M140 S{BED_TEMP}
	M104 S{defaultWN}
	M141 S{ENCLOSURE_TEMP}
	G90
	G21
	M83
	G92 E0.0
	
	SET_GCODE_OFFSET Z=0.0
	M117 Performing initial homing.
	{% if printer["gcode_macro globalvariables"].qglbeforesoakprint|default() == true %}
	G32
	
	PARK_Center
	{% else %}
	G28
	
	{% endif %}
	M117 Bringing bed to temperature.
	SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
	M190 S{BED_TEMP}
	_WAIT_Start MINUTES={SOAK}

[gcode_macro _PRINT_START2]
description = Part 2 - Performs all needed moves prior to printing
gcode = 
	RESUME_BASE
	{% set EXTRUDER_READY = printer["gcode_macro _WAIT_Variable"].ready|int %}
	{% set EXTRUDER_TEMP = printer["gcode_macro _WAIT_Variable"].temp|int %}
	SET_LED LED=nozzle RED=.5 GREEN=0 BLUE=.5
	M117 Performing hot level.
	CURRENT_HIGH
	M400
	M104 S{EXTRUDER_READY}
	G3201
	M104 S{EXTRUDER_TEMP}
	G1 X0 Y20 F4000
	G1 Z1.5
	M117 Bringing nozzle to temperature.
	SET_LED LED=nozzle INDEX=2 RED=1 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=.5 BLUE=.5
	M109 S{EXTRUDER_TEMP}
	SET_LED LED=nozzle RED=1 GREEN=0 BLUE=0
	_FILAMENT_READY
	M117 Commencing print.
	M118 Commencing print.
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=.5

[gcode_macro _FILAMENT_READY]
description = Performs filament specific purgeline and readies for print
gcode = 
	{% set Z_POS = printer.toolhead.position.z|float %}
	{% set FILAMENT_ZCOMP = printer["gcode_macro _WAIT_Variable"].filazcomp|float %}
	{% set NEW_CURRENT_Z = (Z_POS - FILAMENT_ZCOMP|float) %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set Object_min_x = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].obj_min_x|float %}
	{% set Object_min_y = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].obj_min_y|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set NZLD = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
	{% set purgeRetract = printer["gcode_macro globalvariables"].purgeretract|float %}
	
	{% if FILAMENT_ZCOMP > 0.2 %}
	M118 FILAMENT_ZCOMP Offset > 0.2 - Ignoring FILAMENT_ZCOMP.
	{% elif FILAMENT_ZCOMP == 0 %}
	M118 FILAMENT_ZCOMP not set - Ignoring FILAMENT_ZCOMP.
	{% else %}
	M118 FILAMENT_ZCOMP Offset is: {FILAMENT_ZCOMP}
	M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
	SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
	G4 P1000
	M400
	{% endif %}
	
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].limitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].limitdecel|float}
	
	
	G1 X0 Y19.8 Z0.3 F1500.0
	G1 E{(12.5 * NZLD)} F3600
	M400
	G1 X0 Y0 Z0.3 F1500.0
	G1 X130 Y0.0 Z0.3 F1500.0 E{(37.5 * NZLD)}
	G1 X130 Y0.3 Z0.3 F5000.0
	G1 X010 Y0.3 Z0.3 F1500.0 E{(75.0 * NZLD)}
	M400
	G92 E0
	
	G1 E-{purgeRetract} F3000
	G1 Z1.0 F3000
	{% if MeshToApply == "ADAPTIVE" %}
	G0 X{Object_min_x} Y{Object_min_y} F8000
	{% else %}
	G0 X{X_MID} Y{Y_MID} F8000
	{% endif %}

[gcode_macro PRINT_END]
description = Performs all needed actions upon completion of printing
gcode = 
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].nplimitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].nplimitdecel|float}
	{% set EndRetract = printer["gcode_macro globalvariables"].endretract|float %}
	G91
	G0 Z5 F1000
	G90
	G92 E0
	G1 E-{EndRetract} F3600
	M400
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	M400
	TURN_OFF_HEATERS
	CURRENT_NORMAL
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintcool|float}
	PARK_UpperRight
	M18 X Y E
	M107
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintparkcool|float}
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	M117 Finished printing, check nozzle clear.
	M118 Finished printing, check nozzle clear.

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	{% set x = params.X|default(0) %}
	{% set y = params.Y|default(20) %}
	{% set z = params.Z|default(10)|float %}
	{% set e = params.E|default(1) %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% set lift_z = z|abs %}
	{% if act_z < (max_z - lift_z) %}
	{% set z_safe = lift_z %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	PAUSE_BASE
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E-{e} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe}
	G90
	G1 X{x} Y{y} F4000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	{% set e = params.E|default(1) %}
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E{e} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].nplimitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].nplimitdecel|float}
	{% set EndRetract = printer["gcode_macro globalvariables"].endretract|float %}
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	M400
	G92 E0
	G1 E-{EndRetract} F3600
	CLEAR_PAUSE
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE
	CURRENT_NORMAL
	M106 S250
	G90
	PARK_UpperRight
	M18 X Y E
	M107
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintparkcool|float}
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	M117 Cancelled print, check nozzle clear.
	M118 Cancelled print, check nozzle clear.

[gcode_macro TUNE_HOTMESH]
description = Performs a heat-soaked bed-mesh
gcode = 
	CLEAR_PAUSE
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set MeshName = params.NAME|default(MeshToApply) %}
	M118 Will be saving as {MeshName}
	{% if MeshName == "INSITU" or MeshToApply == "NONE" or MeshToApply == "ADAPTIVE" %}
	{action_respond_info("Mesh requires a proper name, specify via cli or change printer.cfg MeshToApply definition.")}
	{% else %}
	{% set defaultWN = printer["gcode_macro globalvariables"].defaultwarmnozzle|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set defaultSOAK = printer["gcode_macro globalvariables"].hotmeshsoakminutes|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	{% set SOAK = params.SOAK|default(defaultSOAK)|float %}
	SET_LED LED=nozzle RED=.2 GREEN=.2 BLUE=1
	
	M140 S{BED_TEMP}
	M104 S{defaultWN}
	G90
	
	SET_GCODE_OFFSET Z=0.0
	M117 Performing initial homing.
	{% if printer["gcode_macro globalvariables"].qglbeforesoakmesh|default() == true %}
	G32
	
	PARK_Center
	{% else %}
	G28
	
	{% endif %}
	M117 Bringing bed to temperature.
	M190 S{BED_TEMP}
	_HEAT_WAIT MINUTES={SOAK} MSG="Pre BED_MESH_CALIBRATE Soaking..."
	SET_LED LED=nozzle RED=.5 GREEN=0 BLUE=.5
	M117 Performing hot level.
	CURRENT_HIGH
	M400
	M401
	QUAD_GANTRY_LEVEL_ORIGINAL
	G28 GOT_PROBE:TRUE KEEP_PROBE:TRUE
	M117 Performing heated bed mesh calibration.
	BED_MESH_PROFILE REMOVE={MeshName}
	BED_MESH_CALIBRATE_ORIGINAL
	BED_MESH_PROFILE SAVE={MeshName}
	BED_MESH_OUTPUT PGP=1
	M118 Bed mesh calibration completed.
	TURN_OFF_HEATERS
	CURRENT_NORMAL
	M402
	PARK_UpperRight
	M18 X Y E
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	M117 Finished mesh, saved as {MeshName}.
	SAVE_CONFIG
	{% endif %}
	{% endif %}

[gcode_macro TUNE_PA_CAL]
description = Prints a Pressure Advance panel to help determine correct PA
gcode = 
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set BED = params.BED|default(defaultTB)|float %}
	{% set EXTRUDER = params.EXTRUDER|default(defaultTN)|float %}
	{% set PA_START = params.PA_START|default(0.0)|float %}
	{% set PA_STEP = params.PA_STEP|default(0.005)|float %}
	{% set NZL_CFG = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
	{% set NZL = params.NZL|default(NZL_CFG)|float %}
	{% set E20 = (0.1147475 * NZL) * 20|float %}
	{% set E40 = (0.1147475 * NZL) * 40|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	PRINT_START BED_TEMP={BED} EXTRUDER_TEMP={EXTRUDER}
	
	M220 S100
	M221 S100
	G21
	G90
	M83
	SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro globalvariables"].limitaccel|float} ACCEL_TO_DECEL={printer["gcode_macro globalvariables"].limitdecel|float}
	G92 E0
	M106 S0
	G1 X{(X_MID-40)} Y{(Y_MID-65)} F30000
	G1 Z0.25 F300
	G1 E0.75 F1800
	G1 X{(X_MID-20)} Y{(Y_MID-65)} E{E20} F300
	G1 X{(X_MID+20)} Y{(Y_MID-65)} E{E40} F9000
	G1 X{(X_MID+40)} Y{(Y_MID-65)} E{E20} F300
	G1 E-0.75 F1800
	G1 Z1 F300
	{% for i in range(0, 20) %}
	SET_PRESSURE_ADVANCE ADVANCE={PA_START + (i * PA_STEP)}
	M117 Testing Pressure Advance at: {PA_START + (i * PA_STEP)}
	G1 X{(X_MID-40)} Y{(Y_MID-35)+(5*i)} F30000
	G1 Z0.25 F300
	G1 E0.75 F1800
	G1 X{(X_MID-20)} Y{(Y_MID-35)+(5*i)} E{E20} F300
	G1 X{(X_MID+20)} Y{(Y_MID-35)+(5*i)} E{E40} F9000
	G1 X{(X_MID+40)} Y{(Y_MID-35)+(5*i)} E{E20} F300
	G1 E-0.75 F1800
	G1 Z1 F300
	{% endfor %}
	M117 Find best line and multiply it by ({PA_START} + (line * {PA_STEP}) ) to find your PA setting.
	M118 Find best line and multiply it by ({PA_START} + (line * {PA_STEP}) ) to find your PA setting.
	PRINT_END
	{% endif %}

[gcode_macro TUNE_PID_BED]
description = Performs bed PID tune
gcode = 
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	{% set FAN_SPEED = params.FAN_SPEED|default(64)|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=0
	G90
	M117 Performing initial homing.
	G32
	G1 Z5 Y{Y_MID} X{X_MID} F4000
	M106 S{FAN_SPEED}
	M117 Starting PID calibration.
	PID_CALIBRATE HEATER=heater_bed TARGET={BED_TEMP}
	M117 Finished PID calibration.
	TURN_OFF_HEATERS
	CURRENT_NORMAL
	PARK_UpperRight
	M18 X Y E
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	_COOL_WAIT MINUTES=1
	SAVE_CONFIG
	{% endif %}

[gcode_macro TUNE_PID_NZL]
description = Performs nozzle PID tune
gcode = 
	{% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
	{action_respond_info("Cannot do that while printing")}
	{% else %}
	{% set defaultTN = printer["gcode_macro globalvariables"].defaulttempnozzle|float %}
	{% set defaultTB = printer["gcode_macro globalvariables"].defaulttempbed|float %}
	{% set FAN_SPEED = params.FAN_SPEED|default(64)|float %}
	{% set SOAK_MINUTES = params.SOAK_MINUTES|default(12)|float %}
	{% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
	{% set NZL_TEMP = params.NZL_TEMP|default(defaultTN)|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=0
	G90
	M117 Performing initial homing.
	G32
	G1 Z5 Y{Y_MID} X{X_MID} F4000
	M117 Bringing bed to temperature.
	M190 S{BED_TEMP}
	_HEAT_WAIT MINUTES={SOAK_MINUTES} MSG="Pre NZL_PID Soaking..."
	SET_LED LED=nozzle RED=.5 GREEN=.5 BLUE=0
	M106 S{FAN_SPEED}
	M117 Starting PID calibration.
	PID_CALIBRATE HEATER=extruder TARGET={NZL_TEMP}
	M117 Finished PID calibration.
	TURN_OFF_HEATERS
	G90
	PARK_UpperRight
	M18 X Y E
	SET_LED LED=nozzle RED=.2 GREEN=.5 BLUE=.2
	_COOL_WAIT MINUTES={printer["gcode_macro globalvariables"].postprintparkcool|float}
	SAVE_CONFIG
	{% endif %}

[gcode_macro _HEAT_WAIT]
description = Heating cycle waiting routine
gcode = 
	{% set MINUTES = params.MINUTES|default(10)|int %}
	{% set MSG = params.MSG|default("Warming...")|string %}
	{% for i in range(0, MINUTES) %}
	M117 {MSG} {MINUTES-i} minute remaining.
	{% for s in range(0, 60) %}
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
	G4 P500
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=0 BLUE=0
	G4 P500
	{% endfor %}
	{% endfor %}

[gcode_macro _COOL_WAIT]
description = Cooling cycle waiting routine
gcode = 
	M106 S250
	{% set MINUTES = params.MINUTES|default(1)|int %}
	{% set MSG = params.MSG|default("Cooling...")|string %}
	{% for i in range(0, MINUTES) %}
	M117 {MSG} {MINUTES-i} minute remaining.
	{% for s in range(0, 60) %}
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
	G4 P500
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=0
	G4 P500
	{% endfor %}
	{% endfor %}
	M107

[gcode_macro _WAIT_Variable]
variable_count = 300
variable_duration = 2
variable_waiting = False
variable_ready = 200
variable_temp = 250
variable_filazcomp = 0
gcode = 

[delayed_gcode WAIT_Delayed]
gcode = 
	{% set count = printer["gcode_macro _WAIT_Variable"].count|int %}
	{% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
	M117 Pre-Print Heatsoaking... {((duration * count) / 60)|round(1)} minutes left.
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count-1}
	{% if count > 0 %} _WAIT_Loop  {% endif %}
	{% if count == 0 %}
	
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=False
	_PRINT_START2
	{% endif %}

[gcode_macro _WAIT_Loop]
gcode = 
	{% set count = printer["gcode_macro _WAIT_Variable"].count|int %}
	{% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
	UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration}
	{% if  count % 2 == 0 %}
	SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=0 BLUE=0
	SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
	{% else %}
	SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
	SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=0 BLUE=0
	{% endif %}

[gcode_macro _WAIT_Start]
gcode = 
	{% set MINUTES = params.MINUTES|default(15)|int %}
	{% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
	{% set count = (MINUTES * 60) / duration %}
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=True
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count}
	UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration}
	PAUSE_BASE

[gcode_macro WAIT_Quit]
gcode = 
	{% if printer["gcode_macro _WAIT_Variable"].waiting %}
	M118 STOPPING LOOP, SETTING COUNT TO 0
	SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE=0
	UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION=1
	{% else %}
	M118 Not in waiting state, nothing to do.
	{% endif %}

[firmware_retraction]
retract_length = 0.5
retract_speed = 30
unretract_extra_length = 0
unretract_speed = 30

[gcode_macro globalvariables]
variable_limitaccel = 3501
variable_limitdecel = 1751
variable_defaulttempnozzle = 235
variable_defaultreadynozzle = 210
variable_defaultwarmnozzle = 160
variable_defaulttempbed = 110
variable_defaultenclosure = 40
variable_meshtoapply = "ADAPTIVE"
variable_qglbeforesoakmesh = True
variable_qglbeforesoakprint = True
variable_hotmeshsoakminutes = 20
variable_preprintsoakminutes = 15
variable_insitumeshsoakminutes = 01
variable_postprintcool = 1
variable_postprintparkcool = 2
variable_purgeretract = 0.1
variable_endretract = 2.0
variable_nplimitaccel = 3500
variable_nplimitdecel = 1750
variable_printcurrentxy = 1.1
variable_printcurrentz = 0.8
variable_parkheightpercentage = 0.50
variable_euclidx = 0
variable_euclidy = 355
variable_euclidswipex = 50
variable_euclidcleary = 325
variable_zprobespeed = 5.0
variable_zprobesamples = 7
variable_zprobetolerance = 0.050
variable_zproberetract = 1.5
variable_adxlsoakminutes = 30
gcode = 
	M117 Happy Printing!

[input_shaper]
shaper_type_x = 3hump_ei
shaper_freq_x = 83.8
shaper_type_y = mzv
shaper_freq_y = 37.2

[bed_mesh default]
version = 1
points = 
	0.053750, 0.055000, 0.023750, 0.087500, 0.033750, 0.060000, 0.055000
	0.025000, 0.013750, 0.008750, 0.020000, 0.020000, 0.037500, 0.040000
	0.000000, 0.003750, -0.053750, -0.003750, -0.041250, 0.021250, 0.007500
	0.007500, -0.008750, -0.022500, 0.000000, -0.005000, 0.007500, 0.007500
	0.008750, 0.007500, -0.046250, -0.007500, -0.040000, 0.017500, 0.003750
	0.043750, 0.022500, 0.006250, 0.002500, 0.011250, 0.032500, 0.031250
	0.057500, 0.041250, 0.025000, 0.023750, 0.027500, 0.050000, 0.051250
tension = 0.2
min_x = 40.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 40.0
x_count = 7
max_y = 310.0
mesh_x_pps = 2
max_x = 310.0

[bed_mesh MESH110]
version = 1
points = 
	0.053750, 0.055000, 0.023750, 0.087500, 0.033750, 0.060000, 0.055000
	0.025000, 0.013750, 0.008750, 0.020000, 0.020000, 0.037500, 0.040000
	0.000000, 0.003750, -0.053750, -0.003750, -0.041250, 0.021250, 0.007500
	0.007500, -0.008750, -0.022500, 0.000000, -0.005000, 0.007500, 0.007500
	0.008750, 0.007500, -0.046250, -0.007500, -0.040000, 0.017500, 0.003750
	0.043750, 0.022500, 0.006250, 0.002500, 0.011250, 0.032500, 0.031250
	0.057500, 0.041250, 0.025000, 0.023750, 0.027500, 0.050000, 0.051250
tension = 0.2
min_x = 40.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 40.0
x_count = 7
max_y = 310.0
mesh_x_pps = 2
max_x = 310.0
=======================
Unhandled exception during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 141, in _read_config
    self.load_object(config, section_config.get_name(), None)
  File "/home/pi/klipper/klippy/klippy.py", line 130, in load_object
    self.objects[section] = init_func(config.getsection(section))
  File "/home/pi/klipper/klippy/extras/gcode_macro.py", line 191, in load_config_prefix
    return GCodeMacro(config)
  File "/home/pi/klipper/klippy/extras/gcode_macro.py", line 147, in __init__
    self.variables[option[len(prefix):]] = ast.literal_eval(
  File "/usr/lib/python3.9/ast.py", line 62, in literal_eval
    node_or_string = parse(node_or_string, mode='eval')
  File "/usr/lib/python3.9/ast.py", line 50, in parse
    return compile(source, filename, mode, flags,
  File "<unknown>", line 1
    01
     ^
SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers
webhooks client 3043697136: New connection
webhooks client 3043697136: Client info {'program': 'Moonraker', 'version': 'v0.8.0-23-g18f5ff4'}
webhooks client 3043697136: Disconnected
Restarting printer
Start printer at Thu Mar  2 22:57:54 2023 (1677797874.6 1946.9)
===== Config file =====
[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_39003000105053424E363620-if00
restart_method = command

[mcu sht36v2]
canbus_uuid = 3388e21717f3

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.70
min_temp = 0
max_temp = 120
control = pid
pid_kp = 58.437
pid_ki = 2.347
pid_kd = 363.769
pwm_cycle_time = 0.0166

[extruder]
step_pin = sht36v2:PB4
dir_pin = sht36v2:PB3
enable_pin = !sht36v2:PA15
rotation_distance = 22.6789511
gear_ratio = 50:17
microsteps = 32
full_steps_per_rotation = 200
filament_diameter = 1.75
heater_pin = sht36v2:PA8
sensor_type = 104NT-4-RO25H42G
sensor_pin = sht36v2:PA3
min_temp = 10
max_temp = 270
max_power = 1.0
min_extrude_temp = 170
control = pid
pid_kp = 26.213
pid_ki = 1.304
pid_kd = 131.721
nozzle_diameter = 0.4
pressure_advance = 0.055
pressure_advance_smooth_time = 0.030

[tmc2209 extruder]
uart_pin = sht36v2:PB5
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan]
pin = gpio18
max_power = 1
cycle_time = 0.002
hardware_pwm = false
shutdown_speed = 0

[heater_fan hotend_fan]
pin = sht36v2:PB10
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = .7

[heater_fan exhaust_fan]
pin = PD15
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0
heater = heater_bed
heater_temp = 60
fan_speed = 1.0

[fan_generic fan]
pin = sht36v2:PB11

[multi_pin controller_fan_pins]
pins = PD14, PD13

[controller_fan controller_fan]
pin = controller_fan_pins
kick_start_time = 0.5
heater = heater_bed, extruder
stepper = X, Y, Z, Z1, Z2, Z3
fan_speed = 0.6

[temperature_sensor Octopus]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor RaspberryPi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor Enclosure]
sensor_type = ATC Semitec 104GT-2
sensor_pin = sht36v2:PA4
min_temp = -50
max_temp = 350

[temperature_sensor Fly-SHT]
sensor_type = temperature_mcu
sensor_mcu = sht36v2

[printer]
kinematics = corexy
max_velocity = 700
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 10.0

[virtual_sdcard]
path = ~/gcode_files

[display_status]

[pause_resume]

[respond]
default_type = echo

[idle_timeout]
timeout = 1800

[quad_gantry_level]
gantry_corners = 
	
	
	
	
	
	
	-80,-22
	390,408
points = 
	
	
	
	
	
	
	
	
	
	
	25,0
	25,280
	310,280
	310,0
speed = 75
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 15

[bed_mesh]
speed = 50
horizontal_move_z = 10
mesh_min = 40, 40
mesh_max = 270, 290
probe_count = 7, 7
mesh_pps = 2, 2
algorithm = bicubic
relative_reference_index = 24

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = !PG6
position_min = 0
position_endstop = 310
position_max = 310
homing_speed = 60
second_homing_speed = 10
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = false
run_current = 0.4
sense_resistor = 0.105
stealthchop_threshold = 0

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = !PG9
position_min = 0
position_endstop = 330
position_max = 330
homing_speed = 60
second_homing_speed = 10
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = false
run_current = 0.4
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PF11
dir_pin = PG3
enable_pin = !PG5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32
endstop_pin = probe:z_virtual_endstop
position_max = 250
position_min = -5
homing_speed = 4
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = PF10
enable_pin = !PG2
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[gcode_macro _ADAPTIVE_MESH_VARIABLES]
variable_ready = False
variable_do_mesh = False
variable_do_nominal = False
variable_mesh_min = 0,0
variable_mesh_max = 0,0
variable_mesh_center = 0,0
variable_mesh_xcenter = 0
variable_mesh_ycenter = 0
variable_obj_min_y = 0
variable_obj_min_x = 0
variable_probe_count = 0,0
variable_rri = 0
variable_algo = "bicubic"
gcode = 

[gcode_macro _COMPUTE_MESH_PARAMETERS]
description = Compute the mesh parameters and store them for later use
gcode = 
	
	{% set xMinConf, yMinConf = printer["configfile"].config["bed_mesh"]["mesh_min"].split(',')|map('trim')|map('int') %}
	{% set xMaxConf, yMaxConf = printer["configfile"].config["bed_mesh"]["mesh_max"].split(',')|map('trim')|map('int') %}
	{% set xProbeCntConf, yProbeCntConf = printer["configfile"].config["bed_mesh"]["probe_count"].split(',')|map('trim')|map('int') %}
	{% set algo = printer["configfile"].config["bed_mesh"]["algorithm"]|lower %}
	{% set xMeshPPS, yMeshPPS = (printer["configfile"].config["bed_mesh"]["mesh_pps"] | default('2,2')).split(',')|map('trim')|map('int') %}
	
	
	
	{% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
	
	
	{% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
	{% set margin = params.MARGIN|default(5)|int %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=obj_min_y VALUE={yMinSpec}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=obj_min_x VALUE={xMinSpec}
	
	
	
	
	{% set xMin = [xMinConf, (xMinSpec - margin)]|max %}
	{% set xMax = [xMaxConf, (xMaxSpec + margin)]|min %}
	{% set yMin = [yMinConf, (yMinSpec - margin)]|max %}
	{% set yMax = [yMaxConf, (yMaxSpec + margin)]|min %}
	
	
	
	
	{% set xProbeCnt = ((xMax - xMin) * xProbeCntConf / (xMaxConf - xMinConf))|round(0, 'ceil')|int %}
	{% set yProbeCnt = ((yMax - yMin) * yProbeCntConf / (yMaxConf - yMinConf))|round(0, 'ceil')|int %}
	
	
	
	
	
	
	
	
	{% if xProbeCnt < 3 and yProbeCnt < 3 %}
	RESPOND MSG="Computed mesh parameters: none, bed mesh not needed"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={False}
	
	{% set xCenter = xMin + ((xMax - xMin) / 2) %}
	{% set yCenter = yMin + ((yMax - yMin) / 2) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_xcenter VALUE={xCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_ycenter VALUE={yCenter}
	M118 ADAPTIVE: X_Center: {xCenter}, Y_Center: {yCenter}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	{% else %}
	{% set xProbeCnt = [3, xProbeCnt]|max %}
	{% set yProbeCnt = [3, yProbeCnt]|max %}
	
	
	
	{% if xProbeCnt % 2 == 0 %}
	{% set xProbeCnt = xProbeCnt + 1 %}
	{% endif %}
	{% if yProbeCnt % 2 == 0 %}
	{% set yProbeCnt = yProbeCnt + 1 %}
	{% endif %}
	
	
	{% if xMeshPPS != 0 or yMeshPPS != 0 %}
	{% set probeCntMin = [xProbeCnt, yProbeCnt]|min %}
	{% set probeCntMax = [xProbeCnt, yProbeCnt]|max %}
	{% if algo == "lagrange" and probeCntMax > 6 %}
	
	{% set algo = "bicubic" %}
	{% endif %}
	{% if algo == "bicubic" and probeCntMin < 4 %}
	{% if probeCntMax > 6 %}
	
	{% if xProbeCnt > yProbeCnt %}
	{% set yProbeCnt = 5 %}
	{% else %}
	{% set xProbeCnt = 5 %}
	{% endif %}
	{% else %}
	
	{% set algo = "lagrange" %}
	{% endif %}
	{% endif %}
	{% endif %}
	
	
	{% set rRefIndex = (((xProbeCnt * yProbeCnt) - 1) / 2)|int %}
	{% set xCenter = xMin + ((xMax - xMin) / 2) %}
	{% set yCenter = yMin + ((yMax - yMin) / 2) %}
	
	
	{% set mesh_min = "%d,%d"|format(xMin, yMin) %}
	{% set mesh_max = "%d,%d"|format(xMax, yMax) %}
	{% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} MESH_CENTER={mesh_center} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_xcenter VALUE={xCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_ycenter VALUE={yCenter}
	M118 ADAPTIVE: X_Center: {xCenter}, Y_Center: {yCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=rri VALUE={rRefIndex}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
	{% endif %}
	{% else %}
	RESPOND MSG="Computed mesh parameters: none, going for a nominal bed mesh"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={True}
	
	{% set xCenter = xMinConf + ((xMaxConf - xMinConf) / 2) %}
	{% set yCenter = yMinConf + ((yMaxConf - yMinConf) / 2) %}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={True}

[gcode_macro _ADAPTIVE_BED_MESH]
description = Perform a bed mesh, but only where and when it's needed
gcode = 
	{% set ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home printer first!") }
	{% endif %}
	
	
	{% if ready %}
	_DO_ADAPTIVE_MESH
	
	
	
	{% else %}
	RESPOND MSG="Adaptive bed mesh: parameters not computed, automatically calling the COMPUTE_MESH_PARAMETERS macro prior to the mesh"
	_COMPUTE_MESH_PARAMETERS {rawparams}
	M400
	_DO_ADAPTIVE_MESH
	{% endif %}

[gcode_macro _DO_ADAPTIVE_MESH]
gcode = 
	
	{% set do_mesh = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_mesh %}
	{% set do_nominal = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_nominal %}
	{% set mesh_min = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_min %}
	{% set mesh_max = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_max %}
	{% set probe_count = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].probe_count %}
	{% set rRefIndex = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].rri %}
	{% set algo = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].algo %}
	
	
	
	
	{% if do_mesh %}
	
	{% if do_nominal %}
	RESPOND MSG="Adaptive bed mesh: nominal bed mesh"
	BED_MESH_CALIBRATE_ORIGINAL
	{% else %}
	RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
	BED_MESH_CALIBRATE_ORIGINAL MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}
	{% endif %}
	{% else %}
	RESPOND MSG="Adaptive bed mesh: no mesh to be done"
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={False}

[gcode_macro CURRENT_HIGH]
description = Raises stepper current for printing routine
gcode = 
	M117 Increased motor currents.
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro globalvariables"].printcurrentxy|float}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro globalvariables"].printcurrentxy|float}
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}

[gcode_macro CURRENT_NORMAL]
description = Lowers stepper current for NON-printing routines
gcode = 
	M117 Decreased motor currents.
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={ printer.configfile.config["tmc2209 stepper_x"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={ printer.configfile.config["tmc2209 stepper_y"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={ printer.configfile.config["tmc2209 stepper_z"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={ printer.configfile.config["tmc2209 stepper_z1"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={ printer.configfile.config["tmc2209 stepper_z2"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={ printer.configfile.config["tmc2209 stepper_z3"]["run_current"] }

[force_move]
enable_force_move = true

[probe]
pin = sht36v2:PA1
x_offset = -21.2
y_offset = 37.5
speed = 3.0
lift_speed = 10.0
samples = 5
samples_result = median
sample_retract_dist = 2.0
samples_tolerance = 0.010
samples_tolerance_retries = 5
z_offset = 8.60

[homing_override]
axes = z
gcode = 
	{% set KEEP_PROBE = params.KEEP_PROBE|default(FALSE) %}
	{% set GOT_PROBE = params.GOT_PROBE|default(FALSE) %}
	{% set ONLY_Z = params.ONLY_Z|default(FALSE) %}
	{% set Z_POS = printer.toolhead.position.z %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set X_PROBEOFFSET = printer.configfile.config["probe"]["x_offset"]|float %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set Y_PROBEOFFSET = printer.configfile.config["probe"]["y_offset"]|float %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	SET_KINEMATIC_POSITION Z=0
	G0 Z15 F3600
	{% else %}
	{% if Z_POS < 15 %}
	G90
	G0 Z15
	{% else %}
	G91
	G0 Z1 F3600
	G90
	{% endif %}
	{% endif %}
	G90
	M118 Currently homed: { printer.toolhead.homed_axes }
	{% if printer.toolhead.homed_axes == "xyz" and ONLY_Z %}
	M118 Re-Homing skipped on X & Y.
	{% else %}
	G28 X Y
	{% endif %}
	{% if GOT_PROBE == FALSE %}
	M401
	{% endif %}
	G0 X{(X_MID - X_PROBEOFFSET)} Y{(Y_MID - Y_PROBEOFFSET)} F4000
	G28 Z
	G0 Z15 F3600
	{% if KEEP_PROBE == FALSE %}
	M402
	{% endif %}

[gcode_macro M401]
description = Deploys the Euclid probe
gcode = 
	QUERY_PROBE
	{% set Z_POS = printer.toolhead.position.z %}
	{% if printer.probe.last_query %}
	M118 Fetching Euclid Probe.
	{% if printer.toolhead.homed_axes != "xyz" %}
	SET_KINEMATIC_POSITION Z=0
	G0 Z15 F3600
	G28X
	G28Y
	{% endif %}
	G90
	{% if Z_POS < 15 %} G0 Z15 {% endif %}
	_PROBE_DEPLOY
	{% else %}
	M118 ?!Attempted to Deploy probe but it is already attached.
	{% endif %}

[gcode_macro M402]
description = Stows the Euclid probe
gcode = 
	QUERY_PROBE
	{% set Z_POS = printer.toolhead.position.z %}
	{% if not printer.probe.last_query %}
	M118 Stowing Euclid Probe.
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	{% if Z_POS < 15 %} G0 Z15 {% endif %}
	_PROBE_STOW
	{% else %}
	M118 ?!Attempted to Stow probe but it is not attached.
	{% endif %}

[gcode_macro _PROBE_DEPLOY]
gcode = 
	G90
	G0 Y{printer["gcode_macro globalvariables"].euclidcleary|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidx|float} F4000
	G0 Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} F4000
	_error_if_probe_not_deployed

[gcode_macro _PROBE_STOW]
gcode = 
	G90
	G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} F4000
	G0 Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidx|float} F2000
	G0 Y{printer["gcode_macro globalvariables"].euclidcleary|float} F4000
	_error_if_probe_deployed

[gcode_macro _do_error_if_probe_deployed]
gcode = 
	{% if not printer.probe.last_query %}
	{action_raise_error("ERROR: Probe is still deployed, please remove and return to dock.")}
	{% else %}
	M118 Euclid probe has been stowed.
	{% endif %}

[gcode_macro _error_if_probe_deployed]
gcode = 
	G4 P300
	QUERY_PROBE
	_do_error_if_probe_deployed

[gcode_macro _do_error_if_probe_not_deployed]
gcode = 
	{% if printer.probe.last_query %}
	{action_raise_error("ERROR: Probe unsuccessfully deployed, please check printer.")}
	{% else %}
	M118 Euclid probe has been attached.
	{% endif %}

[gcode_macro _error_if_probe_not_deployed]
gcode = 
	G4 P300
	QUERY_PROBE
	_do_error_if_probe_not_deployed

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_ORIGINAL
description = Levels the four Z-axis gantry corners
gcode = 
	{% if printer.toolhead.homed_axes != "xyz" %}
	G28 KEEP_PROBE:TRUE
	{% endif %}
	M401
	QUAD_GANTRY_LEVEL_ORIGINAL
	M402

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIGINAL
description = Performs bed mesh
gcode = 
	QUERY_PROBE
	M401
	BED_MESH_CALIBRATE_ORIGINAL
	M402

[gcode_macro G32]
description = Clears bed-mesh and performs G28, QGL, G28
gcode = 
	BED_MESH_CLEAR
	G28 KEEP_PROBE:TRUE
	QUAD_GANTRY_LEVEL_ORIGINAL
	G28 GOT_PROBE:TRUE
	QUERY_PROBE

[gcode_macro G3201]
description = Clears bed-mesh and performs G28, QGL, G28-Z, Probes Center, and applies bed-mesh
gcode = 
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set X_MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_xcenter|float %}
	{% set Y_MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_ycenter|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set X_PROBEOFFSET = printer.configfile.config["probe"]["x_offset"]|float %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set Y_PROBEOFFSET = printer.configfile.config["probe"]["y_offset"]|float %}
	{% set ZSpeed = printer["gcode_macro globalvariables"].zprobespeed|float %}
	{% set ZSamples = printer["gcode_macro globalvariables"].zprobesamples|int %}
	{% set ZTolerance = printer["gcode_macro globalvariables"].zprobetolerance|float %}
	{% set ZRetract = printer["gcode_macro globalvariables"].zproberetract|float %}
	{% set S_Retries = printer.configfile.config["probe"]["samples_tolerance_retries"]|int %}
	BED_MESH_CLEAR
	G28 KEEP_PROBE:TRUE
	QUAD_GANTRY_LEVEL_ORIGINAL
	G0 Z15 F3600
	{% if MeshToApply == "ADAPTIVE" %}
	G0 X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} F4000
	M118 ADAPTIVE: Moving to X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} to probe Z0.
	{% else %}
	G0 X{(X_MID - X_PROBEOFFSET)} Y{(Y_MID - Y_PROBEOFFSET)} F4000
	M118 Moving to X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} to probe Z0.
	{% endif %}
	PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries={S_Retries} sample_retract_dist={ZRetract}
	_CHECK_PROBE3201

[gcode_macro _CHECK_PROBE3201]
gcode = 
	{% set PASS = printer.probe.last_z_result %}
	{% set ZP_CAL = printer.configfile.config["probe"]["z_offset"]|float %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set Z_POS = printer.toolhead.position.z|float %}
	{% set Z_DIFFERENCE = PASS - ZP_CAL|float %}
	{% set NEW_CURRENT_Z = (Z_POS - Z_DIFFERENCE) %}
	M118 Current Probing is: {PASS}
	M118 Z-Probe Offset is: {ZP_CAL}
	M118 Difference: {Z_DIFFERENCE}
	M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
	SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
	G4 P100
	M118 Moving nozzle to newly adjusted Z15.
	G0 Z15 F500
	G4 P1000
	{% if MeshToApply != "NONE" %}
	{% if MeshToApply == "INSITU" %}
	M118 Performing INSITU Mesh.
	BED_MESH_CALIBRATE_ORIGINAL
	BED_MESH_PROFILE SAVE=INSITU
	{% elif MeshToApply == "ADAPTIVE" %}
	M118 Performing ADAPTIVE Mesh.
	_ADAPTIVE_BED_MESH
	{% else %}
	M118 Applied {MeshToApply} Mesh.
	BED_MESH_PROFILE LOAD={MeshToApply}
	{% endif %}
	{% endif %}
	QUERY_PROBE
	{% if not printer.probe.last_query %}
	M118 Stowing Euclid Probe.
	_PROBE_STOW
	{% else %}
	M118 ?!Probe is not attached.
	{% endif %}

[firmware_retraction]
retract_length = 0.5
retract_speed = 30
unretract_extra_length = 0
unretract_speed = 30

[gcode_macro globalvariables]
variable_limitaccel = 3501
variable_limitdecel = 1751
variable_defaulttempnozzle = 235
variable_defaultreadynozzle = 210
variable_defaultwarmnozzle = 160
variable_defaulttempbed = 110
variable_defaultenclosure = 40
variable_meshtoapply = "ADAPTIVE"
variable_qglbeforesoakmesh = True
variable_qglbeforesoakprint = True
variable_hotmeshsoakminutes = 20
variable_preprintsoakminutes = 15
variable_insitumeshsoakminutes = 01
variable_postprintcool = 1
variable_postprintparkcool = 2
variable_purgeretract = 0.1
variable_endretract = 2.0
variable_nplimitaccel = 3500
variable_nplimitdecel = 1750
variable_printcurrentxy = 1.1
variable_printcurrentz = 0.8
variable_parkheightpercentage = 0.50
variable_euclidx = 0
variable_euclidy = 355
variable_euclidswipex = 50
variable_euclidcleary = 325
variable_zprobespeed = 5.0
variable_zprobesamples = 7
variable_zprobetolerance = 0.050
variable_zproberetract = 1.5
variable_adxlsoakminutes = 30
gcode = 
	M117 Happy Printing!

[input_shaper]
shaper_type_x = 3hump_ei
shaper_freq_x = 83.8
shaper_type_y = mzv
shaper_freq_y = 37.2

[bed_mesh default]
version = 1
points = 
	0.053750, 0.055000, 0.023750, 0.087500, 0.033750, 0.060000, 0.055000
	0.025000, 0.013750, 0.008750, 0.020000, 0.020000, 0.037500, 0.040000
	0.000000, 0.003750, -0.053750, -0.003750, -0.041250, 0.021250, 0.007500
	0.007500, -0.008750, -0.022500, 0.000000, -0.005000, 0.007500, 0.007500
	0.008750, 0.007500, -0.046250, -0.007500, -0.040000, 0.017500, 0.003750
	0.043750, 0.022500, 0.006250, 0.002500, 0.011250, 0.032500, 0.031250
	0.057500, 0.041250, 0.025000, 0.023750, 0.027500, 0.050000, 0.051250
tension = 0.2
min_x = 40.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 40.0
x_count = 7
max_y = 310.0
mesh_x_pps = 2
max_x = 310.0

[bed_mesh MESH110]
version = 1
points = 
	0.053750, 0.055000, 0.023750, 0.087500, 0.033750, 0.060000, 0.055000
	0.025000, 0.013750, 0.008750, 0.020000, 0.020000, 0.037500, 0.040000
	0.000000, 0.003750, -0.053750, -0.003750, -0.041250, 0.021250, 0.007500
	0.007500, -0.008750, -0.022500, 0.000000, -0.005000, 0.007500, 0.007500
	0.008750, 0.007500, -0.046250, -0.007500, -0.040000, 0.017500, 0.003750
	0.043750, 0.022500, 0.006250, 0.002500, 0.011250, 0.032500, 0.031250
	0.057500, 0.041250, 0.025000, 0.023750, 0.027500, 0.050000, 0.051250
tension = 0.2
min_x = 40.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 40.0
x_count = 7
max_y = 310.0
mesh_x_pps = 2
max_x = 310.0
=======================
Unhandled exception during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 141, in _read_config
    self.load_object(config, section_config.get_name(), None)
  File "/home/pi/klipper/klippy/klippy.py", line 130, in load_object
    self.objects[section] = init_func(config.getsection(section))
  File "/home/pi/klipper/klippy/extras/gcode_macro.py", line 191, in load_config_prefix
    return GCodeMacro(config)
  File "/home/pi/klipper/klippy/extras/gcode_macro.py", line 147, in __init__
    self.variables[option[len(prefix):]] = ast.literal_eval(
  File "/usr/lib/python3.9/ast.py", line 62, in literal_eval
    node_or_string = parse(node_or_string, mode='eval')
  File "/usr/lib/python3.9/ast.py", line 50, in parse
    return compile(source, filename, mode, flags,
  File "<unknown>", line 1
    01
     ^
SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers
webhooks client 3039366328: New connection
webhooks client 3039366328: Client info {'program': 'Moonraker', 'version': 'v0.8.0-23-g18f5ff4'}
Unable to issue reset command on MCU 'mcu'
Unable to issue reset command on MCU 'sht36v2'
webhooks client 3039366328: Disconnected
Restarting printer
Start printer at Thu Mar  2 22:59:23 2023 (1677797964.0 2036.2)
===== Config file =====
[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_39003000105053424E363620-if00
restart_method = command

[mcu sht36v2]
canbus_uuid = 3388e21717f3

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.70
min_temp = 0
max_temp = 120
control = pid
pid_kp = 58.437
pid_ki = 2.347
pid_kd = 363.769
pwm_cycle_time = 0.0166

[extruder]
step_pin = sht36v2:PB4
dir_pin = sht36v2:PB3
enable_pin = !sht36v2:PA15
rotation_distance = 22.6789511
gear_ratio = 50:17
microsteps = 32
full_steps_per_rotation = 200
filament_diameter = 1.75
heater_pin = sht36v2:PA8
sensor_type = 104NT-4-RO25H42G
sensor_pin = sht36v2:PA3
min_temp = 10
max_temp = 270
max_power = 1.0
min_extrude_temp = 170
control = pid
pid_kp = 26.213
pid_ki = 1.304
pid_kd = 131.721
nozzle_diameter = 0.4
pressure_advance = 0.055
pressure_advance_smooth_time = 0.030

[tmc2209 extruder]
uart_pin = sht36v2:PB5
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan]
pin = gpio18
max_power = 1
cycle_time = 0.002
hardware_pwm = false
shutdown_speed = 0

[heater_fan hotend_fan]
pin = sht36v2:PB10
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = .7

[heater_fan exhaust_fan]
pin = PD15
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0
heater = heater_bed
heater_temp = 60
fan_speed = 1.0

[fan_generic fan]
pin = sht36v2:PB11

[multi_pin controller_fan_pins]
pins = PD14, PD13

[controller_fan controller_fan]
pin = controller_fan_pins
kick_start_time = 0.5
heater = heater_bed, extruder
stepper = X, Y, Z, Z1, Z2, Z3
fan_speed = 0.6

[temperature_sensor Octopus]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor RaspberryPi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor Enclosure]
sensor_type = ATC Semitec 104GT-2
sensor_pin = sht36v2:PA4
min_temp = -50
max_temp = 350

[temperature_sensor Fly-SHT]
sensor_type = temperature_mcu
sensor_mcu = sht36v2

[printer]
kinematics = corexy
max_velocity = 700
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 10.0

[virtual_sdcard]
path = ~/gcode_files

[display_status]

[pause_resume]

[respond]
default_type = echo

[idle_timeout]
timeout = 1800

[quad_gantry_level]
gantry_corners = 
	
	
	
	
	
	
	-80,-22
	390,408
points = 
	
	
	
	
	
	
	
	
	
	
	25,0
	25,280
	310,280
	310,0
speed = 75
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 15

[bed_mesh]
speed = 50
horizontal_move_z = 10
mesh_min = 40, 40
mesh_max = 270, 290
probe_count = 7, 7
mesh_pps = 2, 2
algorithm = bicubic
relative_reference_index = 24

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = !PG6
position_min = 0
position_endstop = 310
position_max = 310
homing_speed = 60
second_homing_speed = 10
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = false
run_current = 0.4
sense_resistor = 0.105
stealthchop_threshold = 0

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = !PG9
position_min = 0
position_endstop = 330
position_max = 330
homing_speed = 60
second_homing_speed = 10
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = false
run_current = 0.4
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PF11
dir_pin = PG3
enable_pin = !PG5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32
endstop_pin = probe:z_virtual_endstop
position_max = 250
position_min = -5
homing_speed = 4
second_homing_speed = 2
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = PF10
enable_pin = !PG2
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = false
run_current = 0.3
sense_resistor = 0.110
stealthchop_threshold = 0

[gcode_macro _ADAPTIVE_MESH_VARIABLES]
variable_ready = False
variable_do_mesh = False
variable_do_nominal = False
variable_mesh_min = 0,0
variable_mesh_max = 0,0
variable_mesh_center = 0,0
variable_mesh_xcenter = 0
variable_mesh_ycenter = 0
variable_obj_min_y = 0
variable_obj_min_x = 0
variable_probe_count = 0,0
variable_rri = 0
variable_algo = "bicubic"
gcode = 

[gcode_macro _COMPUTE_MESH_PARAMETERS]
description = Compute the mesh parameters and store them for later use
gcode = 
	
	{% set xMinConf, yMinConf = printer["configfile"].config["bed_mesh"]["mesh_min"].split(',')|map('trim')|map('int') %}
	{% set xMaxConf, yMaxConf = printer["configfile"].config["bed_mesh"]["mesh_max"].split(',')|map('trim')|map('int') %}
	{% set xProbeCntConf, yProbeCntConf = printer["configfile"].config["bed_mesh"]["probe_count"].split(',')|map('trim')|map('int') %}
	{% set algo = printer["configfile"].config["bed_mesh"]["algorithm"]|lower %}
	{% set xMeshPPS, yMeshPPS = (printer["configfile"].config["bed_mesh"]["mesh_pps"] | default('2,2')).split(',')|map('trim')|map('int') %}
	
	
	
	{% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
	
	
	{% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
	{% set margin = params.MARGIN|default(5)|int %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=obj_min_y VALUE={yMinSpec}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=obj_min_x VALUE={xMinSpec}
	
	
	
	
	{% set xMin = [xMinConf, (xMinSpec - margin)]|max %}
	{% set xMax = [xMaxConf, (xMaxSpec + margin)]|min %}
	{% set yMin = [yMinConf, (yMinSpec - margin)]|max %}
	{% set yMax = [yMaxConf, (yMaxSpec + margin)]|min %}
	
	
	
	
	{% set xProbeCnt = ((xMax - xMin) * xProbeCntConf / (xMaxConf - xMinConf))|round(0, 'ceil')|int %}
	{% set yProbeCnt = ((yMax - yMin) * yProbeCntConf / (yMaxConf - yMinConf))|round(0, 'ceil')|int %}
	
	
	
	
	
	
	
	
	{% if xProbeCnt < 3 and yProbeCnt < 3 %}
	RESPOND MSG="Computed mesh parameters: none, bed mesh not needed"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={False}
	
	{% set xCenter = xMin + ((xMax - xMin) / 2) %}
	{% set yCenter = yMin + ((yMax - yMin) / 2) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_xcenter VALUE={xCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_ycenter VALUE={yCenter}
	M118 ADAPTIVE: X_Center: {xCenter}, Y_Center: {yCenter}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	{% else %}
	{% set xProbeCnt = [3, xProbeCnt]|max %}
	{% set yProbeCnt = [3, yProbeCnt]|max %}
	
	
	
	{% if xProbeCnt % 2 == 0 %}
	{% set xProbeCnt = xProbeCnt + 1 %}
	{% endif %}
	{% if yProbeCnt % 2 == 0 %}
	{% set yProbeCnt = yProbeCnt + 1 %}
	{% endif %}
	
	
	{% if xMeshPPS != 0 or yMeshPPS != 0 %}
	{% set probeCntMin = [xProbeCnt, yProbeCnt]|min %}
	{% set probeCntMax = [xProbeCnt, yProbeCnt]|max %}
	{% if algo == "lagrange" and probeCntMax > 6 %}
	
	{% set algo = "bicubic" %}
	{% endif %}
	{% if algo == "bicubic" and probeCntMin < 4 %}
	{% if probeCntMax > 6 %}
	
	{% if xProbeCnt > yProbeCnt %}
	{% set yProbeCnt = 5 %}
	{% else %}
	{% set xProbeCnt = 5 %}
	{% endif %}
	{% else %}
	
	{% set algo = "lagrange" %}
	{% endif %}
	{% endif %}
	{% endif %}
	
	
	{% set rRefIndex = (((xProbeCnt * yProbeCnt) - 1) / 2)|int %}
	{% set xCenter = xMin + ((xMax - xMin) / 2) %}
	{% set yCenter = yMin + ((yMax - yMin) / 2) %}
	
	
	{% set mesh_min = "%d,%d"|format(xMin, yMin) %}
	{% set mesh_max = "%d,%d"|format(xMax, yMax) %}
	{% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} MESH_CENTER={mesh_center} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_xcenter VALUE={xCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_ycenter VALUE={yCenter}
	M118 ADAPTIVE: X_Center: {xCenter}, Y_Center: {yCenter}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=rri VALUE={rRefIndex}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
	{% endif %}
	{% else %}
	RESPOND MSG="Computed mesh parameters: none, going for a nominal bed mesh"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={True}
	
	{% set xCenter = xMinConf + ((xMaxConf - xMinConf) / 2) %}
	{% set yCenter = yMinConf + ((yMaxConf - yMinConf) / 2) %}
	{% set mesh_center = "%d,%d"|format(xCenter, yCenter) %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_center VALUE='"{mesh_center}"'
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={True}

[gcode_macro _ADAPTIVE_BED_MESH]
description = Perform a bed mesh, but only where and when it's needed
gcode = 
	{% set ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home printer first!") }
	{% endif %}
	
	
	{% if ready %}
	_DO_ADAPTIVE_MESH
	
	
	
	{% else %}
	RESPOND MSG="Adaptive bed mesh: parameters not computed, automatically calling the COMPUTE_MESH_PARAMETERS macro prior to the mesh"
	_COMPUTE_MESH_PARAMETERS {rawparams}
	M400
	_DO_ADAPTIVE_MESH
	{% endif %}

[gcode_macro _DO_ADAPTIVE_MESH]
gcode = 
	
	{% set do_mesh = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_mesh %}
	{% set do_nominal = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_nominal %}
	{% set mesh_min = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_min %}
	{% set mesh_max = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_max %}
	{% set probe_count = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].probe_count %}
	{% set rRefIndex = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].rri %}
	{% set algo = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].algo %}
	
	
	
	
	{% if do_mesh %}
	
	{% if do_nominal %}
	RESPOND MSG="Adaptive bed mesh: nominal bed mesh"
	BED_MESH_CALIBRATE_ORIGINAL
	{% else %}
	RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
	BED_MESH_CALIBRATE_ORIGINAL MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}
	{% endif %}
	{% else %}
	RESPOND MSG="Adaptive bed mesh: no mesh to be done"
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={False}

[gcode_macro CURRENT_HIGH]
description = Raises stepper current for printing routine
gcode = 
	M117 Increased motor currents.
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro globalvariables"].printcurrentxy|float}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro globalvariables"].printcurrentxy|float}
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer["gcode_macro globalvariables"].printcurrentz|float}

[gcode_macro CURRENT_NORMAL]
description = Lowers stepper current for NON-printing routines
gcode = 
	M117 Decreased motor currents.
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={ printer.configfile.config["tmc2209 stepper_x"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={ printer.configfile.config["tmc2209 stepper_y"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={ printer.configfile.config["tmc2209 stepper_z"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={ printer.configfile.config["tmc2209 stepper_z1"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={ printer.configfile.config["tmc2209 stepper_z2"]["run_current"] }
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={ printer.configfile.config["tmc2209 stepper_z3"]["run_current"] }

[force_move]
enable_force_move = true

[probe]
pin = sht36v2:PA1
x_offset = -21.2
y_offset = 37.5
speed = 3.0
lift_speed = 10.0
samples = 5
samples_result = median
sample_retract_dist = 2.0
samples_tolerance = 0.010
samples_tolerance_retries = 5
z_offset = 8.60

[homing_override]
axes = z
gcode = 
	{% set KEEP_PROBE = params.KEEP_PROBE|default(FALSE) %}
	{% set GOT_PROBE = params.GOT_PROBE|default(FALSE) %}
	{% set ONLY_Z = params.ONLY_Z|default(FALSE) %}
	{% set Z_POS = printer.toolhead.position.z %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set X_PROBEOFFSET = printer.configfile.config["probe"]["x_offset"]|float %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set Y_PROBEOFFSET = printer.configfile.config["probe"]["y_offset"]|float %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	SET_KINEMATIC_POSITION Z=0
	G0 Z15 F3600
	{% else %}
	{% if Z_POS < 15 %}
	G90
	G0 Z15
	{% else %}
	G91
	G0 Z1 F3600
	G90
	{% endif %}
	{% endif %}
	G90
	M118 Currently homed: { printer.toolhead.homed_axes }
	{% if printer.toolhead.homed_axes == "xyz" and ONLY_Z %}
	M118 Re-Homing skipped on X & Y.
	{% else %}
	G28 X Y
	{% endif %}
	{% if GOT_PROBE == FALSE %}
	M401
	{% endif %}
	G0 X{(X_MID - X_PROBEOFFSET)} Y{(Y_MID - Y_PROBEOFFSET)} F4000
	G28 Z
	G0 Z15 F3600
	{% if KEEP_PROBE == FALSE %}
	M402
	{% endif %}

[gcode_macro M401]
description = Deploys the Euclid probe
gcode = 
	QUERY_PROBE
	{% set Z_POS = printer.toolhead.position.z %}
	{% if printer.probe.last_query %}
	M118 Fetching Euclid Probe.
	{% if printer.toolhead.homed_axes != "xyz" %}
	SET_KINEMATIC_POSITION Z=0
	G0 Z15 F3600
	G28X
	G28Y
	{% endif %}
	G90
	{% if Z_POS < 15 %} G0 Z15 {% endif %}
	_PROBE_DEPLOY
	{% else %}
	M118 ?!Attempted to Deploy probe but it is already attached.
	{% endif %}

[gcode_macro M402]
description = Stows the Euclid probe
gcode = 
	QUERY_PROBE
	{% set Z_POS = printer.toolhead.position.z %}
	{% if not printer.probe.last_query %}
	M118 Stowing Euclid Probe.
	{% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
	G90
	{% if Z_POS < 15 %} G0 Z15 {% endif %}
	_PROBE_STOW
	{% else %}
	M118 ?!Attempted to Stow probe but it is not attached.
	{% endif %}

[gcode_macro _PROBE_DEPLOY]
gcode = 
	G90
	G0 Y{printer["gcode_macro globalvariables"].euclidcleary|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidx|float} F4000
	G0 Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} F4000
	_error_if_probe_not_deployed

[gcode_macro _PROBE_STOW]
gcode = 
	G90
	G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} F4000
	G0 Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
	G0 X{printer["gcode_macro globalvariables"].euclidx|float} F2000
	G0 Y{printer["gcode_macro globalvariables"].euclidcleary|float} F4000
	_error_if_probe_deployed

[gcode_macro _do_error_if_probe_deployed]
gcode = 
	{% if not printer.probe.last_query %}
	{action_raise_error("ERROR: Probe is still deployed, please remove and return to dock.")}
	{% else %}
	M118 Euclid probe has been stowed.
	{% endif %}

[gcode_macro _error_if_probe_deployed]
gcode = 
	G4 P300
	QUERY_PROBE
	_do_error_if_probe_deployed

[gcode_macro _do_error_if_probe_not_deployed]
gcode = 
	{% if printer.probe.last_query %}
	{action_raise_error("ERROR: Probe unsuccessfully deployed, please check printer.")}
	{% else %}
	M118 Euclid probe has been attached.
	{% endif %}

[gcode_macro _error_if_probe_not_deployed]
gcode = 
	G4 P300
	QUERY_PROBE
	_do_error_if_probe_not_deployed

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = QUAD_GANTRY_LEVEL_ORIGINAL
description = Levels the four Z-axis gantry corners
gcode = 
	{% if printer.toolhead.homed_axes != "xyz" %}
	G28 KEEP_PROBE:TRUE
	{% endif %}
	M401
	QUAD_GANTRY_LEVEL_ORIGINAL
	M402

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIGINAL
description = Performs bed mesh
gcode = 
	QUERY_PROBE
	M401
	BED_MESH_CALIBRATE_ORIGINAL
	M402

[gcode_macro G32]
description = Clears bed-mesh and performs G28, QGL, G28
gcode = 
	BED_MESH_CLEAR
	G28 KEEP_PROBE:TRUE
	QUAD_GANTRY_LEVEL_ORIGINAL
	G28 GOT_PROBE:TRUE
	QUERY_PROBE

[gcode_macro G3201]
description = Clears bed-mesh and performs G28, QGL, G28-Z, Probes Center, and applies bed-mesh
gcode = 
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set X_MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_xcenter|float %}
	{% set Y_MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_ycenter|float %}
	{% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
	{% set X_PROBEOFFSET = printer.configfile.config["probe"]["x_offset"]|float %}
	{% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
	{% set Y_PROBEOFFSET = printer.configfile.config["probe"]["y_offset"]|float %}
	{% set ZSpeed = printer["gcode_macro globalvariables"].zprobespeed|float %}
	{% set ZSamples = printer["gcode_macro globalvariables"].zprobesamples|int %}
	{% set ZTolerance = printer["gcode_macro globalvariables"].zprobetolerance|float %}
	{% set ZRetract = printer["gcode_macro globalvariables"].zproberetract|float %}
	{% set S_Retries = printer.configfile.config["probe"]["samples_tolerance_retries"]|int %}
	BED_MESH_CLEAR
	G28 KEEP_PROBE:TRUE
	QUAD_GANTRY_LEVEL_ORIGINAL
	G0 Z15 F3600
	{% if MeshToApply == "ADAPTIVE" %}
	G0 X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} F4000
	M118 ADAPTIVE: Moving to X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} to probe Z0.
	{% else %}
	G0 X{(X_MID - X_PROBEOFFSET)} Y{(Y_MID - Y_PROBEOFFSET)} F4000
	M118 Moving to X{(X_MeshCenter - X_PROBEOFFSET)} Y{(Y_MeshCenter - Y_PROBEOFFSET)} to probe Z0.
	{% endif %}
	PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries={S_Retries} sample_retract_dist={ZRetract}
	_CHECK_PROBE3201

[gcode_macro _CHECK_PROBE3201]
gcode = 
	{% set PASS = printer.probe.last_z_result %}
	{% set ZP_CAL = printer.configfile.config["probe"]["z_offset"]|float %}
	{% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
	{% set Z_POS = printer.toolhead.position.z|float %}
	{% set Z_DIFFERENCE = PASS - ZP_CAL|float %}
	{% set NEW_CURRENT_Z = (Z_POS - Z_DIFFERENCE) %}
	M118 Current Probing is: {PASS}
	M118 Z-Probe Offset is: {ZP_CAL}
	M118 Difference: {Z_DIFFERENCE}
	M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
	SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
	G4 P100
	M118 Moving nozzle to newly adjusted Z15.
	G0 Z15 F500
	G4 P1000
	{% if MeshToApply != "NONE" %}
	{% if MeshToApply == "INSITU" %}
	M118 Performing INSITU Mesh.
	BED_MESH_CALIBRATE_ORIGINAL
	BED_MESH_PROFILE SAVE=INSITU
	{% elif MeshToApply == "ADAPTIVE" %}
	M118 Performing ADAPTIVE Mesh.
	_ADAPTIVE_BED_MESH
	{% else %}
	M118 Applied {MeshToApply} Mesh.
	BED_MESH_PROFILE LOAD={MeshToApply}
	{% endif %}
	{% endif %}
	QUERY_PROBE
	{% if not printer.probe.last_query %}
	M118 Stowing Euclid Probe.
	_PROBE_STOW
	{% else %}
	M118 ?!Probe is not attached.
	{% endif %}

[firmware_retraction]
retract_length = 0.5
retract_speed = 30
unretract_extra_length = 0
unretract_speed = 30

[gcode_macro globalvariables]
variable_limitaccel = 3501
variable_limitdecel = 1751
variable_defaulttempnozzle = 235
variable_defaultreadynozzle = 210
variable_defaultwarmnozzle = 160
variable_defaulttempbed = 110
variable_defaultenclosure = 40
variable_meshtoapply = "ADAPTIVE"
variable_qglbeforesoakmesh = True
variable_qglbeforesoakprint = True
variable_hotmeshsoakminutes = 20
variable_preprintsoakminutes = 15
variable_insitumeshsoakminutes = 1
variable_postprintcool = 1
variable_postprintparkcool = 2
variable_purgeretract = 0.1
variable_endretract = 2.0
variable_nplimitaccel = 3500
variable_nplimitdecel = 1750
variable_printcurrentxy = 1.1
variable_printcurrentz = 0.8
variable_parkheightpercentage = 0.50
variable_euclidx = 0
variable_euclidy = 355
variable_euclidswipex = 50
variable_euclidcleary = 325
variable_zprobespeed = 5.0
variable_zprobesamples = 7
variable_zprobetolerance = 0.050
variable_zproberetract = 1.5
variable_adxlsoakminutes = 30
gcode = 
	M117 Happy Printing!

[input_shaper]
shaper_type_x = 3hump_ei
shaper_freq_x = 83.8
shaper_type_y = mzv
shaper_freq_y = 37.2

[bed_mesh default]
version = 1
points = 
	0.053750, 0.055000, 0.023750, 0.087500, 0.033750, 0.060000, 0.055000
	0.025000, 0.013750, 0.008750, 0.020000, 0.020000, 0.037500, 0.040000
	0.000000, 0.003750, -0.053750, -0.003750, -0.041250, 0.021250, 0.007500
	0.007500, -0.008750, -0.022500, 0.000000, -0.005000, 0.007500, 0.007500
	0.008750, 0.007500, -0.046250, -0.007500, -0.040000, 0.017500, 0.003750
	0.043750, 0.022500, 0.006250, 0.002500, 0.011250, 0.032500, 0.031250
	0.057500, 0.041250, 0.025000, 0.023750, 0.027500, 0.050000, 0.051250
tension = 0.2
min_x = 40.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 40.0
x_count = 7
max_y = 310.0
mesh_x_pps = 2
max_x = 310.0

[bed_mesh MESH110]
version = 1
points = 
	0.053750, 0.055000, 0.023750, 0.087500, 0.033750, 0.060000, 0.055000
	0.025000, 0.013750, 0.008750, 0.020000, 0.020000, 0.037500, 0.040000
	0.000000, 0.003750, -0.053750, -0.003750, -0.041250, 0.021250, 0.007500
	0.007500, -0.008750, -0.022500, 0.000000, -0.005000, 0.007500, 0.007500
	0.008750, 0.007500, -0.046250, -0.007500, -0.040000, 0.017500, 0.003750
	0.043750, 0.022500, 0.006250, 0.002500, 0.011250, 0.032500, 0.031250
	0.057500, 0.041250, 0.025000, 0.023750, 0.027500, 0.050000, 0.051250
tension = 0.2
min_x = 40.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 40.0
x_count = 7
max_y = 310.0
mesh_x_pps = 2
max_x = 310.0
=======================
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 143, in _read_config
    m.add_printer_objects(config)
  File "/home/pi/klipper/klippy/toolhead.py", line 607, in add_printer_objects
    kinematics.extruder.add_printer_objects(config)
  File "/home/pi/klipper/klippy/kinematics/extruder.py", line 339, in add_printer_objects
    pe = PrinterExtruder(config.getsection(section), i)
  File "/home/pi/klipper/klippy/kinematics/extruder.py", line 166, in __init__
    self.heater = pheaters.setup_heater(config, gcode_id)
  File "/home/pi/klipper/klippy/extras/heaters.py", line 263, in setup_heater
    sensor = self.setup_sensor(config)
  File "/home/pi/klipper/klippy/extras/heaters.py", line 281, in setup_sensor
    raise self.printer.config_error(
configparser.Error: Unknown temperature sensor '104NT-4-RO25H42G'
webhooks client 3044312496: New connection
webhooks client 3044312496: Client info {'program': 'Moonraker', 'version': 'v0.8.0-23-g18f5ff4'}
